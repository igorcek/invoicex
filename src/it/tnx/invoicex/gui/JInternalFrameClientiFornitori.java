/** * Invoicex * Copyright (c) 2005,2006,2007 Marco Ceccarelli, Tnx snc * * Questo software Ã¨ soggetto, e deve essere distribuito con la licenza   * GNU General Public License, Version 2. La licenza accompagna il software * o potete trovarne una copia alla Free Software Foundation http://www.fsf.org . * * This software is subject to, and may be distributed under, the * GNU General Public License, Version 2. The license should have * accompanied the software or you may obtain a copy of the license * from the Free Software Foundation at http://www.fsf.org . *  * -- * Marco Ceccarelli (m.ceccarelli@tnx.it) * Tnx snc (http://www.tnx.it) * */package it.tnx.invoicex.gui;import gestioneFatture.CoordinateBancarie;import gestioneFatture.ImagePreviewPanel;import gestioneFatture.InvoicexEvent;import gestioneFatture.Menu;import gestioneFatture.Util;import gestioneFatture.dbFattura;import gestioneFatture.dbOrdine;import gestioneFatture.frmClieDest;import gestioneFatture.frmClie_tnxIntePanel;import gestioneFatture.frmImportClientiExcel;import gestioneFatture.frmInsertRapporto;import gestioneFatture.frmListCoorBanc;import gestioneFatture.frmTestDocu;import gestioneFatture.frmTestFatt;import gestioneFatture.frmTestOrdine;import it.tnx.Db;import gestioneFatture.logic.clienti.*;import gestioneFatture.main;import it.tnx.accessoUtenti.Permesso;import it.tnx.commons.CastUtils;import it.tnx.commons.DbUtils;import it.tnx.commons.FormatUtils;import it.tnx.commons.JUtil;import it.tnx.commons.SwingUtils;import it.tnx.commons.cu;import it.tnx.dbeans.ResultSet.*;import it.tnx.invoicex.IFunction;import it.tnx.invoicex.InvoicexUtil;import java.awt.Color;import java.awt.Component;import java.awt.Container;import java.awt.Cursor;import java.awt.Dimension;import java.awt.KeyboardFocusManager;import java.awt.Point;import java.awt.Rectangle;import java.awt.event.ItemEvent;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.io.File;import java.sql.ResultSet;import java.sql.Types;import java.text.*;import java.util.EventObject;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Vector;import javax.swing.*;import javax.swing.JOptionPane;import javax.swing.event.TableModelEvent;import javax.swing.event.TableModelListener;import javax.swing.filechooser.FileFilter;import javax.swing.table.*;import javax.swing.text.JTextComponent;import org.apache.commons.lang.StringUtils;import org.pushingpixels.trident.Timeline;import org.pushingpixels.trident.Timeline.TimelineState;import org.pushingpixels.trident.callback.TimelineCallbackAdapter;import org.pushingpixels.trident.ease.Spline;import tnxbeans.*;public class JInternalFrameClientiFornitori        extends javax.swing.JInternalFrame {    private static final int grandezzaTooltipImage = 150;    private static final int DOC_ORDINE = 0;    private static final int DOC_FATTURA = 1;    private static final int DOC_DDT = 2;    private DefaultTableModel tabPrezziClienteModel;    tnxbeans.tnxComboField comboToRefresh;    String listinoCliente = null;    public boolean isloading = true;    Component[] controlli = null;    public frmTestFatt padre = null;    private boolean isShowPrezziCliente = false;    private float viewPos;    private tnxDbPanel lastPanelFocus = null;    /** Creates new form frmDati_blank */    public JInternalFrameClientiFornitori() {        initComponents();                KeyboardFocusManager focusManager = KeyboardFocusManager.getCurrentKeyboardFocusManager();        focusManager.addPropertyChangeListener(            new PropertyChangeListener() {                public void propertyChange(PropertyChangeEvent e) {                    String prop = e.getPropertyName();                    if ("focusOwner".equals(prop)) {                        try {                            System.out.println("e:" + e.getPropertyName() + " old:" + e.getOldValue() + " new:" + e.getNewValue() + " source:" + e.getSource());                        } catch (Exception e2) {                        }                    }//                    if (1==1) return;                    if ("focusOwner".equals(prop)) {                        Component comp = (Component)e.getNewValue();                        if (comp == null) return;                        Component comp_par = null;                        if (comp != null && comp.getClass().getName().equals("tnxbeans.tnxMemoField$1")) {                            try {                                comp_par = comp.getParent().getParent().getParent();                                comp = comp.getParent().getParent();                            } catch (Exception e2) {                                e2.printStackTrace();                            }                        } else if (comp != null && comp.getParent() != null && comp.getParent().getClass().getName().equals("tnxbeans.tnxComboField")) {                            try {                                comp_par = comp.getParent().getParent();                                comp = comp.getParent();                            } catch (Exception e2) {                                e2.printStackTrace();                            }                        } else if (comp != null && comp.getParent() != null && comp.getParent() instanceof tnxDbPanel) {                            comp_par = comp.getParent();                        }                        if (comp_par == datiAnagrafici) comp_par = null;                        if (comp_par instanceof tnxDbPanel) {                            System.out.println("comp = " + comp);                            if (lastPanelFocus == null || lastPanelFocus != comp_par) {                                //view((tnxDbPanel)comp.getParent());                                selezionatoggle((tnxDbPanel)comp_par);                                lastPanelFocus = (tnxDbPanel) comp_par;                            }                            Point pcomp = comp_par.getLocation();                            if (comp_par.getParent() != dati) {                                pcomp = SwingUtilities.convertPoint(comp_par, pcomp, dati);                            }                            //int y = comp_par.getLocation().y + comp.getLocation().y;                            int y = pcomp.y + comp.getLocation().y;                            int ys = scroll_dati.getViewport().getViewPosition().y + scroll_dati.getViewport().getHeight();                            int ys2 = scroll_dati.getViewport().getViewPosition().y;                            if (y > ys - 50) {                                view(scroll_dati.getViewport().getViewPosition().y + 150);                            } else if (y < ys2 + 30) {                                view(scroll_dati.getViewport().getViewPosition().y - 150);                            }                        }                    }                }                private void selezionatoggle(Container parent) {                    Component[] toggles = panel_toggles.getComponents();                    Map mtoggle = new HashMap();                    mtoggle.put(dati_indirizzo, toggle_indirizzo);                    mtoggle.put(dati_contabili, toggle_contabili);                    mtoggle.put(dati_contatti, toggle_contatti);                    mtoggle.put(dati_note_opzioni, toggle_note_opzioni);                                        JToggleButton toggle_sel = (JToggleButton) mtoggle.get(parent);                    for (Component toggle_comp : toggles) {                        if (toggle_comp instanceof JToggleButton) {                            JToggleButton toggle = (JToggleButton)toggle_comp;                            if (toggle == toggle_sel) {                                if (!toggle.isSelected()) {                                    toggle.setSelected(true);                                }                            } else {                                if (toggle.isSelected()) {                                    toggle.setSelected(false);                                }                            }                        }                    }                }            }        );                InvoicexUtil.macButtonSmall(butLogo);        InvoicexUtil.macButtonSmall(butBanca);        InvoicexUtil.macButtonGradient(butNew);        InvoicexUtil.macButtonGradient(butDele);        InvoicexUtil.macButtonGradient(butDuplica);        InvoicexUtil.macButtonGradient(butFind);        InvoicexUtil.macButtonGradient(butFirs);        InvoicexUtil.macButtonGradient(butPrev);        InvoicexUtil.macButtonGradient(butNext);        InvoicexUtil.macButtonGradient(butLast);        InvoicexUtil.macButtonGradient(butStampa);        InvoicexUtil.macButtonGradient(butStampaElenco);        InvoicexUtil.macButtonGradient(butImportExcel);                tabPrezziCliente.setRowHeight(tabPrezziCliente.getRowHeight() + 4);        dati.addCampoAggiuntivo(texNotaCliente);        textObsoleto.setVisible(false);//        if(!main.pluginRitenute){//            lblDataNasc.setVisible(false);//            lblLuogNasc.setVisible(false);//            this.texLuogoNascita.setVisible(false);//            this.texDataNascita.setVisible(false);//        } else {//            this.texLuogoNascita.dbNomeCampo = "luogoNascita";//            this.texLuogoNascita.dbNomeCampo = "dataNascita";//        }        controlli = new Component[]{texCodi, comTipo, texRagiSoci, texCodiFisc, texIndi, texCap, texLoca, texProv, texPersRife, comList, texPiva, texWeb, texEmai};        InvoicexUtil.fireEvent(this, InvoicexEvent.TYPE_FRMCLIE_CONSTR_POST_INIT_COMPS);//        final it.tnx.SwingWorker worker = new it.tnx.SwingWorker() {////            public Object construct() {        texGiornoPagamento.setEnabled(false);        //istanzio classse per riempire campi secondari banche        frmClie_tnxIntePanel tnxIntePanel = new frmClie_tnxIntePanel();        tnxIntePanel.labBancAbi = labBancAbi;        tnxIntePanel.labBancCab = labBancCab;        tnxIntePanel.texBancAbi = texBancAbi;        tnxIntePanel.texBancCab = texBancCab;        dati.riempiCampiSecondari = tnxIntePanel;        if (main.getPersonalContain("consegna_e_scarico")) {            dati.aggiungiDbPanelCollegato(dbpanel_consegna_e_scarico);        } else {            dbpanel_consegna_e_scarico.setVisible(false);        }        //apro la combo pagamenti        comPaga.dbOpenList(Db.getConn(), "select codice, codice from pagamenti order by codice", null, false);        //altre combo        comList.dbOpenList(Db.getConn(), "select descrizione, codice from tipi_listino order by descrizione", null, false);        comPaese.dbOpenList(Db.getConn(), "select nome, codice1 from stati order by nome", null, false);        comAgente.dbOpenList(Db.getConn(), "select nome, id from agenti order by nome", null, false);        comConsegna.dbOpenList(Db.getConn(), "select nome, id from tipi_consegna order by nome", null, false);        comScarico.dbOpenList(Db.getConn(), "select nome, id from tipi_scarico order by nome", null, false);        comTipo.dbAddElement("Cliente", "C");        comTipo.dbAddElement("Fornitore", "F");        comTipo.dbAddElement("Cliente/Fornitore", "E");        comTipo.dbAddElement("Provvisorio", "P");        AutoCompletionEditable.enable(comTipo);                comTipo2.dbOpenList(Db.getConn(), "select descrizione, id from tipi_clie_forn order by descrizione", null, false);        //associo il panel ai dati        dati.dbNomeTabella = "clie_forn";        Vector chiave = new Vector();        chiave.add("codice");        dati.dbChiave = chiave;        dati.butSave = butSave;        dati.butUndo = butUndo;        dati.butFind = butFind;        dati.butDele = butDele;        dati.butNew  = butNew;        dati.butDuplica  = butDuplica;        dati.tipo_permesso = it.tnx.accessoUtenti.Permesso.PERMESSO_ANAGRAFICA_CLIENTI;        dati.messaggio_nuovo_manuale = true;        dati.aggiungiDbPanelCollegato(datiAnagrafici);        dati.aggiungiDbPanelCollegato(dati_indirizzo);        dati.aggiungiDbPanelCollegato(dati_contatti);        dati.aggiungiDbPanelCollegato(dati_contabili);        dati.aggiungiDbPanelCollegato(dati_note_opzioni);                dati.dbOpen(Db.getConn(), "select * from clie_forn order by ragione_sociale limit 1");        dati.dbRefresh();        // Controlli aggiuntivi su pulsanti per aggiungere documenti        try {            if(!main.utente.getPermesso(Permesso.PERMESSO_FATTURE_VENDITA, Permesso.PERMESSO_TIPO_SCRITTURA)) addFatt.setEnabled(false);            if(!main.utente.getPermesso(Permesso.PERMESSO_DDT_VENDITA, Permesso.PERMESSO_TIPO_SCRITTURA)) addDdt.setEnabled(false);            if(!main.utente.getPermesso(Permesso.PERMESSO_ORDINI_VENDITA, Permesso.PERMESSO_TIPO_SCRITTURA)) addOrd.setEnabled(false);        } catch (Exception e) {            e.printStackTrace();        }                //apro la griglia        //this.griglia.dbEditabile = true;        griglia.dbChiave = chiave;        griglia.flagUsaThread = false;        java.util.Hashtable colsWidthPerc = new java.util.Hashtable();        colsWidthPerc.put("codice", new Double(10));        colsWidthPerc.put("ragione_sociale", new Double(30));        colsWidthPerc.put("telefono", new Double(13));        //colsWidthPerc.put("fax", new Double(13));        colsWidthPerc.put("email", new Double(10));        //colsWidthPerc.put("web", new Double(10));        colsWidthPerc.put("indirizzo", new Double(0));        colsWidthPerc.put("cap", new Double(0));        colsWidthPerc.put("localita", new Double(0));        colsWidthPerc.put("provincia", new Double(0));        colsWidthPerc.put("cod fis", new Double(10));        colsWidthPerc.put("partita iva", new Double(10));        griglia.columnsSizePerc = colsWidthPerc;//                griglia.dbOpen(Db.conn, "select codice,ragione_sociale,telefono,fax,email,web, indirizzo, cap, localita, provincia from clie_forn order by ragione_sociale");        griglia.dbOpen(Db.getConn(), "select " + getCampiGriglia() + " from clie_forn order by ragione_sociale");        griglia.dbPanel = dati;        griglia_rapporti.flagUsaThread = false;        java.util.Hashtable colsWidthPercRapporti = new java.util.Hashtable();        colsWidthPercRapporti.put("id", new Double(0));        colsWidthPercRapporti.put("cliente", new Double(0));        colsWidthPercRapporti.put("data", new Double(20));        colsWidthPercRapporti.put("data avviso", new Double(20));        colsWidthPercRapporti.put("testo", new Double(60));        griglia_rapporti.columnsSizePerc = colsWidthPercRapporti;        griglia_rapporti.dbOpen(Db.getConn(), "select id, cliente, data, data_avviso as 'data avviso', testo from clie_forn_rapporti where cliente = '" + cu.toInteger(texCodi.getText()) + "'");        //sistemo alcune cose        //this.comTipo.addItem("CL");        //this.comTipo.addItem("FO");        //events        comIvaStandard.dbAddElement("");        comIvaStandard.dbOpenList(Db.getConn(), "SELECT descrizione, codice FROM codici_iva");        if (!main.getPersonalContain("adesivi")) {            tabCent.remove(3);        } else {            dati.dbForzaModificati();        }        if (main.iniPrezziCliente == true) {            dati.addDbListener(new DbListener() {                public void statusFired(DbEvent event) {                    if (event.getStatus() == dati.STATUS_REFRESHING || event.getStatus() == dati.STATUS_ADDING) {                        showPrezziCliente();                    } else if (event.getStatus() == dati.STATUS_SAVING) {                        savePrezziCliente();                    }                }            });        } else {            tabCent.remove(2);        }        dati.addDbListener(new DbListener() {            public void statusFired(DbEvent event) {                if (event.getStatus() == dati.STATUS_REFRESHING || event.getStatus() == dati.STATUS_ADDING) {                    azzera_controlli(controlli);                    setNewStato();                } else if (event.getStatus() == dati.STATUS_SAVING) {                    azzera_controlli(controlli);                }            }        });        dati.dbRefresh();        comPagaItemStateChanged(null);        isloading = false;        this.texNotaCliente.setVisible(false);        InvoicexUtil.msgNew(this, dati, new IFunction() {            public void run() {                butNewActionPerformed(null);            }        }, comTipo, "Nessun cliente presente, prosegui con l'inserimento");//                return null;//            }//        };////        worker.start();    }    public void addNew() {        butNewActionPerformed(null);        this.tabCent.setSelectedIndex(0);//        setNewStato();        //this.show();    }    public void addNew(tnxbeans.tnxComboField combo) {        addNew();        this.comboToRefresh = combo;    }    private void azzera_controlli(Component[] component) {        for (Component c : component) {            if (c == comList) {                System.out.println("c = " + c);            }            c.setBackground(UIManager.getDefaults().getColor("TextField.background"));        }    }    public void openForm(int documento, final String codiceCliente) {        if (documento == DOC_ORDINE) {            frmTestOrdine frm = new frmTestOrdine(frmTestOrdine.DB_INSERIMENTO, "", 0, "P", 0, dbOrdine.TIPO_ORDINE, -1);            Menu m = (Menu) main.getPadre();            m.openFrame(frm, 740, InvoicexUtil.getHeightIntFrame(750));            frm.texClie.setText(codiceCliente);            frm.texClie.aggiornaComboAbbinata();            frm.recuperaDatiCliente();        } else if (documento == DOC_DDT) {            frmTestDocu frm = new frmTestDocu(frmTestDocu.DB_INSERIMENTO, "", 0, "P", 0, -1);            Menu m = (Menu) main.getPadre();            m.openFrame(frm, 740, InvoicexUtil.getHeightIntFrame(750));            frm.texClie.setText(codiceCliente);            frm.texClie.aggiornaComboAbbinata();            frm.recuperaDatiCliente();        } else if (documento == DOC_FATTURA) {            //controllo se sono aperti altri frmTestFatt            final frmTestFatt frm = new frmTestFatt(frmTestFatt.DB_INSERIMENTO, "", 0, "P", 0, dbFattura.TIPO_FATTURA_IMMEDIATA, -1);            Menu m = (Menu) main.getPadre();            m.openFrame(frm, 740, InvoicexUtil.getHeightIntFrame(750));            try {                frm.eseguiDopo(new Runnable() {                    public void run() {                        try {                            frm.texClie.setText(codiceCliente);                            frm.texClie.aggiornaComboAbbinata();                            frm.texCliente.setText(frm.comClie.getText());                            frm.selezionaCliente();                        } catch (Exception e) {                            e.printStackTrace();                        }                    }                });            } catch (Throwable t) {                t.printStackTrace();            }        }    }    private boolean controlla(Component[] component) {        String msg = "";                //controllo esistenza altro cliente/fornitore        if (dati.dbStato.equals(tnxDbPanel.DB_INSERIMENTO) &&                (texRagiSoci.getText().length() > 0 || texPiva.getText().length() > 0 || texCodiFisc.getText().length() > 0)                ) {            String sql = "select codice, ragione_sociale, piva_cfiscale, cfiscale from clie_forn where (";            String w = "";            if (texRagiSoci.getText().length() > 0) {                w += " ragione_sociale like " + Db.pc(texRagiSoci.getText(), Types.VARCHAR);            }            if (texPiva.getText().length() > 0) {                if (w.length() > 0) w += " or ";                w += " piva_cfiscale like " + Db.pc(texPiva.getText(), Types.VARCHAR);            }            if (texCodiFisc.getText().length() > 0) {                if (w.length() > 0) w += " or ";                w += " cfiscale like " + Db.pc(texCodiFisc.getText(), Types.VARCHAR);            }            sql += w + ") and IFNULL(obsoleto, '0') != '1' limit 1";            try {                List<Map> list = DbUtils.getListMap(Db.getConn(), sql);                if (list.size() > 0) {                    Map m = list.get(0);                    msg += "Sembra sia giÃ  presente questa anagrafica:\n";                    msg += "Codice: " + m.get("codice") + "\n";                    msg += "Rag. Soc.: " + m.get("ragione_sociale") + "\n";                    msg += "P. Iva: " + m.get("piva_cfiscale") + "\n";                    msg += "C. Fiscale: " + m.get("cfiscale") + "\n";                    msg += "\nSicuro di continuare con l' inserimento ?";                    if (!SwingUtils.showYesNoMessage(this, msg)) {                        return false;                    }                }            } catch (Exception e) {                e.printStackTrace();            }        }        for (Component c : component) {            String campo = "";            if (c instanceof tnxTextField) {                tnxTextField t = (tnxTextField) c;                String s = t.getText();                if (s.length() == 0) {                    if (StringUtils.isNotEmpty(t.dbDescCampo)) {                        campo = t.dbDescCampo;                    } else {                        campo = t.dbNomeCampo;                    }                    msg += campo + "\n";                    t.setBackground(Color.RED.brighter());                } else {                    t.setBackground(UIManager.getDefaults().getColor("TextField.background"));                }            } else if (c instanceof tnxComboField) {                tnxComboField t = (tnxComboField) c;                String s = t.getText();                if (s.length() == 0) {                    if (StringUtils.isNotEmpty(t.dbDescCampo)) {                        campo = t.dbDescCampo;                    } else {                        campo = t.dbNomeCampo;                    }                    msg += campo + "\n";                    t.setBackground(Color.RED.brighter());                } else {                    t.setBackground(UIManager.getDefaults().getColor("TextField.background"));                }            }        }        //controllo piva e cfiscale        String altricontrolli = "";        if (texCodiFisc.getText().length() > 0 && texCodiFisc.getText().equalsIgnoreCase(texPiva.getText())) {            //partita iva e codice fiscale uguali        } else {            String ccf = JUtil.ControllaCF(texCodiFisc.getText());            if (ccf != null && ccf.length() > 0) {                altricontrolli += ccf + "\n";                texCodiFisc.setBackground(Color.YELLOW.brighter());            }        }        String cpiva = JUtil.ControllaPIVA(texPiva.getText());        if (cpiva != null && cpiva.length() > 0) {            altricontrolli += cpiva + "\n";            texPiva.setBackground(Color.YELLOW.brighter());        }        //listino        String sql = "select * from tipi_listino";        sql += " where codice = " + Db.pc(CastUtils.toString(comList.getSelectedKey()), java.sql.Types.VARCHAR);        ResultSet resu = Db.openResultSet(sql);        try {            if (resu.next() == false) {                altricontrolli += "Il listino non Ã¨ stato scelto oppure non esiste piÃ¹\n";                comList.setBackground(Color.YELLOW.brighter());            }        } catch (Exception err) {            err.printStackTrace();        }        //email e sito        if (texEmai.getText().length() > 0 && texEmai.getText().indexOf("@") <= 0) {            altricontrolli += "L' indirizzo email non Ã¨ valido\n";            texEmai.setBackground(Color.YELLOW.brighter());        }        if (texWeb.getText().length() > 0 && texWeb.getText().indexOf("www.") < 0) {            altricontrolli += "L' indirizzo web non sembra essere valido\n";            texWeb.setBackground(Color.YELLOW.brighter());        }        if (msg.length() > 0 || altricontrolli.length() > 0) {            if (msg.length() > 0) {                msg = msg.substring(0, msg.length() - 1);                msg = "I seguenti campi non sono riempiti:\n" + msg;            }            if (altricontrolli.length() > 0) {                if (msg.length() > 0) {                    msg += "\n\n";                }                msg += "I seguenti campi presentano delle anomalie:\n" + altricontrolli;            }            msg += "\n" + "Continuare ?";            if (SwingUtils.showYesNoMessage(this, msg)) {                return true;            }            return false;        } else {            return true;        }    }    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents    private void initComponents() {        java.awt.GridBagConstraints gridBagConstraints;        jPopupMenu1 = new javax.swing.JPopupMenu();        popMenuAdd = new javax.swing.JMenuItem();        popMenuDel = new javax.swing.JMenuItem();        popMenuMod = new javax.swing.JMenuItem();        panAlto = new javax.swing.JPanel();        jToolBar1 = new javax.swing.JToolBar();        butNew = new javax.swing.JButton();        jLabel1 = new javax.swing.JLabel();        butDele = new javax.swing.JButton();        jLabel13 = new javax.swing.JLabel();        butFind = new javax.swing.JButton();        jLabel14 = new javax.swing.JLabel();        butDuplica = new javax.swing.JButton();        jLabel131 = new javax.swing.JLabel();        butFirs = new javax.swing.JButton();        butPrev = new javax.swing.JButton();        butNext = new javax.swing.JButton();        butLast = new javax.swing.JButton();        jLabel15 = new javax.swing.JLabel();        butStampaElenco = new javax.swing.JButton();        butStampa = new javax.swing.JButton();        butImportExcel = new javax.swing.JButton();        jToolBar2 = new javax.swing.JToolBar();        comFiltro1 = new javax.swing.JComboBox();        jToolBar3 = new javax.swing.JToolBar();        jLabel3 = new javax.swing.JLabel();        texSearch = new javax.swing.JTextField();        jButton3 = new javax.swing.JButton();        jSeparator2 = new javax.swing.JToolBar.Separator();        addFatt = new javax.swing.JButton();        addOrd = new javax.swing.JButton();        addDdt = new javax.swing.JButton();        tabCent = new javax.swing.JTabbedPane();        panDati = new javax.swing.JPanel();        jPanel4 = new javax.swing.JPanel();        jPanel6 = new javax.swing.JPanel();        datiAnagrafici = new tnxbeans.tnxDbPanel();        jLabel2211 = new javax.swing.JLabel();        texRagiSoci = new tnxbeans.tnxTextField();        jLabel2111 = new javax.swing.JLabel();        texCodi = new tnxbeans.tnxTextField();        chkObsoleto = new javax.swing.JCheckBox();        jLabel226 = new javax.swing.JLabel();        comTipo = new tnxbeans.tnxComboField();        jLabel227 = new javax.swing.JLabel();        comTipo2 = new tnxbeans.tnxComboField();        textObsoleto = new tnxbeans.tnxTextField();        texCodiList = new tnxbeans.tnxTextField();        texCodiList.setVisible(false);        jPanel5 = new javax.swing.JPanel();        panel_toggles = new javax.swing.JPanel();        toggle_indirizzo = new javax.swing.JToggleButton();        jSeparator5 = new javax.swing.JSeparator();        toggle_contatti = new javax.swing.JToggleButton();        jSeparator3 = new javax.swing.JSeparator();        toggle_contabili = new javax.swing.JToggleButton();        jSeparator4 = new javax.swing.JSeparator();        toggle_note_opzioni = new javax.swing.JToggleButton();        jSeparator1 = new javax.swing.JSeparator();        scroll_dati = new javax.swing.JScrollPane();        dati = new MyPanel();        dati_indirizzo = new tnxbeans.tnxDbPanel();        jLabel25 = new javax.swing.JLabel();        texIndi = new tnxbeans.tnxTextField();        jLabel212 = new javax.swing.JLabel();        texCap = new tnxbeans.tnxTextField();        jLabel222 = new javax.swing.JLabel();        texLoca = new tnxbeans.tnxTextField();        jLabel232 = new javax.swing.JLabel();        texProv = new tnxbeans.tnxTextField();        jLabel23 = new javax.swing.JLabel();        comPaese = new tnxbeans.tnxComboField();        butDest = new javax.swing.JButton();        dati_contatti = new tnxbeans.tnxDbPanel();        jLabel21 = new javax.swing.JLabel();        texFax = new tnxbeans.tnxTextField();        jLabel231 = new javax.swing.JLabel();        texTele = new tnxbeans.tnxTextField();        jLabel234 = new javax.swing.JLabel();        texCell = new tnxbeans.tnxTextField();        jLabel211 = new javax.swing.JLabel();        texPersRife = new tnxbeans.tnxTextField();        jLabel221 = new javax.swing.JLabel();        texTeleRife = new tnxbeans.tnxTextField();        jLabel223 = new javax.swing.JLabel();        texEmai = new tnxbeans.tnxTextField();        jLabel233 = new javax.swing.JLabel();        texWeb = new tnxbeans.tnxTextField();        dati_contabili = new tnxbeans.tnxDbPanel();        jLabel224 = new javax.swing.JLabel();        comPaga = new tnxbeans.tnxComboField();        texGiornoPagamento = new tnxbeans.tnxTextField();        jLabel213 = new javax.swing.JLabel();        butBanca = new javax.swing.JButton();        jLabel215 = new javax.swing.JLabel();        texBancAbi = new tnxbeans.tnxTextField();        texBancCab = new tnxbeans.tnxTextField();        labBancCab = new javax.swing.JLabel();        labBancAbi = new javax.swing.JLabel();        texBancCc = new tnxbeans.tnxTextField();        jLabel216 = new javax.swing.JLabel();        jLabel218 = new javax.swing.JLabel();        texBancCc2 = new tnxbeans.tnxTextField();        jLabel7 = new javax.swing.JLabel();        comIvaStandard = new tnxbeans.tnxComboField();        labGiornoPagamento = new javax.swing.JLabel();        jLabel2 = new javax.swing.JLabel();        texPiva = new tnxbeans.tnxTextField();        jLabel26 = new javax.swing.JLabel();        texCodiFisc = new tnxbeans.tnxTextField();        jLabel219 = new javax.swing.JLabel();        texScon1 = new tnxbeans.tnxTextField();        texScon2 = new tnxbeans.tnxTextField();        texScon3 = new tnxbeans.tnxTextField();        jLabel217 = new javax.swing.JLabel();        texScon4 = new tnxbeans.tnxTextField();        texScon5 = new tnxbeans.tnxTextField();        jLabel22 = new javax.swing.JLabel();        comList = new tnxbeans.tnxComboField();        updateListini = new tnxbeans.tnxCheckBox();        jLabel225 = new javax.swing.JLabel();        comAgente = new tnxbeans.tnxComboField();        jLabel228 = new javax.swing.JLabel();        jLabel229 = new javax.swing.JLabel();        jLabel8 = new javax.swing.JLabel();        jLabel9 = new javax.swing.JLabel();        jLabel10 = new javax.swing.JLabel();        jLabel11 = new javax.swing.JLabel();        provPred = new tnxbeans.tnxTextField();        provPredForn = new tnxbeans.tnxTextField();        segna_posto_contabili_pre = new javax.swing.JLabel();        segna_posto_contabili_post = new javax.swing.JLabel();        segna_posto_contabili_provvigioni1 = new javax.swing.JLabel();        dati_note_opzioni = new tnxbeans.tnxDbPanel();        jLabel241 = new javax.swing.JLabel();        tnxCheckBox2 = new tnxbeans.tnxCheckBox();        raggruppa1 = new tnxbeans.tnxCheckBox();        raggruppa2 = new tnxbeans.tnxCheckBox();        jLabel4 = new javax.swing.JLabel();        texLogo = new tnxbeans.tnxTextField();        butLogo = new javax.swing.JButton();        tnxCheckBox1 = new tnxbeans.tnxCheckBox();        note = new tnxbeans.tnxMemoField();        dbpanel_consegna_e_scarico = new tnxbeans.tnxDbPanel();        jLabel12 = new javax.swing.JLabel();        comConsegna = new tnxbeans.tnxComboField();        jLabel16 = new javax.swing.JLabel();        comScarico = new tnxbeans.tnxComboField();        panElen = new javax.swing.JPanel();        jScrollPane1 = new javax.swing.JScrollPane();        griglia = new tnxbeans.tnxDbGrid();        panPrezzi = new javax.swing.JPanel();        jScrollPane3 = new javax.swing.JScrollPane();        tabPrezziCliente = new ClientiMyTable();        jPanel3 = new javax.swing.JPanel();        labIntePrezzi = new javax.swing.JLabel();        jPanel1 = new javax.swing.JPanel();        jLabel5 = new javax.swing.JLabel();        jScrollPane4 = new javax.swing.JScrollPane();        griglia_rapporti = new tnxbeans.tnxDbGrid();        jLabel6 = new javax.swing.JLabel();        btnDelRigt = new javax.swing.JButton();        btnAddRow = new javax.swing.JButton();        butModiRow = new javax.swing.JButton();        texAreaNoteCliente = new javax.swing.JScrollPane();        texTesto = new javax.swing.JTextArea();        texNotaCliente = new tnxbeans.tnxTextField();        jPanel2 = new javax.swing.JPanel();        butUndo = new javax.swing.JButton();        butSave = new javax.swing.JButton();        popMenuAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-add.png"))); // NOI18N        popMenuAdd.setText("Nuovo Rapporto");        popMenuAdd.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                popMenuAddActionPerformed(evt);            }        });        jPopupMenu1.add(popMenuAdd);        popMenuDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-remove.png"))); // NOI18N        popMenuDel.setText("Elimina");        popMenuDel.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                popMenuDelActionPerformed(evt);            }        });        jPopupMenu1.add(popMenuDel);        popMenuMod.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/apps/accessories-text-editor.png"))); // NOI18N        popMenuMod.setText("Modifica");        popMenuMod.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                popMenuModActionPerformed(evt);            }        });        jPopupMenu1.add(popMenuMod);        setClosable(true);        setIconifiable(true);        setMaximizable(true);        setResizable(true);        setTitle("Clienti / Fornitori");        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {                formInternalFrameClosing(evt);            }            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {            }        });        panAlto.setLayout(new java.awt.GridBagLayout());        jToolBar1.setFloatable(false);        jToolBar1.setRollover(true);        butNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-new.png"))); // NOI18N        butNew.setText("Nuovo");        butNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butNew.setMargin(new java.awt.Insets(2, 2, 2, 2));        butNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butNew.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butNewActionPerformed(evt);            }        });        jToolBar1.add(butNew);        jLabel1.setText(" ");        jToolBar1.add(jLabel1);        butDele.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/places/user-trash.png"))); // NOI18N        butDele.setText("Elimina");        butDele.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butDele.setMargin(new java.awt.Insets(2, 2, 2, 2));        butDele.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butDele.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butDeleActionPerformed(evt);            }        });        jToolBar1.add(butDele);        jLabel13.setText(" ");        jToolBar1.add(jLabel13);        butFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-find.png"))); // NOI18N        butFind.setText("Trova");        butFind.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butFind.setMargin(new java.awt.Insets(2, 2, 2, 2));        butFind.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butFind.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butFindActionPerformed(evt);            }        });        jToolBar1.add(butFind);        jLabel14.setText(" ");        jToolBar1.add(jLabel14);        butDuplica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-copy.png"))); // NOI18N        butDuplica.setText("Duplica");        butDuplica.setFocusable(false);        butDuplica.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butDuplica.setMargin(new java.awt.Insets(2, 2, 2, 2));        butDuplica.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butDuplica.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butDuplicaActionPerformed(evt);            }        });        jToolBar1.add(butDuplica);        jLabel131.setText(" ");        jToolBar1.add(jLabel131);        butFirs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-first.png"))); // NOI18N        butFirs.setMargin(new java.awt.Insets(2, 2, 2, 2));        butFirs.setMaximumSize(new java.awt.Dimension(30, 42));        butFirs.setMinimumSize(new java.awt.Dimension(30, 42));        butFirs.setPreferredSize(new java.awt.Dimension(30, 42));        butFirs.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butFirsActionPerformed(evt);            }        });        jToolBar1.add(butFirs);        butPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-previous.png"))); // NOI18N        butPrev.setMargin(new java.awt.Insets(2, 2, 2, 2));        butPrev.setMaximumSize(new java.awt.Dimension(30, 42));        butPrev.setMinimumSize(new java.awt.Dimension(30, 42));        butPrev.setPreferredSize(new java.awt.Dimension(30, 42));        butPrev.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butPrevActionPerformed(evt);            }        });        jToolBar1.add(butPrev);        butNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-next.png"))); // NOI18N        butNext.setMargin(new java.awt.Insets(2, 2, 2, 2));        butNext.setMaximumSize(new java.awt.Dimension(30, 42));        butNext.setMinimumSize(new java.awt.Dimension(30, 42));        butNext.setPreferredSize(new java.awt.Dimension(30, 42));        butNext.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butNextActionPerformed(evt);            }        });        jToolBar1.add(butNext);        butLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-last.png"))); // NOI18N        butLast.setMargin(new java.awt.Insets(2, 2, 2, 2));        butLast.setMaximumSize(new java.awt.Dimension(30, 42));        butLast.setMinimumSize(new java.awt.Dimension(30, 42));        butLast.setPreferredSize(new java.awt.Dimension(30, 42));        butLast.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butLastActionPerformed(evt);            }        });        jToolBar1.add(butLast);        jLabel15.setText(" ");        jToolBar1.add(jLabel15);        butStampaElenco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-print.png"))); // NOI18N        butStampaElenco.setText("Stampa elenco");        butStampaElenco.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butStampaElenco.setMargin(new java.awt.Insets(2, 2, 2, 2));        butStampaElenco.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butStampaElenco.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butStampaElencoActionPerformed(evt);            }        });        jToolBar1.add(butStampaElenco);        butStampa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-print.png"))); // NOI18N        butStampa.setText("Stampa");        butStampa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butStampa.setMargin(new java.awt.Insets(2, 2, 2, 2));        butStampa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butStampa.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butStampaActionPerformed(evt);            }        });        jToolBar1.add(butStampa);        butImportExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-jump.png"))); // NOI18N        butImportExcel.setText("Import da Excel");        butImportExcel.setFocusable(false);        butImportExcel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butImportExcel.setMargin(new java.awt.Insets(2, 2, 2, 2));        butImportExcel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        butImportExcel.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butImportExcelActionPerformed(evt);            }        });        jToolBar1.add(butImportExcel);        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridy = 1;        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;        gridBagConstraints.weightx = 1.0;        panAlto.add(jToolBar1, gridBagConstraints);        jToolBar2.setFloatable(false);        comFiltro1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Visualizza Tutti", "Visualizza Clienti e Fornitori", "Visualizza Clienti", "Visualizza Fornitori", "Visualizza Provvisori" }));        comFiltro1.setMaximumSize(new java.awt.Dimension(400, 40));        comFiltro1.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                comFiltro1ActionPerformed(evt);            }        });        jToolBar2.add(comFiltro1);        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridy = 2;        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;        gridBagConstraints.weightx = 1.0;        panAlto.add(jToolBar2, gridBagConstraints);        jToolBar3.setFloatable(false);        jToolBar3.setRollover(true);        jLabel3.setText(" Cerca ");        jToolBar3.add(jLabel3);        texSearch.setColumns(20);        texSearch.setMaximumSize(new java.awt.Dimension(200, 20));        texSearch.setMinimumSize(new java.awt.Dimension(100, 20));        texSearch.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                texSearchKeyPressed(evt);            }            public void keyReleased(java.awt.event.KeyEvent evt) {                texSearchKeyReleased(evt);            }        });        jToolBar3.add(texSearch);        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-find.png"))); // NOI18N        jButton3.setText("Mostra Tutti");        jButton3.setBorderPainted(false);        jButton3.setFocusable(false);        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        jButton3.setMaximumSize(new java.awt.Dimension(110, 20));        jButton3.setPreferredSize(new java.awt.Dimension(110, 20));        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        jButton3.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                jButton3ActionPerformed(evt);            }        });        jToolBar3.add(jButton3);        jToolBar3.add(jSeparator2);        addFatt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-add.png"))); // NOI18N        addFatt.setText("Aggiungi Fattura");        addFatt.setToolTipText("di Vendita");        addFatt.setBorderPainted(false);        addFatt.setFocusable(false);        addFatt.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        addFatt.setMaximumSize(new java.awt.Dimension(130, 20));        addFatt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        addFatt.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                addFattActionPerformed(evt);            }        });        jToolBar3.add(addFatt);        addOrd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-add.png"))); // NOI18N        addOrd.setText("Aggiungi Ordine");        addOrd.setToolTipText("di Vendita");        addOrd.setBorderPainted(false);        addOrd.setFocusable(false);        addOrd.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        addOrd.setMaximumSize(new java.awt.Dimension(130, 20));        addOrd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        addOrd.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                addOrdActionPerformed(evt);            }        });        jToolBar3.add(addOrd);        addDdt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-add.png"))); // NOI18N        addDdt.setText("Aggiungi DDT");        addDdt.setToolTipText("di Vendita");        addDdt.setBorderPainted(false);        addDdt.setFocusable(false);        addDdt.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);        addDdt.setMaximumSize(new java.awt.Dimension(110, 20));        addDdt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);        addDdt.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                addDdtActionPerformed(evt);            }        });        jToolBar3.add(addDdt);        gridBagConstraints = new java.awt.GridBagConstraints();        gridBagConstraints.gridy = 3;        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;        gridBagConstraints.weightx = 1.0;        panAlto.add(jToolBar3, gridBagConstraints);        getContentPane().add(panAlto, java.awt.BorderLayout.NORTH);        tabCent.setName("dati"); // NOI18N        tabCent.addChangeListener(new javax.swing.event.ChangeListener() {            public void stateChanged(javax.swing.event.ChangeEvent evt) {                tabCentStateChanged(evt);            }        });        panDati.setName("dati"); // NOI18N        panDati.setLayout(new java.awt.BorderLayout());        jPanel4.setLayout(new java.awt.BorderLayout());        jPanel6.setLayout(new java.awt.BorderLayout());        datiAnagrafici.setBorder(javax.swing.BorderFactory.createTitledBorder("Anagrafica"));        jLabel2211.setFont(jLabel2211.getFont().deriveFont(jLabel2211.getFont().getStyle() | java.awt.Font.BOLD, jLabel2211.getFont().getSize()+1));        jLabel2211.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel2211.setText("Ragione sociale");        texRagiSoci.setDbDescCampo("Ragione Sociale");        texRagiSoci.setDbNomeCampo("ragione_sociale");        texRagiSoci.setFont(texRagiSoci.getFont().deriveFont(texRagiSoci.getFont().getStyle() | java.awt.Font.BOLD, texRagiSoci.getFont().getSize()+1));        jLabel2111.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel2111.setText("Codice");        texCodi.setColumns(10);        texCodi.setDbDescCampo("Codice");        texCodi.setDbNomeCampo("codice");        chkObsoleto.setText("Obsoleto ?");        chkObsoleto.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);        chkObsoleto.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                chkObsoletoActionPerformed(evt);            }        });        jLabel226.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel226.setText("Tipo");        comTipo.setDbDescCampo("Tipo");        comTipo.setDbNomeCampo("tipo");        comTipo.addItemListener(new java.awt.event.ItemListener() {            public void itemStateChanged(java.awt.event.ItemEvent evt) {                comTipoItemStateChanged(evt);            }        });        jLabel227.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel227.setText("Categoria");        jLabel227.setToolTipText("Categoria");        comTipo2.setDbDescCampo("Categoria");        comTipo2.setDbNomeCampo("tipo2");        comTipo2.setDbTrovaMentreScrive(true);        textObsoleto.setBackground(new java.awt.Color(255, 204, 204));        textObsoleto.setDbNomeCampo("obsoleto");        texCodiList.setBackground(new java.awt.Color(255, 204, 204));        texCodiList.setDbComboAbbinata(comList);        texCodiList.setDbNomeCampo("codice_listino");        org.jdesktop.layout.GroupLayout datiAnagraficiLayout = new org.jdesktop.layout.GroupLayout(datiAnagrafici);        datiAnagrafici.setLayout(datiAnagraficiLayout);        datiAnagraficiLayout.setHorizontalGroup(            datiAnagraficiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(datiAnagraficiLayout.createSequentialGroup()                .addContainerGap()                .add(datiAnagraficiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(datiAnagraficiLayout.createSequentialGroup()                        .add(jLabel2211)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texRagiSoci, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                    .add(datiAnagraficiLayout.createSequentialGroup()                        .add(jLabel2111)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texCodi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(18, 18, 18)                        .add(jLabel226)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(comTipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(18, 18, 18)                        .add(jLabel227)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(comTipo2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(textObsoleto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texCodiList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 177, Short.MAX_VALUE)                        .add(chkObsoleto)))                .addContainerGap())        );        datiAnagraficiLayout.setVerticalGroup(            datiAnagraficiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(org.jdesktop.layout.GroupLayout.TRAILING, datiAnagraficiLayout.createSequentialGroup()                .add(datiAnagraficiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(datiAnagraficiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                        .add(jLabel2111)                        .add(texCodi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(jLabel226)                        .add(comTipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(jLabel227)                        .add(comTipo2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(textObsoleto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(texCodiList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                    .add(chkObsoleto))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(datiAnagraficiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel2211)                    .add(texRagiSoci, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .add(2, 2, 2))        );        jPanel6.add(datiAnagrafici, java.awt.BorderLayout.CENTER);        jPanel4.add(jPanel6, java.awt.BorderLayout.NORTH);        jPanel5.setLayout(new java.awt.BorderLayout());        panel_toggles.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 2));        toggle_indirizzo.setText("Indirizzo");        toggle_indirizzo.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                toggle_indirizzoActionPerformed(evt);            }        });        panel_toggles.add(toggle_indirizzo);        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);        jSeparator5.setPreferredSize(new java.awt.Dimension(4, 20));        panel_toggles.add(jSeparator5);        toggle_contatti.setText("Contatti");        toggle_contatti.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                toggle_contattiActionPerformed(evt);            }        });        panel_toggles.add(toggle_contatti);        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);        jSeparator3.setPreferredSize(new java.awt.Dimension(4, 20));        panel_toggles.add(jSeparator3);        toggle_contabili.setText("Contabili");        toggle_contabili.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                toggle_contabiliActionPerformed(evt);            }        });        panel_toggles.add(toggle_contabili);        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);        jSeparator4.setPreferredSize(new java.awt.Dimension(4, 20));        panel_toggles.add(jSeparator4);        toggle_note_opzioni.setText("Note e Opzioni");        toggle_note_opzioni.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                toggle_note_opzioniActionPerformed(evt);            }        });        panel_toggles.add(toggle_note_opzioni);        jPanel5.add(panel_toggles, java.awt.BorderLayout.CENTER);        jPanel5.add(jSeparator1, java.awt.BorderLayout.SOUTH);        jPanel4.add(jPanel5, java.awt.BorderLayout.CENTER);        panDati.add(jPanel4, java.awt.BorderLayout.NORTH);        scroll_dati.setBorder(null);        dati.setName("dati"); // NOI18N        dati_indirizzo.setBorder(javax.swing.BorderFactory.createTitledBorder("Indirizzo"));        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel25.setText("Via / Piazza / LocalitÃ ");        texIndi.setDbDescCampo("Indirizzo");        texIndi.setDbNomeCampo("indirizzo");        jLabel212.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel212.setText("CAP");        texCap.setColumns(7);        texCap.setDbDescCampo("CAP");        texCap.setDbNomeCampo("cap");        texCap.setDbTipoCampo("");        jLabel222.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel222.setText("Comune");        texLoca.setDbDescCampo("LocalitÃ ");        texLoca.setDbNomeCampo("localita");        jLabel232.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel232.setText("Provincia");        texProv.setColumns(3);        texProv.setDbDescCampo("Provincia");        texProv.setDbNomeCampo("provincia");        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel23.setText("Paese");        comPaese.setDbNomeCampo("paese");        comPaese.setDbTipoCampo("");        comPaese.setDbTrovaMentreScrive(true);        butDest.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N        butDest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/emblems/emblem-system.png"))); // NOI18N        butDest.setText("Gestione altre destinazioni");        butDest.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butDestActionPerformed(evt);            }        });        org.jdesktop.layout.GroupLayout dati_indirizzoLayout = new org.jdesktop.layout.GroupLayout(dati_indirizzo);        dati_indirizzo.setLayout(dati_indirizzoLayout);        dati_indirizzoLayout.setHorizontalGroup(            dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dati_indirizzoLayout.createSequentialGroup()                .addContainerGap()                .add(dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_indirizzoLayout.createSequentialGroup()                        .add(jLabel23)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(comPaese, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                        .add(butDest)                        .addContainerGap())                    .add(dati_indirizzoLayout.createSequentialGroup()                        .add(jLabel222)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texLoca, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                        .add(18, 18, 18)                        .add(jLabel232)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texProv, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .addContainerGap())                    .add(dati_indirizzoLayout.createSequentialGroup()                        .add(dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(dati_indirizzoLayout.createSequentialGroup()                                .add(jLabel212)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texCap, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(0, 0, Short.MAX_VALUE))                            .add(dati_indirizzoLayout.createSequentialGroup()                                .add(jLabel25)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texIndi, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))                        .add(10, 10, 10))))        );        dati_indirizzoLayout.linkSize(new java.awt.Component[] {jLabel212, jLabel222, jLabel23, jLabel25}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dati_indirizzoLayout.setVerticalGroup(            dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dati_indirizzoLayout.createSequentialGroup()                .add(2, 2, 2)                .add(dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel25)                    .add(texIndi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(texCap, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel212))                .add(6, 6, 6)                .add(dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel222)                    .add(texLoca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel232)                    .add(texProv, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_indirizzoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel23)                    .add(comPaese, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(butDest))                .add(2, 2, 2))        );        dati_contatti.setBorder(javax.swing.BorderFactory.createTitledBorder("Contatti"));        dati_contatti.setMaximumSize(new java.awt.Dimension(1000, 1000));        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel21.setText("Fax");        texFax.setColumns(20);        texFax.setDbNomeCampo("fax");        jLabel231.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel231.setText("Telefono");        texTele.setColumns(20);        texTele.setDbNomeCampo("telefono");        jLabel234.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel234.setText("Cellulare");        texCell.setColumns(20);        texCell.setDbNomeCampo("cellulare");        jLabel211.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel211.setText("Persona di riferimento");        texPersRife.setColumns(30);        texPersRife.setDbDescCampo("Persona di riferimento");        texPersRife.setDbNomeCampo("persona_riferimento");        texPersRife.setmaxChars(30);        jLabel221.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel221.setText("Telefono");        texTeleRife.setColumns(20);        texTeleRife.setDbNomeCampo("telefono_riferimento");        jLabel223.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel223.setText("Email");        texEmai.setColumns(30);        texEmai.setDbDescCampo("Email");        texEmai.setDbNomeCampo("email");        jLabel233.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel233.setText("Sito Web");        texWeb.setColumns(30);        texWeb.setDbDescCampo("Sito Web");        texWeb.setDbNomeCampo("web");        org.jdesktop.layout.GroupLayout dati_contattiLayout = new org.jdesktop.layout.GroupLayout(dati_contatti);        dati_contatti.setLayout(dati_contattiLayout);        dati_contattiLayout.setHorizontalGroup(            dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dati_contattiLayout.createSequentialGroup()                .addContainerGap()                .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_contattiLayout.createSequentialGroup()                        .add(jLabel223)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texEmai, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                    .add(dati_contattiLayout.createSequentialGroup()                        .add(jLabel233)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texWeb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                    .add(dati_contattiLayout.createSequentialGroup()                        .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)                            .add(org.jdesktop.layout.GroupLayout.LEADING, dati_contattiLayout.createSequentialGroup()                                .add(jLabel231)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texTele, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                            .add(org.jdesktop.layout.GroupLayout.LEADING, dati_contattiLayout.createSequentialGroup()                                .add(jLabel21)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texFax, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                            .add(dati_contattiLayout.createSequentialGroup()                                .add(jLabel234)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texCell, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                            .add(org.jdesktop.layout.GroupLayout.LEADING, dati_contattiLayout.createSequentialGroup()                                .add(jLabel211)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texPersRife, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(jLabel221)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(texTeleRife, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))        );        dati_contattiLayout.linkSize(new java.awt.Component[] {jLabel21, jLabel211, jLabel223, jLabel231, jLabel233, jLabel234}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dati_contattiLayout.setVerticalGroup(            dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(org.jdesktop.layout.GroupLayout.TRAILING, dati_contattiLayout.createSequentialGroup()                .add(2, 2, 2)                .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(texTele, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel231))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel21)                    .add(texFax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel234)                    .add(texCell, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel211)                    .add(texPersRife, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel221)                    .add(texTeleRife, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel223)                    .add(texEmai, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contattiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel233)                    .add(texWeb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .add(2, 2, 2))        );        dati_contabili.setBorder(javax.swing.BorderFactory.createTitledBorder("Contabili"));        dati_contabili.setMaximumSize(new java.awt.Dimension(1000, 1000));        jLabel224.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel224.setText("Pagamento predefinito");        comPaga.setDbNomeCampo("pagamento");        comPaga.addItemListener(new java.awt.event.ItemListener() {            public void itemStateChanged(java.awt.event.ItemEvent evt) {                comPagaItemStateChanged(evt);            }        });        texGiornoPagamento.setColumns(4);        texGiornoPagamento.setDbNomeCampo("giorno_pagamento");        texGiornoPagamento.setDbTipoCampo("numerico");        jLabel213.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel213.setText("ABI");        butBanca.setText("...");        butBanca.setToolTipText("Seleziona dalla lista delle banche/filiali");        butBanca.setMargin(new java.awt.Insets(2, 4, 2, 4));        butBanca.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butBancaActionPerformed(evt);            }        });        jLabel215.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel215.setText("CAB");        texBancAbi.setColumns(6);        texBancAbi.setDbNomeCampo("banca_abi");        texBancAbi.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texBancAbiFocusLost(evt);            }        });        texBancCab.setColumns(6);        texBancCab.setDbNomeCampo("banca_cab");        texBancCab.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texBancCabFocusLost(evt);            }        });        labBancCab.setFont(labBancCab.getFont());        labBancCab.setForeground(new java.awt.Color(109, 109, 109));        labBancCab.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);        labBancCab.setText("..");        labBancAbi.setFont(labBancAbi.getFont());        labBancAbi.setForeground(new java.awt.Color(109, 109, 109));        labBancAbi.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);        labBancAbi.setText("..");        texBancCc.setColumns(20);        texBancCc.setDbNomeCampo("banca_cc");        jLabel216.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel216.setText("Numero Conto");        jLabel218.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel218.setText("IBAN");        texBancCc2.setColumns(30);        texBancCc2.setDbNomeCampo("banca_cc_iban");        texBancCc2.setmaxChars(27);        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel7.setText("IVA Standard");        comIvaStandard.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));        comIvaStandard.setDbNomeCampo("iva_standard");        comIvaStandard.setDbTipoCampo("CHAR");        comIvaStandard.setDbTrovaMentreScrive(true);        labGiornoPagamento.setFont(labGiornoPagamento.getFont().deriveFont(labGiornoPagamento.getFont().getSize()-1f));        labGiornoPagamento.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        labGiornoPagamento.setText("giorno");        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel2.setText("Partita IVA");        texPiva.setColumns(20);        texPiva.setDbDescCampo("Partita IVA");        texPiva.setDbNomeCampo("piva_cfiscale");        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel26.setText("Codice Fiscale");        texCodiFisc.setColumns(20);        texCodiFisc.setDbDescCampo("Codice Fiscale");        texCodiFisc.setDbNomeCampo("cfiscale");        jLabel219.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel219.setText("di testata");        texScon1.setColumns(6);        texScon1.setText("sconto1");        texScon1.setToolTipText("primo sconto");        texScon1.setDbDefault("vuoto");        texScon1.setDbDescCampo("");        texScon1.setDbNomeCampo("sconto1t");        texScon1.setDbNullSeVuoto(true);        texScon1.setDbTipoCampo("numerico");        texScon2.setColumns(6);        texScon2.setText("sconto2");        texScon2.setToolTipText("secondo sconto");        texScon2.setDbDefault("vuoto");        texScon2.setDbDescCampo("");        texScon2.setDbNomeCampo("sconto2t");        texScon2.setDbNullSeVuoto(true);        texScon2.setDbTipoCampo("numerico");        texScon3.setColumns(6);        texScon3.setText("sconto3");        texScon3.setToolTipText("terzo sconto");        texScon3.setDbDefault("vuoto");        texScon3.setDbDescCampo("");        texScon3.setDbNomeCampo("sconto3t");        texScon3.setDbNullSeVuoto(true);        texScon3.setDbTipoCampo("numerico");        jLabel217.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel217.setText("di riga");        texScon4.setColumns(6);        texScon4.setText("sconto1");        texScon4.setToolTipText("primo sconto");        texScon4.setDbDefault("vuoto");        texScon4.setDbDescCampo("");        texScon4.setDbNomeCampo("sconto1r");        texScon4.setDbNullSeVuoto(true);        texScon4.setDbTipoCampo("numerico");        texScon5.setColumns(6);        texScon5.setText("sconto2");        texScon5.setToolTipText("secondo sconto");        texScon5.setDbDefault("vuoto");        texScon5.setDbDescCampo("");        texScon5.setDbModificato(true);        texScon5.setDbNomeCampo("sconto2r");        texScon5.setDbNullSeVuoto(true);        texScon5.setDbTipoCampo("numerico");        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel22.setText("Listino prezzi");        comList.setDbDescCampo("Listino assegnato");        comList.setDbNomeCampo("codice_listino");        comList.setDbRiempire(false);        comList.setDbSalvare(false);        comList.setDbTextAbbinato(texCodiList);        comList.setDbTipoCampo("VARCHAR");        comList.setDbTrovaMentreScrive(true);        comList.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                comListActionPerformed(evt);            }        });        updateListini.setText("Aggiorna prezzi listini");        updateListini.setToolTipText("Seleziona se vuoi che il listino clienti venga aggiornato all'inserimento dei prezzi");        updateListini.setDbDescCampo("Aggiorna listino prezzi");        updateListini.setDbNomeCampo("flag_update_listino");        updateListini.setDbTipoCampo("");        updateListini.setFont(updateListini.getFont().deriveFont(updateListini.getFont().getSize()-1f));        updateListini.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);        updateListini.setIconTextGap(2);        updateListini.setMaximumSize(new java.awt.Dimension(230, 25));        updateListini.setVerticalAlignment(javax.swing.SwingConstants.TOP);        updateListini.setVerticalTextPosition(javax.swing.SwingConstants.TOP);        jLabel225.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel225.setText("Agente predefinito");        comAgente.setDbDescCampo("");        comAgente.setDbNomeCampo("agente");        comAgente.setDbTipoCampo("numerico");        comAgente.setDbTrovaMentreScrive(true);        jLabel228.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel228.setText("Coordinate bancarie predefinite");        jLabel229.setFont(jLabel229.getFont());        jLabel229.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel229.setText("Sconti predefiniti");        jLabel8.setText("Provvigione predefinita");        jLabel8.setToolTipText("<html>\nLa provvigiona inserita verrÃ  proposta appena selezionato il Cliente nella creazione di un nuovo documento<br>\n(questa ha prioritÃ  rispetto alla provvigione specificata nell'Agente)\n</html>");        jLabel9.setText("%");        jLabel10.setText("Provvigione predefinita per articoli da questo fornitore");        jLabel10.setToolTipText("<html>\nLa provvigione inserita verrÃ  proposta in inserimento articoli se l'articolo viene abitualmente acquistato da questo fornitore, vedi in anagrafica Articolo.<br>\n(questa provvigione ha prioritÃ  rispetto alla provvigione specificata nell'Agente e/o sul Cliente)\n</html>");        jLabel11.setText("%");        provPred.setColumns(5);        provPred.setDbNomeCampo("provvigione_predefinita_cliente");        provPred.setDbNullSeVuoto(true);        provPred.setDbTipoCampo("numerico");        provPred.setmaxChars(5);        provPredForn.setColumns(5);        provPredForn.setDbNomeCampo("provvigione_predefinita_fornitore");        provPredForn.setDbNullSeVuoto(true);        provPredForn.setDbTipoCampo("numerico");        provPredForn.setmaxChars(5);        segna_posto_contabili_pre.setToolTipText("");        segna_posto_contabili_post.setPreferredSize(new java.awt.Dimension(10, 2));        segna_posto_contabili_provvigioni1.setText(" ");        org.jdesktop.layout.GroupLayout dati_contabiliLayout = new org.jdesktop.layout.GroupLayout(dati_contabili);        dati_contabili.setLayout(dati_contabiliLayout);        dati_contabiliLayout.setHorizontalGroup(            dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dati_contabiliLayout.createSequentialGroup()                .addContainerGap()                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_contabiliLayout.createSequentialGroup()                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel2)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texPiva, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(18, 18, 18)                                .add(jLabel26)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texCodiFisc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel224)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(comPaga, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(18, 18, 18)                                .add(labGiornoPagamento)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texGiornoPagamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel228)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(butBanca))                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel22)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(comList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(19, 19, 19)                                .add(updateListini, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel7)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(comIvaStandard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(10, 10, 10)                                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                                    .add(dati_contabiliLayout.createSequentialGroup()                                        .add(jLabel213)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texBancAbi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(labBancAbi))                                    .add(dati_contabiliLayout.createSequentialGroup()                                        .add(jLabel215)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texBancCab, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(labBancCab))                                    .add(dati_contabiliLayout.createSequentialGroup()                                        .add(jLabel216)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texBancCc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                    .add(dati_contabiliLayout.createSequentialGroup()                                        .add(jLabel218)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texBancCc2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))                        .addContainerGap(48, Short.MAX_VALUE))                    .add(dati_contabiliLayout.createSequentialGroup()                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel229)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                                    .add(dati_contabiliLayout.createSequentialGroup()                                        .add(jLabel217)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texScon4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texScon5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                                    .add(dati_contabiliLayout.createSequentialGroup()                                        .add(jLabel219)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texScon1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texScon2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                        .add(texScon3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel225)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(comAgente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(18, 18, 18)                                .add(jLabel8)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(provPred, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(jLabel9))                            .add(segna_posto_contabili_pre)                            .add(segna_posto_contabili_post, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(dati_contabiliLayout.createSequentialGroup()                                .add(jLabel10)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(provPredForn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(jLabel11)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(segna_posto_contabili_provvigioni1)))                        .add(0, 0, Short.MAX_VALUE))))        );        dati_contabiliLayout.linkSize(new java.awt.Component[] {jLabel213, jLabel215, jLabel216, jLabel218}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dati_contabiliLayout.linkSize(new java.awt.Component[] {jLabel2, jLabel22, jLabel224}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dati_contabiliLayout.linkSize(new java.awt.Component[] {jLabel217, jLabel219}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dati_contabiliLayout.setVerticalGroup(            dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dati_contabiliLayout.createSequentialGroup()                .add(segna_posto_contabili_pre)                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel2)                    .add(texPiva, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel26)                    .add(texCodiFisc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_contabiliLayout.createSequentialGroup()                        .add(2, 2, 2)                        .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel22)                            .add(comList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                    .add(updateListini, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel224)                    .add(comPaga, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(labGiornoPagamento)                    .add(texGiornoPagamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .add(8, 8, 8)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel228)                    .add(butBanca))                .add(2, 2, 2)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel213)                    .add(texBancAbi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(labBancAbi))                .add(2, 2, 2)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel215)                    .add(texBancCab, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(labBancCab))                .add(2, 2, 2)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(texBancCc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel216))                .add(2, 2, 2)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel218)                    .add(texBancCc2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel7)                    .add(comIvaStandard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)                    .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                        .add(jLabel229)                        .add(jLabel219)                        .add(texScon1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                    .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                        .add(texScon3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                        .add(texScon2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel217)                    .add(texScon4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(texScon5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel225)                    .add(comAgente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(jLabel8)                    .add(jLabel9)                    .add(provPred, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contabiliLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel10)                    .add(jLabel11)                    .add(provPredForn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(segna_posto_contabili_provvigioni1))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED, 13, Short.MAX_VALUE)                .add(segna_posto_contabili_post, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))        );        dati_note_opzioni.setBorder(javax.swing.BorderFactory.createTitledBorder("Note e Opzioni"));        dati_note_opzioni.setMaximumSize(new java.awt.Dimension(1000, 1000));        dati_note_opzioni.setName("dati_note_opzioni"); // NOI18N        jLabel241.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel241.setText("Note");        tnxCheckBox2.setText("Note in automatico su nuova Fattura");        tnxCheckBox2.setDbNomeCampo("note_automatiche");        raggruppa1.setText("Raggruppa DDT ");        raggruppa1.setToolTipText("In questo modo quando si converte piÃ¹ DDT in fattura verranno raggruppati secondo il codice articolo e sommate le quantita");        raggruppa1.setDbDescCampo("Raggruppa DDT");        raggruppa1.setDbNomeCampo("opzione_raggruppa_ddt");        raggruppa1.setDbTipoCampo("");        raggruppa1.setMaximumSize(new java.awt.Dimension(230, 25));        raggruppa2.setText("Stampa prezzi in DDT");        raggruppa2.setToolTipText("Seleziona se stampare o meno i prezzi nei DDT");        raggruppa2.setDbDescCampo("Stampa prezzi in DDT");        raggruppa2.setDbNomeCampo("opzione_prezzi_ddt");        raggruppa2.setDbTipoCampo("");        raggruppa2.setMaximumSize(new java.awt.Dimension(230, 25));        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel4.setText("Logo");        texLogo.setDbNomeCampo("logo");        butLogo.setText("...");        butLogo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);        butLogo.setMargin(new java.awt.Insets(2, 4, 2, 4));        butLogo.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butLogoActionPerformed(evt);            }        });        tnxCheckBox1.setText("Stampa Destinazione diversa su Distinta Riba");        tnxCheckBox1.setToolTipText("Selezionando questa opzione stampa la Destinazione diversa nella Distinta delle RIBA");        tnxCheckBox1.setDbDescCampo("Opzione Dest. Diversa Riba");        tnxCheckBox1.setDbNomeCampo("opzione_riba_dest_diversa");        tnxCheckBox1.setDbTipoCampo("");        tnxCheckBox1.setMaximumSize(new java.awt.Dimension(230, 25));        note.setDbNomeCampo("note");        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel12.setText("modalitÃ  di consegna");        comConsegna.setDbDescCampo("ModalitÃ  di consegna");        comConsegna.setDbNomeCampo("modalita_consegna");        comConsegna.setDbTipoCampo("");        comConsegna.setDbTrovaMentreScrive(true);        comConsegna.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                comConsegnaActionPerformed(evt);            }        });        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        jLabel16.setText("modalitÃ  di scarico");        comScarico.setDbDescCampo("ModalitÃ  di scarico");        comScarico.setDbNomeCampo("modalita_scarico");        comScarico.setDbTipoCampo("");        comScarico.setDbTrovaMentreScrive(true);        comScarico.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                comScaricoActionPerformed(evt);            }        });        org.jdesktop.layout.GroupLayout dbpanel_consegna_e_scaricoLayout = new org.jdesktop.layout.GroupLayout(dbpanel_consegna_e_scarico);        dbpanel_consegna_e_scarico.setLayout(dbpanel_consegna_e_scaricoLayout);        dbpanel_consegna_e_scaricoLayout.setHorizontalGroup(            dbpanel_consegna_e_scaricoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dbpanel_consegna_e_scaricoLayout.createSequentialGroup()                .add(dbpanel_consegna_e_scaricoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dbpanel_consegna_e_scaricoLayout.createSequentialGroup()                        .add(jLabel12)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(comConsegna, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                    .add(dbpanel_consegna_e_scaricoLayout.createSequentialGroup()                        .add(jLabel16)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(comScarico, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))                .add(0, 0, Short.MAX_VALUE))        );        dbpanel_consegna_e_scaricoLayout.linkSize(new java.awt.Component[] {jLabel12, jLabel16}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dbpanel_consegna_e_scaricoLayout.setVerticalGroup(            dbpanel_consegna_e_scaricoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dbpanel_consegna_e_scaricoLayout.createSequentialGroup()                .add(dbpanel_consegna_e_scaricoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel12)                    .add(comConsegna, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dbpanel_consegna_e_scaricoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel16)                    .add(comScarico, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .add(0, 0, Short.MAX_VALUE))        );        org.jdesktop.layout.GroupLayout dati_note_opzioniLayout = new org.jdesktop.layout.GroupLayout(dati_note_opzioni);        dati_note_opzioni.setLayout(dati_note_opzioniLayout);        dati_note_opzioniLayout.setHorizontalGroup(            dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(dati_note_opzioniLayout.createSequentialGroup()                .addContainerGap()                .add(dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_note_opzioniLayout.createSequentialGroup()                        .add(jLabel241)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(note, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                    .add(raggruppa2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(tnxCheckBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(raggruppa1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                    .add(dati_note_opzioniLayout.createSequentialGroup()                        .add(dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                            .add(dati_note_opzioniLayout.createSequentialGroup()                                .add(jLabel4)                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                                .add(texLogo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 225, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                                .add(0, 0, 0)                                .add(butLogo))                            .add(tnxCheckBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                        .add(dbpanel_consegna_e_scarico, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))        );        dati_note_opzioniLayout.linkSize(new java.awt.Component[] {jLabel241, jLabel4}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        dati_note_opzioniLayout.setVerticalGroup(            dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(org.jdesktop.layout.GroupLayout.TRAILING, dati_note_opzioniLayout.createSequentialGroup()                .add(2, 2, 2)                .add(dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(jLabel241)                    .add(note, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_note_opzioniLayout.createSequentialGroup()                        .add(dati_note_opzioniLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                            .add(jLabel4)                            .add(texLogo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                            .add(butLogo))                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)                        .add(tnxCheckBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                    .add(dbpanel_consegna_e_scarico, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(tnxCheckBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(raggruppa1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(raggruppa2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))        );        dati_note_opzioniLayout.linkSize(new java.awt.Component[] {butLogo, texLogo}, org.jdesktop.layout.GroupLayout.VERTICAL);        org.jdesktop.layout.GroupLayout datiLayout = new org.jdesktop.layout.GroupLayout(dati);        dati.setLayout(datiLayout);        datiLayout.setHorizontalGroup(            datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(datiLayout.createSequentialGroup()                .add(0, 0, 0)                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(dati_note_opzioni, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                    .add(dati_indirizzo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                    .add(dati_contatti, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                    .add(dati_contabili, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))                .addContainerGap())        );        datiLayout.setVerticalGroup(            datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(datiLayout.createSequentialGroup()                .add(0, 0, 0)                .add(dati_indirizzo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .add(0, 0, 0)                .add(dati_contatti, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(dati_contabili, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .add(0, 0, 0)                .add(dati_note_opzioni, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .addContainerGap(80, Short.MAX_VALUE))        );        scroll_dati.setViewportView(dati);        panDati.add(scroll_dati, java.awt.BorderLayout.CENTER);        tabCent.addTab("dati", panDati);        panElen.setName("elenco"); // NOI18N        panElen.setLayout(new java.awt.BorderLayout());        jScrollPane1.setViewportView(griglia);        panElen.add(jScrollPane1, java.awt.BorderLayout.CENTER);        tabCent.addTab("elenco", panElen);        panPrezzi.setToolTipText("");        panPrezzi.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusGained(java.awt.event.FocusEvent evt) {                panPrezziFocusGained(evt);            }        });        panPrezzi.setLayout(new java.awt.BorderLayout());        tabPrezziCliente.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N        tabPrezziCliente.setModel(new javax.swing.table.DefaultTableModel(            new Object [][] {            },            new String [] {                "Codice Articolo", "Descrizione", "Prezzo Base", "Prezzo Cliente"            }        ) {            Class[] types = new Class [] {                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class            };            boolean[] canEdit = new boolean [] {                false, false, false, true            };            public Class getColumnClass(int columnIndex) {                return types [columnIndex];            }            public boolean isCellEditable(int rowIndex, int columnIndex) {                return canEdit [columnIndex];            }        });        jScrollPane3.setViewportView(tabPrezziCliente);        panPrezzi.add(jScrollPane3, java.awt.BorderLayout.CENTER);        labIntePrezzi.setText("...");        jPanel3.add(labIntePrezzi);        panPrezzi.add(jPanel3, java.awt.BorderLayout.NORTH);        tabCent.addTab("Prezzi Articoli", panPrezzi);        jLabel5.setText("Note:");        griglia_rapporti.setModel(new javax.swing.table.DefaultTableModel(            new Object [][] {                {null, null, null, null},                {null, null, null, null},                {null, null, null, null},                {null, null, null, null}            },            new String [] {                "Title 1", "Title 2", "Title 3", "Title 4"            }        ));        griglia_rapporti.setComponentPopupMenu(jPopupMenu1);        griglia_rapporti.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseClicked(java.awt.event.MouseEvent evt) {                griglia_rapportiMouseClicked(evt);            }        });        jScrollPane4.setViewportView(griglia_rapporti);        jLabel6.setText("Rapporti:");        btnDelRigt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-remove.png"))); // NOI18N        btnDelRigt.setText("Elimina");        btnDelRigt.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btnDelRigtActionPerformed(evt);            }        });        btnAddRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/list-add.png"))); // NOI18N        btnAddRow.setText("Inserisci");        btnAddRow.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btnAddRowActionPerformed(evt);            }        });        butModiRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/apps/accessories-text-editor.png"))); // NOI18N        butModiRow.setText("Modifica");        butModiRow.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butModiRowActionPerformed(evt);            }        });        texTesto.setColumns(20);        texTesto.setRows(5);        texTesto.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyReleased(java.awt.event.KeyEvent evt) {                texTestoKeyReleased(evt);            }        });        texAreaNoteCliente.setViewportView(texTesto);        texNotaCliente.setDbNomeCampo("nota_cliente");        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);        jPanel1.setLayout(jPanel1Layout);        jPanel1Layout.setHorizontalGroup(            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()                .addContainerGap()                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()                        .add(jLabel6)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                        .add(butModiRow)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(btnAddRow)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                        .add(btnDelRigt))                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()                        .add(jLabel5)                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)                        .add(texNotaCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                    .add(org.jdesktop.layout.GroupLayout.LEADING, texAreaNoteCliente)                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))                .add(445, 445, 445))        );        jPanel1Layout.linkSize(new java.awt.Component[] {btnAddRow, btnDelRigt, butModiRow}, org.jdesktop.layout.GroupLayout.HORIZONTAL);        jPanel1Layout.setVerticalGroup(            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)            .add(jPanel1Layout.createSequentialGroup()                .addContainerGap()                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                    .add(jLabel5)                    .add(texNotaCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(texAreaNoteCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 157, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)                    .add(jLabel6)                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)                        .add(btnDelRigt)                        .add(btnAddRow)                        .add(butModiRow)))                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 894, Short.MAX_VALUE)                .addContainerGap())        );        tabCent.addTab("Note & Rapporti", jPanel1);        getContentPane().add(tabCent, java.awt.BorderLayout.CENTER);        butUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-undo.png"))); // NOI18N        butUndo.setText("Annulla");        butUndo.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butUndoActionPerformed(evt);            }        });        jPanel2.add(butUndo);        butSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/devices/media-floppy.png"))); // NOI18N        butSave.setText("Salva");        butSave.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butSaveActionPerformed(evt);            }        });        jPanel2.add(butSave);        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);        pack();    }// </editor-fold>//GEN-END:initComponents    private void comFiltro1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comFiltro1ActionPerformed//        String sql = "select codice,ragione_sociale,telefono,fax,email,web, indirizzo, cap, localita, provincia from clie_forn ";        String sql = "select " + getCampiGriglia() + " from clie_forn ";        if (comFiltro1.getSelectedIndex() == 0) {            sql += "where 1 = 1";        } else if (comFiltro1.getSelectedIndex() == 1) {            sql += "where tipo = 'C' or tipo = 'E' or tipo = 'F'";        } else if (comFiltro1.getSelectedIndex() == 2) {            sql += "where tipo = 'C' or tipo = 'E'";        } else if (comFiltro1.getSelectedIndex() == 3) {            sql += "where tipo = 'F' or tipo = 'E'";        } else if (comFiltro1.getSelectedIndex() == 4) {            sql += "where tipo = 'P'";        }        sql += " order by ragione_sociale";        griglia.dbOpen(Db.getConn(), sql);        griglia.dbRefresh();        griglia.dbSelezionaRiga();    }//GEN-LAST:event_comFiltro1ActionPerformed    private void comPagaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comPagaItemStateChanged        texGiornoPagamento.setEnabled(false);        try {            ResultSet r = Db.lookUp(String.valueOf(comPaga.getSelectedKey()), "codice", "pagamenti");            if (r != null) {                if (Db.nz(r.getString("flag_richiedi_giorno"), "N").equalsIgnoreCase("S")) {                    texGiornoPagamento.setEnabled(true);                }            }        } catch (Exception err) {            err.printStackTrace();        }    }//GEN-LAST:event_comPagaItemStateChanged    private void comListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comListActionPerformed    }//GEN-LAST:event_comListActionPerformed    private void tabCentStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabCentStateChanged        if (tabCent.getSelectedIndex() == 2) {            this.showPrezziCliente();        }    }//GEN-LAST:event_tabCentStateChanged    private void panPrezziFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panPrezziFocusGained    }//GEN-LAST:event_panPrezziFocusGained    private void butStampaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStampaActionPerformed        it.tnx.PrintUtilities.printComponent(this.dati);    }//GEN-LAST:event_butStampaActionPerformed    private void butStampaElencoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStampaElencoActionPerformed        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));        int[] headerWidth = {5, 15, 10, 10, 15, 6, 10, 3, 15, 15};        String nomeFilePdf = this.griglia.stampaTabella("Elenco Clienti", headerWidth);        Util.start(nomeFilePdf);        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));    }//GEN-LAST:event_butStampaElencoActionPerformed    private void texBancCabFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texBancCabFocusLost        trovaCab();    }//GEN-LAST:event_texBancCabFocusLost    private void texBancAbiFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texBancAbiFocusLost        trovaAbi();    }//GEN-LAST:event_texBancAbiFocusLost    private void butBancaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBancaActionPerformed        CoordinateBancarie coords = new CoordinateBancarie();        coords.setField_texBancAbi(this.texBancAbi);        coords.setField_labBancAbi(this.labBancAbi);        coords.setField_texBancCab(this.texBancCab);        coords.setField_labBancCab(this.labBancCab);        frmListCoorBanc frm = new frmListCoorBanc(coords);        main.getPadre().openFrame(frm, 700, 500, 150, 50);    }//GEN-LAST:event_butBancaActionPerformed    private void butDestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDestActionPerformed        try {            frmClieDest temp = new frmClieDest(new Integer(this.texCodi.getText()).intValue(), this.texRagiSoci.getText());            main.getPadre().openFrame(temp, 500, 650);        } catch (Exception e) {            SwingUtils.showErrorMessage(main.getPadre(), "Il codice cliente non Ã¨ valido");        }    }//GEN-LAST:event_butDestActionPerformed    private void butLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLastActionPerformed        // Add your handling code here:        this.griglia.dbGoLast();//        setNewStato();    }//GEN-LAST:event_butLastActionPerformed    private void butNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNextActionPerformed        // Add your handling code here:        this.griglia.dbGoNext();//        setNewStato();    }//GEN-LAST:event_butNextActionPerformed    private void butPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrevActionPerformed        // Add your handling code here:        this.griglia.dbGoPrevious();//        setNewStato();    }//GEN-LAST:event_butPrevActionPerformed    private void butFirsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFirsActionPerformed        // Add your handling code here:        this.griglia.dbGoFirst();//        setNewStato();    }//GEN-LAST:event_butFirsActionPerformed    public void updateObsoleto() {        try {            int value = Integer.parseInt(textObsoleto.getText());            if (value == 1) {                chkObsoleto.setSelected(true);            } else {                chkObsoleto.setSelected(false);            }        } catch (Exception e) {        }    }    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing        main.getPadre().closeFrame(this);    }//GEN-LAST:event_formInternalFrameClosing    private void butDeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDeleActionPerformed        if (griglia.getSelectedRowCount() > 1) {            SwingUtils.showErrorMessage(this, "Non Ã¨ possibile eliminare piÃ¹ Clienti alla volta");            return;        }        //prima controllo se c'? ancora qualche fattura collegata        boolean clientePresente = false;        if (texCodi.getText().trim().length() > 0) {            String sql = "select cliente from test_fatt where cliente = " + Db.pc(this.texCodi.getText(), java.sql.Types.INTEGER);            ResultSet r = Db.openResultSet(sql);            try {                if (r.next()) {                    clientePresente = true;                    javax.swing.JOptionPane.showMessageDialog(this, "Il cliente non puo' essere eliminato perche' presente in una o piu' fatture", "Attenzione", javax.swing.JOptionPane.INFORMATION_MESSAGE);                } else {                    sql = "select cliente from test_ddt where cliente = " + Db.pc(this.texCodi.getText(), java.sql.Types.INTEGER);                    r = Db.openResultSet(sql);                    if (r.next()) {                        clientePresente = true;                        javax.swing.JOptionPane.showMessageDialog(this, "Il cliente non puo' essere eliminato perche' presente in uno o piu' ddt", "Attenzione", javax.swing.JOptionPane.INFORMATION_MESSAGE);                    }                }            } catch (Exception err) {                err.printStackTrace();            }        }        if (clientePresente == false) {            int ret = JOptionPane.showConfirmDialog(this, "Sicuro di eliminare ?", "Attenzione", JOptionPane.YES_NO_OPTION);            if (ret == JOptionPane.YES_OPTION) {                String codiceListino = (String) dati.dbGetField("codice_listino");                this.dati.dbDelete();                this.griglia.dbRefresh();                this.griglia.dbSelezionaRiga();                if (main.iniPrezziCliente == true) {                    if (codiceListino.startsWith("C")) {                        //elimino automaticamente il listino abbinato a questo cliente                        String sql = "delete from tipi_listino where codice = " + Db.pc(codiceListino, java.sql.Types.VARCHAR);                        Db.executeSql(sql);                        sql = "delete from articoli_prezzi where listino = " + Db.pc(codiceListino, java.sql.Types.VARCHAR);                        Db.executeSql(sql);                    }                }            }        }    }//GEN-LAST:event_butDeleActionPerformed    private void butFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFindActionPerformed        boolean ret = this.griglia.dbFindNext();        if (ret == false) {            int ret2 = JOptionPane.showConfirmDialog(this, "Posizione non trovata\nVuoi riprovare dall'inizio ?", "Attenzione", JOptionPane.YES_NO_OPTION);            //JOptionPane.showMessageDialog(this,"?-:"+String.valueOf(i));            if (ret2 == JOptionPane.OK_OPTION) {                boolean ret3 = this.griglia.dbFindFirst();            }        }    }//GEN-LAST:event_butFindActionPerformed    private void butUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUndoActionPerformed        dati.dbUndo();    }//GEN-LAST:event_butUndoActionPerformed    private void butSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSaveActionPerformed        File ftest = new File(texLogo.getText());        if (texLogo.getText().length() > 0 && !ftest.exists()) {            SwingUtils.showWarningMessage(this, "Il file del logo non esiste!");        }        if (texLogo.getText().length() > 0 && ftest.length() > 1000000) {            SwingUtils.showWarningMessage(this, "Il file del logo Ã¨ troppo grande, deve essere massimo 1Mb");            return;        }        texLogo.setText(texLogo.getText().replace("\\", "\\\\"));        //controlli vari//        //controlli validitÃ //        if (texPiva.getText().length() != 11 && texPiva.getText().length() > 0) {//            if (!SwingUtils.showYesNoMessage(this, "La lunghezza della Partita IVA non Ã¨ rispettata (deve essere 11 caratteri), continuare ?")) {//                return;//            }//        }//        if ((texCodiFisc.getText().length() != 16 && texCodiFisc.getText().length() != 11) && texCodiFisc.getText().length() > 0) {//            if (!SwingUtils.showYesNoMessage(this, "La lunghezza del Codice Fiscale non Ã¨ rispettata (deve essere 16 o 11 caratteri), continuare ?")) {//                return;//            }//        }        if (!controlla(controlli)) {            return;        }        this.dati.dbSave();        //salvare i prezzi listino        this.griglia.dbRefresh();        if (this.comboToRefresh != null) {            this.comboToRefresh.dbRefreshItems();            this.dispose();        }        main.events.fireInvoicexEvent(new InvoicexEvent(this, InvoicexEvent.TYPE_SAVE));        if (padre != null) {            padre.texClie.setText(texCodi.getText());            padre.recuperaDatiCliente();        }    }//GEN-LAST:event_butSaveActionPerformed    private void butNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNewActionPerformed        this.dati.dbNew();        //azzero prov pred e prov pred forn        provPred.setText("");        provPredForn.setText("");                //azzero banca e filaile        this.labBancAbi.setText("");        this.labBancCab.setText("");        java.sql.Statement stat;        ResultSet resu;        //apre il resultset per ultimo +1        try {            stat = Db.getConn().createStatement();            String sql = "select codice from clie_forn order by codice desc limit 1";            resu = stat.executeQuery(sql);            if (resu.next() == true) {                this.texCodi.setText(String.valueOf(resu.getInt(1) + 1));            } else {                this.texCodi.setText("1");            }        } catch (Exception err) {            javax.swing.JOptionPane.showMessageDialog(null, err.toString());        }        this.comPaese.dbTrovaRiga("ITALY");        //se cc metto usa        if (main.getPersonalContain(main.PERSONAL_CHIANTICASHMERE)) {            this.comPaese.dbTrovaRiga("USA");        }        if (main.iniPrezziCliente == true) {            try {                if (this.texCodi.getText().trim().length() > 0) {                    Cliente c = new Cliente(Integer.parseInt(this.texCodi.getText()));                    String listinoCliente = c.getListinoCliente(true);                    this.comList.dbRefreshItems();                    this.comList.dbTrovaKey(listinoCliente);                    this.texCodiList.setText(listinoCliente);                }            } catch (Exception err) {                err.printStackTrace();            }        }        comTipo.requestFocusInWindow();    }//GEN-LAST:event_butNewActionPerformed    private void texSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texSearchKeyPressed    }//GEN-LAST:event_texSearchKeyPressed    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed        texSearch.setText("");        String sql = "select " + getCampiGriglia() + " from clie_forn";//        java.util.Hashtable colsWidthPerc = new java.util.Hashtable();//        colsWidthPerc.put("codice", new Double(10));//        colsWidthPerc.put("ragione_sociale", new Double(30));//        colsWidthPerc.put("telefono", new Double(13));//        colsWidthPerc.put("email", new Double(10));//        colsWidthPerc.put("indirizzo", new Double(0));//        colsWidthPerc.put("cap", new Double(0));//        colsWidthPerc.put("localita", new Double(0));//        colsWidthPerc.put("provincia", new Double(0));//        colsWidthPerc.put("cod fis", new Double(10));//        colsWidthPerc.put("partita iva", new Double(10));//        griglia.columnsSizePerc = colsWidthPerc;        griglia.dbOpen(Db.getConn(), sql);        griglia.dbPanel = dati;        tabCent.setSelectedIndex(1);        griglia.dbSelezionaRiga();    }//GEN-LAST:event_jButton3ActionPerformed    private void addFattActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFattActionPerformed        String codCliente = String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("codice")));        if (codCliente.equals("")) {            JOptionPane.showMessageDialog(this, "Selezionare un cliente prima di richiedere l'apertura del documento", "Errore", JOptionPane.INFORMATION_MESSAGE);        }        openForm(this.DOC_FATTURA, codCliente);    }//GEN-LAST:event_addFattActionPerformed    private void addOrdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrdActionPerformed        String codCliente = String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("codice")));        if (codCliente.equals("")) {            JOptionPane.showMessageDialog(this, "Selezionare un cliente prima di richiedere l'apertura del documento", "Errore", JOptionPane.INFORMATION_MESSAGE);        }        openForm(this.DOC_ORDINE, codCliente);    }//GEN-LAST:event_addOrdActionPerformed    private void addDdtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDdtActionPerformed        String codCliente = String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("codice")));        if (codCliente.equals("")) {            JOptionPane.showMessageDialog(this, "Selezionare un cliente prima di richiedere l'apertura del documento", "Errore", JOptionPane.INFORMATION_MESSAGE);        }        openForm(this.DOC_DDT, codCliente);    }//GEN-LAST:event_addDdtActionPerformed    private void texSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texSearchKeyReleased        Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR);        String sql = "select " + getCampiGriglia() + " from clie_forn where ragione_sociale like " + Db.pc("%" + texSearch.getText() + "%", Types.VARCHAR);//        java.util.Hashtable colsWidthPerc = new java.util.Hashtable();//        colsWidthPerc.put("codice", new Double(10));//        colsWidthPerc.put("ragione_sociale", new Double(30));//        colsWidthPerc.put("telefono", new Double(13));//        colsWidthPerc.put("email", new Double(10));//        colsWidthPerc.put("indirizzo", new Double(0));//        colsWidthPerc.put("cap", new Double(0));//        colsWidthPerc.put("localita", new Double(0));//        colsWidthPerc.put("provincia", new Double(0));//        colsWidthPerc.put("cod fis", new Double(10));//        colsWidthPerc.put("partita iva", new Double(10));//        griglia.columnsSizePerc = colsWidthPerc;        griglia.dbOpen(Db.getConn(), sql);        griglia.dbPanel = dati;        tabCent.setSelectedIndex(1);        griglia.dbSelezionaRiga();        Cursor.getDefaultCursor();    }//GEN-LAST:event_texSearchKeyReleased    private void chkObsoletoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkObsoletoActionPerformed        if (chkObsoleto.isSelected()) {            textObsoleto.setText(String.valueOf(1));        } else {            textObsoleto.setText(String.valueOf(0));        }    }//GEN-LAST:event_chkObsoletoActionPerformed    private void butLogoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLogoActionPerformed        JFileChooser fileChoose = new JFileChooser();        FileFilter filter1 = new FileFilter() {            @Override            public boolean accept(File pathname) {                if (pathname.getAbsolutePath().endsWith(".jpg")                        || pathname.getAbsolutePath().endsWith(".jpeg")                        || pathname.getAbsolutePath().endsWith(".gif")                        || pathname.getAbsolutePath().endsWith(".bmp")                        || pathname.getAbsolutePath().endsWith(".png")                        || pathname.isDirectory()) {                    return true;                } else {                    return false;                }            }            @Override            public String getDescription() {                return "File Immagine (*.jpg, *.jpeg, *.gif, *.png, *.bmp)";            }        };        fileChoose.addChoosableFileFilter(filter1);        fileChoose.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);        ImagePreviewPanel preview = new ImagePreviewPanel();        fileChoose.setAccessory(preview);        fileChoose.addPropertyChangeListener(preview);        //        JFileChooser fileChoose = SwingUtils.getFileOpen(this);        //fileChoose.setCurrentDirectory(new java.io.File("c:\\"));        int ret = fileChoose.showOpenDialog(this);        if (ret == javax.swing.JFileChooser.APPROVE_OPTION) {            //apro il file            this.texLogo.setText(fileChoose.getSelectedFile().getAbsolutePath());            texLogo.setToolTipText(updateLogoPreview(texLogo.getText()));        }    }//GEN-LAST:event_butLogoActionPerformed    private void btnDelRigtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelRigtActionPerformed        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));        for (int sel : griglia_rapporti.getSelectedRows()) {            String id = String.valueOf(griglia_rapporti.getValueAt(sel, griglia_rapporti.getColumnByName("id")));            if (id.equals("null")) {                JOptionPane.showMessageDialog(this, "Seleziona almeno una riga da cancellare", "Selezione errata", JOptionPane.ERROR_MESSAGE);            } else {                Db.executeSql("DELETE FROM clie_forn_rapporti WHERE id = (" + id + ")");            }        }        griglia_rapporti.dbRefresh();        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    }//GEN-LAST:event_btnDelRigtActionPerformed    private void btnAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRowActionPerformed        int idCliente = Integer.parseInt(this.texCodi.getText());        frmInsertRapporto frm = new frmInsertRapporto(null, idCliente, texRagiSoci.getText(), "N", 0);        main.getPadre().openFrame(frm, 580, 360);    }//GEN-LAST:event_btnAddRowActionPerformed    private void butModiRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butModiRowActionPerformed        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));        for (int sel : griglia_rapporti.getSelectedRows()) {            String id = String.valueOf(griglia_rapporti.getValueAt(sel, griglia_rapporti.getColumnByName("id")));            if (id.equals("null")) {                JOptionPane.showMessageDialog(this, "Seleziona almeno una riga da cancellare", "Selezione errata", JOptionPane.ERROR_MESSAGE);            } else {                int idCliente = Integer.parseInt(this.texCodi.getText());                frmInsertRapporto frm = new frmInsertRapporto(null, idCliente, texRagiSoci.getText(), "M", Integer.valueOf(id));                main.getPadre().openFrame(frm, 530, 360);            }        }        griglia_rapporti.dbRefresh();        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));    }//GEN-LAST:event_butModiRowActionPerformed    private void texTestoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texTestoKeyReleased        this.texNotaCliente.setText(this.texTesto.getText());        this.butSave.setEnabled(true);        this.butUndo.setEnabled(true);    }//GEN-LAST:event_texTestoKeyReleased    private void popMenuAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popMenuAddActionPerformed        this.btnAddRowActionPerformed(null);    }//GEN-LAST:event_popMenuAddActionPerformed    private void popMenuDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popMenuDelActionPerformed        this.btnDelRigtActionPerformed(null);    }//GEN-LAST:event_popMenuDelActionPerformed    private void popMenuModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popMenuModActionPerformed        this.butModiRowActionPerformed(null);    }//GEN-LAST:event_popMenuModActionPerformed    private void griglia_rapportiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_griglia_rapportiMouseClicked         try {            if (evt.getClickCount() == 2) {                this.butModiRowActionPerformed(null);            } else {                //tasto destro                //if (e.getModifiers()==InputEvent.BUTTON3_MASK) popGrig.show(tabNomi,e.getX(),e.getY());            }        } catch (Exception err) {            javax.swing.JOptionPane.showMessageDialog(null, err.toString());            err.printStackTrace();        }    }//GEN-LAST:event_griglia_rapportiMouseClicked    private void butImportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butImportExcelActionPerformed        frmImportClientiExcel frm = new frmImportClientiExcel(this);        frm.pack();        main.getPadre().openFrame(frm, frm.getWidth(), frm.getHeight());}//GEN-LAST:event_butImportExcelActionPerformed    private void butDuplicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDuplicaActionPerformed        if (griglia.getRowCount() <= 0) {            SwingUtils.showErrorMessage(this, "Seleziona un Cliente o Fornitore prima!");            return;        }        String sql;        String sqlC = "";        String sqlV = "";        int newNumero = 0;        int idDuplicata = 0;        int numDup = griglia.getSelectedRows().length;        int res;        //chiedo conferma per eliminare il documento        if (numDup > 1) {            SwingUtils.showErrorMessage(this, "Puoi duplicare solo un Cliente/Fornitore alla volta");            return;        } else {            res = JOptionPane.OK_OPTION;        }        if (res == JOptionPane.OK_OPTION) {            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));            for (int sel : griglia.getSelectedRows()) {                int dbNumero = Integer.parseInt(String.valueOf(griglia.getValueAt(sel, griglia.getColumnByName("codice"))));                //cerco ultimo numero ordine                newNumero = 1;                sqlC = "";                sqlV = "";                sql = "SELECT MAX(codice) as maxnum FROM clie_forn";                try {                    ResultSet tempUltimo = Db.openResultSet(sql);                    if (tempUltimo.next() == true) {                        newNumero = tempUltimo.getInt("maxnum") + 1;                    }                } catch (Exception err) {                    err.printStackTrace();                }                //    SwingUtils.showInfoMessage(this, "newnumero:" + newNumero);                //inserisco nuovo salvandomi i dati su hashtable                sql = "select * from clie_forn";                sql += " where codice = " + Db.pc(dbNumero, Types.VARCHAR);                try {                    System.out.println("listmap duplica:" + sql);                    List<Map> list = DbUtils.getListMap(Db.getConn(), sql);                    Map m = list.get(0);                    m.put("codice", newNumero);                    if (main.iniPrezziCliente == true) {                        try {                            Cliente c = new Cliente(newNumero);                            String listinoCliente = c.getListinoCliente(true);                            comList.dbRefreshItems();                            m.put("codice_listino", listinoCliente);                        } catch (Exception err) {                            err.printStackTrace();                        }                    }                    sql = "insert into clie_forn set ";                    sql += DbUtils.prepareSqlFromMap(m);                    System.out.println("duplica:" + sql);                    Db.executeSql(sql);                    dbRefresh();                    //aprire il nuovo                    //cerco il dbId                    for (int row = 0; row < griglia.getRowCount(); row++) {                        if (CastUtils.toInteger0(griglia.getValueAt(row, griglia.getColumnByName("codice"))) == newNumero) {                            griglia.getSelectionModel().setSelectionInterval(row, row);                            griglia.scrollToRow(row);                            griglia.dbSelezionaRiga();                            SwingUtils.showInfoMessage(this, "Duplicato il Cliente/Fornitore " + dbNumero + " sul nuovo " + newNumero);                            break;                        }                    }                } catch (Exception err) {                    err.printStackTrace();                }            }        }        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));}//GEN-LAST:event_butDuplicaActionPerformed    private void toggle_contattiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggle_contattiActionPerformed        view(dati_contatti);    }//GEN-LAST:event_toggle_contattiActionPerformed    private void toggle_contabiliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggle_contabiliActionPerformed        view(dati_contabili);    }//GEN-LAST:event_toggle_contabiliActionPerformed    private void toggle_indirizzoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggle_indirizzoActionPerformed        view(dati_indirizzo);    }//GEN-LAST:event_toggle_indirizzoActionPerformed    private void toggle_note_opzioniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggle_note_opzioniActionPerformed        view(dati_note_opzioni);    }//GEN-LAST:event_toggle_note_opzioniActionPerformed    private void comTipoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comTipoItemStateChanged        if (evt.getStateChange() == ItemEvent.SELECTED) {            controllaAgentePerTipoAnag();        }    }//GEN-LAST:event_comTipoItemStateChanged    private void comConsegnaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comConsegnaActionPerformed        // TODO add your handling code here:    }//GEN-LAST:event_comConsegnaActionPerformed    private void comScaricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comScaricoActionPerformed        // TODO add your handling code here:    }//GEN-LAST:event_comScaricoActionPerformed    public void controllaAgentePerTipoAnag() {        System.out.println(comTipo.getSelectedKey());        if (comTipo.getSelectedKey().equals("C")) {            comAgente.setEnabled(true);            provPred.setEnabled(true);            provPredForn.setEnabled(false);        } else if (comTipo.getSelectedKey().equals("F")) {            comAgente.setEnabled(false);            provPred.setEnabled(false);            provPredForn.setEnabled(true);        } else {            comAgente.setEnabled(true);            provPred.setEnabled(true);            provPredForn.setEnabled(true);        }    }        private void setNewStato() {        try {            System.out.println("text obsoleto:" + textObsoleto.getText());            int value = 0;            try {                value = Integer.parseInt(textObsoleto.getText());            } catch (NumberFormatException e) {            }            if (value == 1) {                chkObsoleto.setSelected(true);            } else {                chkObsoleto.setSelected(false);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            if (main.getPersonalContain("adesivi")) {                texTesto.setText(texNotaCliente.getText());                griglia_rapporti.dbOpen(Db.getConn(), "select id, cliente, data, data_avviso as 'data avviso', testo from clie_forn_rapporti where cliente = " + this.texCodi.getText());            }        }    }    public String updateLogoPreview(String file) {        if (file.equals("")) {            File f = new File(main.wd + "icone/nologo.png");            file = f.getAbsolutePath();        }        String text = "";        File ftest = new File(file);        if (ftest.exists()) {            ImageIcon icon = new ImageIcon(file);            int lar = icon.getIconWidth();            int alt = icon.getIconHeight();            int newalt = (grandezzaTooltipImage * alt) / lar;            text += "<html><img src='file:///" + ftest.getAbsolutePath() + "' width='" + grandezzaTooltipImage + "' height = '" + newalt + "'></html>";        } else {            text += "<html><b>file inesistente</b></html>";        }        return text;    }    // Variables declaration - do not modify//GEN-BEGIN:variables    private javax.swing.JButton addDdt;    private javax.swing.JButton addFatt;    private javax.swing.JButton addOrd;    private javax.swing.JButton btnAddRow;    private javax.swing.JButton btnDelRigt;    private javax.swing.JButton butBanca;    private javax.swing.JButton butDele;    private javax.swing.JButton butDest;    private javax.swing.JButton butDuplica;    private javax.swing.JButton butFind;    private javax.swing.JButton butFirs;    private javax.swing.JButton butImportExcel;    private javax.swing.JButton butLast;    private javax.swing.JButton butLogo;    private javax.swing.JButton butModiRow;    private javax.swing.JButton butNew;    private javax.swing.JButton butNext;    private javax.swing.JButton butPrev;    private javax.swing.JButton butSave;    private javax.swing.JButton butStampa;    private javax.swing.JButton butStampaElenco;    private javax.swing.JButton butUndo;    private javax.swing.JCheckBox chkObsoleto;    private tnxbeans.tnxComboField comAgente;    private tnxbeans.tnxComboField comConsegna;    private javax.swing.JComboBox comFiltro1;    private tnxbeans.tnxComboField comIvaStandard;    private tnxbeans.tnxComboField comList;    private tnxbeans.tnxComboField comPaese;    private tnxbeans.tnxComboField comPaga;    private tnxbeans.tnxComboField comScarico;    private tnxbeans.tnxComboField comTipo;    private tnxbeans.tnxComboField comTipo2;    public tnxbeans.tnxDbPanel dati;    private tnxbeans.tnxDbPanel datiAnagrafici;    public tnxbeans.tnxDbPanel dati_contabili;    private tnxbeans.tnxDbPanel dati_contatti;    private tnxbeans.tnxDbPanel dati_indirizzo;    private tnxbeans.tnxDbPanel dati_note_opzioni;    private tnxbeans.tnxDbPanel dbpanel_consegna_e_scarico;    public tnxbeans.tnxDbGrid griglia;    public tnxbeans.tnxDbGrid griglia_rapporti;    private javax.swing.JButton jButton3;    private javax.swing.JLabel jLabel1;    private javax.swing.JLabel jLabel10;    private javax.swing.JLabel jLabel11;    private javax.swing.JLabel jLabel12;    private javax.swing.JLabel jLabel13;    private javax.swing.JLabel jLabel131;    private javax.swing.JLabel jLabel14;    private javax.swing.JLabel jLabel15;    private javax.swing.JLabel jLabel16;    private javax.swing.JLabel jLabel2;    private javax.swing.JLabel jLabel21;    private javax.swing.JLabel jLabel211;    private javax.swing.JLabel jLabel2111;    private javax.swing.JLabel jLabel212;    private javax.swing.JLabel jLabel213;    private javax.swing.JLabel jLabel215;    private javax.swing.JLabel jLabel216;    private javax.swing.JLabel jLabel217;    private javax.swing.JLabel jLabel218;    private javax.swing.JLabel jLabel219;    private javax.swing.JLabel jLabel22;    public javax.swing.JLabel jLabel221;    private javax.swing.JLabel jLabel2211;    private javax.swing.JLabel jLabel222;    private javax.swing.JLabel jLabel223;    private javax.swing.JLabel jLabel224;    private javax.swing.JLabel jLabel225;    private javax.swing.JLabel jLabel226;    private javax.swing.JLabel jLabel227;    private javax.swing.JLabel jLabel228;    private javax.swing.JLabel jLabel229;    private javax.swing.JLabel jLabel23;    private javax.swing.JLabel jLabel231;    private javax.swing.JLabel jLabel232;    private javax.swing.JLabel jLabel233;    private javax.swing.JLabel jLabel234;    private javax.swing.JLabel jLabel241;    private javax.swing.JLabel jLabel25;    private javax.swing.JLabel jLabel26;    private javax.swing.JLabel jLabel3;    private javax.swing.JLabel jLabel4;    private javax.swing.JLabel jLabel5;    private javax.swing.JLabel jLabel6;    private javax.swing.JLabel jLabel7;    private javax.swing.JLabel jLabel8;    private javax.swing.JLabel jLabel9;    private javax.swing.JPanel jPanel1;    private javax.swing.JPanel jPanel2;    private javax.swing.JPanel jPanel3;    private javax.swing.JPanel jPanel4;    private javax.swing.JPanel jPanel5;    private javax.swing.JPanel jPanel6;    private javax.swing.JPopupMenu jPopupMenu1;    private javax.swing.JScrollPane jScrollPane1;    private javax.swing.JScrollPane jScrollPane3;    private javax.swing.JScrollPane jScrollPane4;    private javax.swing.JSeparator jSeparator1;    private javax.swing.JToolBar.Separator jSeparator2;    private javax.swing.JSeparator jSeparator3;    private javax.swing.JSeparator jSeparator4;    private javax.swing.JSeparator jSeparator5;    private javax.swing.JToolBar jToolBar1;    private javax.swing.JToolBar jToolBar2;    private javax.swing.JToolBar jToolBar3;    private javax.swing.JLabel labBancAbi;    private javax.swing.JLabel labBancCab;    private javax.swing.JLabel labGiornoPagamento;    private javax.swing.JLabel labIntePrezzi;    private tnxbeans.tnxMemoField note;    private javax.swing.JPanel panAlto;    private javax.swing.JPanel panDati;    private javax.swing.JPanel panElen;    private javax.swing.JPanel panPrezzi;    private javax.swing.JPanel panel_toggles;    private javax.swing.JMenuItem popMenuAdd;    private javax.swing.JMenuItem popMenuDel;    private javax.swing.JMenuItem popMenuMod;    private tnxbeans.tnxTextField provPred;    private tnxbeans.tnxTextField provPredForn;    private tnxbeans.tnxCheckBox raggruppa1;    private tnxbeans.tnxCheckBox raggruppa2;    private javax.swing.JScrollPane scroll_dati;    public javax.swing.JLabel segna_posto_contabili_post;    public javax.swing.JLabel segna_posto_contabili_pre;    public javax.swing.JLabel segna_posto_contabili_provvigioni1;    private javax.swing.JTabbedPane tabCent;    private javax.swing.JTable tabPrezziCliente;    private javax.swing.JScrollPane texAreaNoteCliente;    private tnxbeans.tnxTextField texBancAbi;    private tnxbeans.tnxTextField texBancCab;    private tnxbeans.tnxTextField texBancCc;    private tnxbeans.tnxTextField texBancCc2;    private tnxbeans.tnxTextField texCap;    private tnxbeans.tnxTextField texCell;    private tnxbeans.tnxTextField texCodi;    private tnxbeans.tnxTextField texCodiFisc;    private tnxbeans.tnxTextField texCodiList;    private tnxbeans.tnxTextField texEmai;    private tnxbeans.tnxTextField texFax;    private tnxbeans.tnxTextField texGiornoPagamento;    private tnxbeans.tnxTextField texIndi;    private tnxbeans.tnxTextField texLoca;    private tnxbeans.tnxTextField texLogo;    private tnxbeans.tnxTextField texNotaCliente;    private tnxbeans.tnxTextField texPersRife;    private tnxbeans.tnxTextField texPiva;    private tnxbeans.tnxTextField texProv;    private tnxbeans.tnxTextField texRagiSoci;    public tnxbeans.tnxTextField texScon1;    public tnxbeans.tnxTextField texScon2;    public tnxbeans.tnxTextField texScon3;    public tnxbeans.tnxTextField texScon4;    public tnxbeans.tnxTextField texScon5;    private javax.swing.JTextField texSearch;    private tnxbeans.tnxTextField texTele;    public tnxbeans.tnxTextField texTeleRife;    private javax.swing.JTextArea texTesto;    private tnxbeans.tnxTextField texWeb;    private tnxbeans.tnxTextField textObsoleto;    private tnxbeans.tnxCheckBox tnxCheckBox1;    private tnxbeans.tnxCheckBox tnxCheckBox2;    private javax.swing.JToggleButton toggle_contabili;    private javax.swing.JToggleButton toggle_contatti;    private javax.swing.JToggleButton toggle_indirizzo;    private javax.swing.JToggleButton toggle_note_opzioni;    private tnxbeans.tnxCheckBox updateListini;    // End of variables declaration//GEN-END:variables    private void trovaAbi() {        try {            this.labBancAbi.setText(Db.lookUp(this.texBancAbi.getText(), "abi", "banche_abi").getString(2));        } catch (Exception err) {            this.labBancAbi.setText("");        }    }    private void trovaCab() {        try {            String sql = "";            sql += "select banche_cab.cap,";            sql += " banche_cab.indirizzo,";            sql += " comuni.comune,";            sql += " comuni.provincia";            sql += " from banche_cab left join comuni on banche_cab.codice_comune = comuni.codice";            sql += " where banche_cab.abi = " + Db.pc(this.texBancAbi.getText(), "VARCHAR");            sql += " and banche_cab.cab = " + Db.pc(this.texBancCab.getText(), "VARCHAR");            ResultSet temp = Db.openResultSet(sql);            temp.next();            this.labBancCab.setText(Db.nz(temp.getString(3), "") + ", " + Db.nz(temp.getString(2), ""));        } catch (Exception err) {            this.labBancCab.setText("");        }    }    private void showPrezziCliente() {        isShowPrezziCliente = true;        if (main.iniPrezziCliente == true) {            int cols = 4;            String listinoBase = main.getListinoBase();            if (listinoBase.equals("-1")) {                javax.swing.JOptionPane.showMessageDialog(null, "Non e' definito il listino Base, andare in Anagrafica Listini e selezionarne uno come base.", "Attenzione", javax.swing.JOptionPane.INFORMATION_MESSAGE);                return;            }            if (this.texCodi.getText().trim().length() == 0) {                return;            }            Cliente c = new Cliente(Integer.parseInt(this.texCodi.getText()));            listinoCliente = c.getListinoCliente(true);            labIntePrezzi.setText("<html>Ragione Sociale: " + texRagiSoci.getText() + "<br>Listino Base: " + listinoBase + "<br>Listino Cliente: " + listinoCliente + "</html>");            String sql = "select a.codice, a.descrizione, ap.prezzo as prezzoBase, apc.prezzo as prezzoCliente ";            sql += " from articoli a left join articoli_prezzi ap on a.codice = ap.articolo and ap.listino = " + Db.pc(listinoBase, Types.VARCHAR);            sql += " left join articoli_prezzi apc on a.codice = apc.articolo and apc.listino = " + Db.pc(listinoCliente, Types.VARCHAR);            sql += " order by a.codice";            System.out.println("sql listini:\n" + sql);            ResultSet articoli = Db.openResultSet(sql);            DefaultTableModel model = (DefaultTableModel) tabPrezziCliente.getModel();            model.addTableModelListener(new TableModelListener() {                public void tableChanged(TableModelEvent e) {                    if (!dati.isRefreshing && !isShowPrezziCliente) {                        dati.dbForzaModificati();                    }                }            });            model.setRowCount(0);            try {                while (articoli.next()) {                    Object[] row = new Object[cols];                    row[0] = articoli.getString(1);                    row[1] = articoli.getString(2);                    if (articoli.getObject("prezzoBase") == null) {                        row[2] = null;                    } else {                        row[2] = new Double(articoli.getDouble("prezzoBase"));                    }                    if (articoli.getObject("prezzoCliente") == null) {                        row[3] = null;                    } else {                        row[3] = new Double(articoli.getDouble("prezzoCliente"));                    }                    model.addRow(row);                }//                prezziClienteModel cacheModel = new prezziClienteModel(cache, colNames, dati);//                this.tabPrezziCliente.setModel(cacheModel);                //render sulla griglia per valuta                DefaultTableCellRenderer currencyRender = new DefaultTableCellRenderer() {                    @Override                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {                        JLabel lab = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);                        lab.setText(FormatUtils.formatEuroItaMax5(CastUtils.toDouble0(value)));                        lab.setHorizontalAlignment(JLabel.RIGHT);                        return lab;                    }                };                JTextField textEditor = new JTextField();                textEditor.setHorizontalAlignment(JTextField.RIGHT);                DefaultCellEditor currencyEditor = new DefaultCellEditor(textEditor) {                    @Override                    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {                        JTextField text = (JTextField) super.getTableCellEditorComponent(table, value, isSelected, row, column);                        text.setText(FormatUtils.formatEuroItaMax5(CastUtils.toDouble0(value)));                        text.setHorizontalAlignment(JTextField.RIGHT);                        return text;                    }                    @Override                    public Object getCellEditorValue() {                        return CastUtils.toDouble0(super.getCellEditorValue());                    }                };                this.tabPrezziCliente.getColumn("Prezzo Base").setCellRenderer(currencyRender);                this.tabPrezziCliente.getColumn("Prezzo Cliente").setCellRenderer(currencyRender);                this.tabPrezziCliente.getColumn("Prezzo Cliente").setCellEditor(currencyEditor);            } catch (java.sql.SQLException sqlErr) {                sqlErr.printStackTrace();            }        }        isShowPrezziCliente = false;    }    private void savePrezziCliente() {        String sql;        NumberFormat form = NumberFormat.getInstance();        String prezzo;        //prima dovrei controllare i prezzi inseriti        //prima elimino i prezzi da reinserire        sql = "delete from articoli_prezzi";        sql += " where listino = " + Db.pc(listinoCliente, java.sql.Types.VARCHAR);        if (Db.executeSql(sql) == true) {            for (int i = 0; i < this.tabPrezziCliente.getRowCount(); i++) {                if (tabPrezziCliente.getValueAt(i, 3) != null && tabPrezziCliente.getValueAt(i, 3).toString().length() > 0) {//                    try {//                        prezzo = String.valueOf(form.parse(tabPrezziCliente.getValueAt(i, 3).toString()));//                    } catch (Exception err) {//                        err.printStackTrace();//                        prezzo = "0";//                    }                    Double prezzod = 0d;                    try {                        prezzod = (Double) tabPrezziCliente.getValueAt(i, 3);                    } catch (Exception e) {                        e.printStackTrace();                    }                    sql = "insert into articoli_prezzi (articolo, listino, prezzo) values (";                    sql += Db.pc(tabPrezziCliente.getValueAt(i, 0), java.sql.Types.VARCHAR);                    sql += ", " + Db.pc(listinoCliente, java.sql.Types.VARCHAR);                    sql += ", " + Db.pc(prezzod, java.sql.Types.DECIMAL);                    sql += ")";                    Db.executeSql(sql);                }            }        } else {            javax.swing.JOptionPane.showMessageDialog(this, "Impossibile eliminare i prezzi precedenti", "Errore", javax.swing.JOptionPane.ERROR_MESSAGE);        }    }    public void trova(String codice) {        dati.ultimoCampo = "codice";        dati.ultimoValore = codice;        System.out.println("find exact:" + griglia.dbFindExact());    }    private String getCampiGriglia() {        return "codice,ragione_sociale,telefono,email, indirizzo, cap, localita, provincia,cfiscale as 'cod fis', piva_cfiscale as 'partita iva'";    }    private void dbRefresh() {        dati.dbRefresh();        griglia.dbRefresh();        griglia_rapporti.dbRefresh();    }    boolean view_pan = false;    private void view(tnxDbPanel pan) {        view(pan.getLocation().y);        view_pan = true;        getFocusTraversalPolicy().getFirstComponent(pan).requestFocus();    }    Timeline t1 = null;    private void view(int toy) {        if (toy < 0) toy = 0;        int maxtoy = dati.getHeight() - scroll_dati.getViewport().getHeight();        System.out.println("maxtoy:" + maxtoy);        if (toy > maxtoy) toy = maxtoy;        if (view_pan) return;        System.out.println("view " + toy + " t1:" + t1);                if (t1 != null && t1.getState() == Timeline.TimelineState.PLAYING_FORWARD) {            t1.abort();        }        t1 = new Timeline(this);        t1.setEase(new Spline(0.75f));        t1.setDuration(300);        t1.addPropertyToInterpolate("viewPos", (float)scroll_dati.getViewport().getViewPosition().y,  (float)toy);        t1.addCallback(new TimelineCallbackAdapter() {            @Override            public void onTimelineStateChanged(TimelineState oldState, TimelineState newState, float durationFraction, float timelinePosition) {                super.onTimelineStateChanged(oldState, newState, durationFraction, timelinePosition);                if (newState == TimelineState.DONE) {                    view_pan = false;                }            }                    });        t1.play();    }        public void setViewPos(float newValue) {        scroll_dati.getViewport().setViewPosition(new Point(0, (int)newValue));    }        public float getViewPos() {        return viewPos;    }    public static class ClientiMyTable extends JTable {        //  Place cell in edit mode when it 'gains focus'        public void changeSelection(                int row, int column, boolean toggle, boolean extend) {            super.changeSelection(row, column, toggle, extend);            if (editCellAt(row, column)) {                getEditorComponent().requestFocusInWindow();            }        }        //  Select the text when the cell starts editing        //  a) text will be replaced when you start typing in a cell        //  b) text will be selected when you use F2 to start editing        //  c) text will be selected when double clicking to start editing        public boolean editCellAt(int row, int column, EventObject e) {            boolean result = super.editCellAt(row, column, e);            final Component editor = getEditorComponent();            if (editor != null && editor instanceof JTextComponent) {                if (e == null) {                    ((JTextComponent) editor).selectAll();                } else {                    SwingUtilities.invokeLater(new Runnable() {                        public void run() {                            ((JTextComponent) editor).selectAll();                        }                    });                }            }            return result;        }        //  Select the text when the cell starts editing        //  a) text will be replaced when you start typing in a cell        //  b) text will be selected when you use F2 to start editing        //  c) caret is placed at end of text when double clicking to start editing        public Component prepareEditor(                TableCellEditor editor, int row, int column) {            Component c = super.prepareEditor(editor, row, column);            if (c instanceof JTextComponent) {                System.out.println("prepare " + ((JTextField) c).getText());                ((JTextField) c).selectAll();            }            return c;        }    }}class prezziClienteModel        extends CachedTableModel {    private tnxDbPanel panel;    DecimalFormat form = new DecimalFormat("#,##0.00");    public prezziClienteModel(java.util.ArrayList rows, Object[] cols, tnxDbPanel panel) {        super(rows, cols);        this.panel = panel;    }    public boolean isCellEditable(int r, int c) {        if (c == 3) {            return true;        }        return false;    }    public Object getValueAt(int r, int c) {        if (r < cache.size()) {            if (c == 2 || c == 3) {                try {                    return form.format(((Object[]) cache.get(r))[c]);                } catch (Exception err) {                    //err.printStackTrace();                    return ((Object[]) cache.get(r))[c];                }            } else {                return ((Object[]) cache.get(r))[c];            }        } else {            return null;        }    }    public void setValueAt(Object value, int r, int c) {        super.setValueAt(value, r, c);        if (panel.dbStato != panel.DB_INSERIMENTO) {            panel.dbCambiaStato(panel.DB_MODIFICA);        }    }}class MyPanel extends tnxDbPanel implements Scrollable {    @Override    public Dimension getPreferredScrollableViewportSize() {        return new Dimension(300, 300);    }    @Override    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {        return 50;    }    @Override    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {        return 100;    }    @Override    public boolean getScrollableTracksViewportWidth() {        return true;    }    @Override    public boolean getScrollableTracksViewportHeight() {        return false;    }}