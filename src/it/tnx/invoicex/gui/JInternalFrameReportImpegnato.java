/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package it.tnx.invoicex.gui;

import it.tnx.Db;
import it.tnx.commons.CastUtils;
import it.tnx.commons.DateUtils;
import it.tnx.commons.DbUtils;
import it.tnx.commons.FormatUtils;
import it.tnx.commons.KeyValuePair;
import it.tnx.commons.SwingUtils;
import it.tnx.commons.cu;
import it.tnx.invoicex.InvoicexUtil;
import it.tnx.invoicex.Magazzino;
import java.util.ArrayList;
import net.sf.jasperreports.engine.JasperManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author mceccarelli
 */
public class JInternalFrameReportImpegnato extends javax.swing.JInternalFrame {

    public boolean per_produttore = false;
    public String TUTTI = "*tutti*";

    public JInternalFrameReportImpegnato() {
        this(false);
    }

    /**
     * Creates new form JInternalFrameReportImpegnato
     */
    public JInternalFrameReportImpegnato(boolean per_produttore) {
        initComponents();
        
        this.per_produttore = per_produttore;
        
        String sqlcombo  = "";
        
        prodforn.addItem(new KeyValuePair(TUTTI, "<tutti>"));
        if (per_produttore) {
            setTitle("Report quantità impegnate per Produttore");
            labprodforn.setText("Produttore");
            sqlcombo = "select p.id, l.ita from produttori p join labels l on p.nome_lbl_id = l.id order by l.ita";
        } else {
            labprodforn.setText("Fornitore");
            sqlcombo = "select codice, ragione_sociale from clie_forn where tipo = 'F' or tipo = 'E' or IFNULL(tipo, '') = ''";
        }
        try {
            System.out.println("sqlcombo = " + sqlcombo);
            ArrayList<Object[]> list = DbUtils.getListKV(Db.getConn(), sqlcombo);
            for (Object[] rec : list) {
                prodforn.addItem(new KeyValuePair(rec[0], rec[1]));
            }            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        dal.setDate(DateUtils.getOnlyDate(DateUtils.getCurrentYear(), 1, 1));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        butConferma = new javax.swing.JButton();
        prodforn = new javax.swing.JComboBox();
        labprodforn = new javax.swing.JLabel();
        dal = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        al = new org.jdesktop.swingx.JXDatePicker();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Report quantità impegnate per Fornitore");

        butConferma.setFont(butConferma.getFont().deriveFont(butConferma.getFont().getSize()+3f));
        butConferma.setText("Visualizza il Report");
        butConferma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConfermaActionPerformed(evt);
            }
        });

        labprodforn.setText("Produttore/Fornitore");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Dal");
        jLabel3.setPreferredSize(new java.awt.Dimension(80, 14));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Al");
        jLabel4.setPreferredSize(new java.awt.Dimension(80, 14));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(labprodforn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(prodforn, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 352, Short.MAX_VALUE)
                        .add(butConferma))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(dal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(al, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {jLabel3, jLabel4, labprodforn}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(prodforn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labprodforn))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(dal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(al, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 28, Short.MAX_VALUE)
                .add(butConferma)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butConfermaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConfermaActionPerformed
//
//        //controllo date
//        if (it.tnx.Checks.isDate(this.jTextField1.getText()) == false) {
//            javax.swing.JOptionPane.showInternalMessageDialog(this, "La data di partenza non e' valida !", "Attenzione", javax.swing.JOptionPane.WARNING_MESSAGE);
//            return;
//        }
//        if (it.tnx.Checks.isDate(this.jTextField2.getText()) == false) {
//            javax.swing.JOptionPane.showInternalMessageDialog(this, "La data di arrivo non e' valida !", "Attenzione", javax.swing.JOptionPane.WARNING_MESSAGE);
//            return;
//        }

        String tipo_titolo = "Fornitore";
        if (per_produttore) {
            tipo_titolo = "Produttore";
        }

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        
        try {
            //aggiorno giacenze articoli
            InvoicexUtil.aggiornaGiacenzeArticoli();


            //con compilazione
            //System.out.println("load jrxml");
            //JasperDesign jasperDesign = JasperManager.loadXmlDesign("/mnt/tnx/tnx/lavori/gianni/GestioneFatture/reports/stats_monthly.jrxml");
            //JasperDesign jasperDesign = JasperManager.loadXmlDesign("C:/cvs_tnx/tnx/Invoicex15/src/reports/stats_monthly.jrxml");
            //System.out.print("compilazione...");
            //JasperReport jasperReport = JasperManager.compileReport(jasperDesign);
            //System.out.println("...ok");
            //senza compilazione

            System.out.println("load jasper");
            JasperReport jasperReport = JasperManager.loadReport("reports/report_impegnato.jasper");

            String filtro = "";
            if (prodforn.getSelectedItem() != null) {
                KeyValuePair kv = (KeyValuePair) prodforn.getSelectedItem();
                if (cu.toString(kv.key) != TUTTI) {
                    if (per_produttore) {
                        filtro = " and a.produttore_id = '" + Db.aa(cu.toString(kv.key)) + "'";
                    } else {
                        filtro = " and a.fornitore = '" + Db.aa(cu.toString(kv.key)) + "'";
                    }
                }
            }
            
            String sql = "select r.id_padre, r.id, r.codice_articolo, a.descrizione, a.fornitore, cf.ragione_sociale,\n"
                    + " SUM(r.quantita) as quantita,\n"
                    + " SUM(r.quantita_evasa) as quantita_evasa,\n"
                    + " SUM(r.quantita - IFNULL(r.quantita_evasa, 0)) as qta_da_evadere,\n"
                    + " a.disponibilita_reale,\n"
                    + " LEAST(SUM(r.quantita) - SUM(IFNULL(r.quantita_evasa, 0)), GREATEST(a.disponibilita_reale, 0)) as evadibile\n"
                    + " ,IF(count(avv.id) > 0, count(avv.id), null) as waitinglist\n"
                    + " from righ_ordi r\n"
                    + " join test_ordi t on r.id_padre = t.id\n"
                    + " left join articoli a on r.codice_articolo = a.codice\n"
                    + " left join clie_forn cf on a.fornitore = cf.codice\n"
                    + " left join avvisi_articoli avv on avv.articolo_id = a.id\n"
                    + " where IFNULL(t.evaso,'') != 'S'\n"
                    + " and IFNULL(r.codice_articolo, '') != ''\n"
                    + filtro 
                    + " group by r.codice_articolo\n"
                    + " order by  a.fornitore, SUM(r.quantita - IFNULL(r.quantita_evasa, 0))";
            if (per_produttore) {
//                sql = "select r.id_padre, r.id, r.codice_articolo, a.descrizione, a.produttore_id as fornitore, lab.ita as ragione_sociale,\n"
//                        + " SUM(r.quantita) as quantita,\n"
//                        + " SUM(r.quantita_evasa) as quantita_evasa,\n"
//                        + " SUM(r.quantita - IFNULL(r.quantita_evasa, 0)) as qta_da_evadere,\n"
//                        + " a.disponibilita_reale,\n"
//                        + " LEAST(SUM(r.quantita) - SUM(IFNULL(r.quantita_evasa, 0)), GREATEST(a.disponibilita_reale, 0)) as evadibile\n"
//                        + " ,IF(count(avv.id) > 0, count(avv.id), null) as waitinglist\n"
//                        + " from righ_ordi r\n"
//                        + " join test_ordi t on r.id_padre = t.id\n"
//                        + " left join articoli a on r.codice_articolo = a.codice\n"
//                        + " left join clie_forn cf on a.fornitore = cf.codice\n"
//                        + " left join produttori p on a.produttore_id = p.id\n"
//                        + " left join labels lab on p.nome_lbl_id = lab.id\n"
//                        + " left join avvisi_articoli avv on avv.articolo_id = a.id\n"
//                        + " where IFNULL(t.evaso,'') != 'S'\n"
//                        + " and IFNULL(r.codice_articolo, '') != ''\n"
//                        + filtro 
//                        + " group by r.codice_articolo\n"
//                        + " order by  lab.ita, SUM(r.quantita - IFNULL(r.quantita_evasa, 0))";

                sql = " select r.id_padre, r.id, r.codice_articolo, a.descrizione, a.codice_fornitore, a.produttore_id as fornitore, lab.ita as ragione_sociale,\n" +
                    " IFNULL(SUM(r.quantita),0) as quantita,\n" +
                    " IFNULL(SUM(r.quantita_evasa),0) as quantita_evasa,\n" +
                    " IFNULL(SUM(r.quantita - IFNULL(r.quantita_evasa, 0)),0) as qta_da_evadere,\n" +
                    " IFNULL(a.disponibilita_reale,0) as disponibilita_reale,\n" +
                    " IFNULL(LEAST(SUM(r.quantita) - SUM(IFNULL(r.quantita_evasa, 0)), GREATEST(IFNULL(a.disponibilita_reale,0), 0)),0) as evadibile,\n" +
                    " IFNULL((SUM(r.quantita - IFNULL(r.quantita_evasa, 0))) - (LEAST(SUM(r.quantita) - SUM(IFNULL(r.quantita_evasa, 0)), GREATEST(IFNULL(a.disponibilita_reale,0), 0))),0) as qta_da_ordinare\n" +
                    " ,IFNULL(IF(count(avv.id) > 0, count(avv.id), null),0) as waitinglist\n" +
                    " , ipp.quantitat, ipp.quantita_evasat, ipp.qta_da_evaderet, ipp.disp_reale_prod, ipp.evadibilet, ipp.qta_da_ordinaret, ipp.waitinglistt\n" +
                    " , IFNULL((\n" +
                    " select sum(quantita) \n" +
                    " from righ_fatt rf \n" +
                    " join test_fatt tf on rf.id_padre = tf.id \n" +
                    " where rf.codice_articolo = r.codice_articolo \n" +
                    " and tf.data >= '" + FormatUtils.formatMysqlDate(dal.getDate()) + "'\n" +
                    " ),0) as tot_fatturato\n" +
                    ", IFNULL((\n" +
                    " select sum(quantita) \n" +
                    " from righeordine ro\n" +
                    " join ordini o on ro.ordine_id = o.id\n" +
                    " where ro.codice_art = r.codice_articolo \n" +
                    " and o.data_ordine >= '" + FormatUtils.formatMysqlDate(dal.getDate()) + "'\n" +
                    " ),0) as tot_ordinato \n" +
                    " from righ_ordi r\n" +
                    " join test_ordi t on r.id_padre = t.id\n" +
                    " left join articoli a on r.codice_articolo = a.codice\n" +
                    " left join clie_forn cf on a.fornitore = cf.codice\n" +
                    " left join produttori p on a.produttore_id = p.id\n" +
                    " join impegnato_per_produttore ipp on a.produttore_id = ipp.fornitore\n" +
                    " left join labels lab on p.nome_lbl_id = lab.id\n" +
                    " left join avvisi_articoli avv on avv.articolo_id = a.id\n" +
                    " where IFNULL(t.evaso,'') != 'S'\n" +
                    " and IFNULL(r.codice_articolo, '') != ''\n" +
                    filtro +                    
                    " group by r.codice_articolo\n" +
                    " having  SUM(r.quantita - IFNULL(r.quantita_evasa, 0)) != 0\n" +
                    " order by ipp.qta_da_ordinaret desc, lab.ita,  (SUM(r.quantita - IFNULL(r.quantita_evasa, 0))) - (LEAST(SUM(r.quantita) - SUM(IFNULL(r.quantita_evasa, 0)), GREATEST(IFNULL(a.disponibilita_reale,0), 0))) desc                ";
                
            }

            System.out.println("query report impegnato: " + sql);
            
            // Second, create a map of parameters to pass to the report.
            java.util.Map parameters = new java.util.HashMap();
            parameters.put("titolo", "Report quantità impegnate per " + tipo_titolo);
            String sottotitolo = "venduto dal " + DateUtils.formatDateIta(dal.getDate());
            if (al != null) {
                sottotitolo += " al " + DateUtils.formatDateIta(al.getDate());
            }
            parameters.put("sottotitolo", sottotitolo);
            parameters.put("tipo", tipo_titolo);
            parameters.put("query", sql);
//            parameters.put("periodo", "Dal " + _this.jTextField1.getText() + " al " + _this.jTextField2.getText());
//            parameters.put("stampaDettagli", new Boolean(cheDettagli.isSelected()));
//            parameters.put("stampaQta", new Boolean(cheQta.isSelected()));

            // Third, get a database connection
            java.sql.Connection conn = it.tnx.Db.getConn();
            // Fourth, create JasperPrint using fillReport() method
            JasperPrint jasperPrint = JasperManager.fillReport(jasperReport, parameters, conn);

            // You can use JasperPrint to create PDF
            //JasperManager.printReportToPdfFile(jasperPrint, "/home/marco/pippo/test1.pdf");
            // Or to view report in the JasperViewer
            JasperViewer.viewReport(jasperPrint, false);
        } catch (Exception err) {
            err.printStackTrace();
            SwingUtils.showExceptionMessage(this, err);
        }

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_butConfermaActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker al;
    private javax.swing.JButton butConferma;
    private org.jdesktop.swingx.JXDatePicker dal;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel labprodforn;
    private javax.swing.JComboBox prodforn;
    // End of variables declaration//GEN-END:variables
}
