/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JDialogPrezzi.java
 *
 * Created on 3-giu-2010, 17.24.39
 */
package it.tnx.invoicex.gui;

import it.tnx.Db;
import it.tnx.commons.CastUtils;
import it.tnx.commons.SwingUtils;
import it.tnx.commons.table.RendererUtils;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mceccarelli
 */
public class JDialogPrezzi extends javax.swing.JDialog {
    public boolean conIva;
    public boolean senzaIva;

    /** Creates new form JDialogPrezzi */
    public JDialogPrezzi(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        prezzi.getColumnModel().getColumn(2).setCellRenderer(new RendererUtils.CurrencyRenderer(new DecimalFormat("0.00###")));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        prezzi = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Prezzi di Listino per l'articolo : ");

        prezzi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod. Listino", "Listino", "Prezzo", "IVA inclusa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        prezzi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prezziMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(prezzi);
        prezzi.getColumnModel().getColumn(0).setPreferredWidth(50);
        prezzi.getColumnModel().getColumn(1).setPreferredWidth(200);
        prezzi.getColumnModel().getColumn(2).setPreferredWidth(100);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void prezziMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prezziMouseClicked
        if (evt.getClickCount() >= 2) {
            String ivati = CastUtils.toString(prezzi.getValueAt(prezzi.getSelectedRow(), prezzi.getColumn("IVA inclusa").getModelIndex()));
            if (ivati.equalsIgnoreCase("S") && senzaIva) {
                if (!SwingUtils.showYesNoMessage(this, "Stai selezionando un prezzo con iva inclusa come prezzo senza iva,\nSicuro ?")) {
                    return;
                }
            }
            if (ivati.equalsIgnoreCase("N") && conIva) {
                if (!SwingUtils.showYesNoMessage(this, "Stai selezionando un prezzo senza iva come prezzo iva inclusa,\nSicuro ?")) {
                    return;
                }
            }
            dispose();
        }
    }//GEN-LAST:event_prezziMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                JDialogPrezzi dialog = new JDialogPrezzi(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable prezzi;
    // End of variables declaration//GEN-END:variables

    public void loadArticolo(String articolo, String codiceListino) {
        try {
            setTitle("Prezzi di listino per art.: " + articolo);
            ResultSet temp;
            String sql = "select * from articoli";
            sql += " where codice = " + Db.pc(articolo, "VARCHAR");
            temp = Db.openResultSet(sql);
            temp.next();

            sql = "select prezzo, tipi_listino.* from articoli_prezzi left join tipi_listino on articoli_prezzi.listino = tipi_listino.codice";
            sql += " where articolo = " + Db.pc(articolo, "VARCHAR");

            ResultSet r_prezzi = Db.openResultSet(sql);

            String prezzo = "";
            double prezzod = 0d;
            while (r_prezzi.next()) {
                try {
                    prezzo = Db.formatDecimal5(temp.getDouble("prezzo1"));
                    prezzod = temp.getDouble("prezzo1");
                    boolean non_applicare_percentuale = CastUtils.toBoolean(temp.getString("non_applicare_percentuale"));
                    if (r_prezzi.getString("ricarico_flag") != null && r_prezzi.getString("ricarico_flag").equals("S")) {
                        double perc = r_prezzi.getDouble("ricarico_perc");
                        double nuovo_prezzo = 0;
                        sql = "select prezzo from articoli_prezzi";
                        sql += " where articolo = " + Db.pc(articolo, "VARCHAR");
                        sql += " and listino = " + Db.pc(r_prezzi.getString("ricarico_listino"), java.sql.Types.VARCHAR);
                        ResultSet prezzi2 = Db.openResultSet(sql);
                        prezzi2.next();
                        if (non_applicare_percentuale) {
                            nuovo_prezzo = prezzi2.getDouble("prezzo");
                        } else {
                            nuovo_prezzo = prezzi2.getDouble("prezzo") * ((perc + 100d) / 100d);
                        }
                        prezzo = Db.formatDecimal5(nuovo_prezzo);
                        prezzod = nuovo_prezzo;
                    } else {
                        prezzo = Db.formatDecimal5(r_prezzi.getDouble(1));
                        prezzod = r_prezzi.getDouble(1);
                    }
    //                ((DefaultListModel)prezzi.getModel()).addElement(r_prezzi.getString("tipi_listino.codice") + " -> " + prezzo);
                    ((DefaultTableModel)prezzi.getModel()).addRow(new Object[] {r_prezzi.getString("tipi_listino.codice"), r_prezzi.getString("tipi_listino.descrizione"), prezzod, r_prezzi.getString("prezzi_ivati")});
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
