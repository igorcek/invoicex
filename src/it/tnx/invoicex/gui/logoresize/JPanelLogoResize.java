/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPanelLogoResize.java
 *
 * Created on 26-feb-2010, 15.40.29
 */
package it.tnx.invoicex.gui.logoresize;

import java.awt.Cursor;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.PointerInfo;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.io.InputStream;

/**
 *
 * @author mceccarelli
 */
public class JPanelLogoResize extends javax.swing.JPanel {

    int angolo = -1;    //-1 niente, 1 angolo Alto sx, 2, Alto Dx, 3 Basso dx, 4 basso sx., 0 centro
    boolean resizing = false;
    Rectangle start_r_i = null;
    Rectangle start_r_i_comp = null;
    Point start_p_m = null;

    public int off_x = 42; //offset fra panel e immagine
    public int off_x2 = 0; //offset fra panel e immagine + margine panel su form
    public int off_y = 33;
    public int off_y2 = 0;
    public int dim_x = 396; //dinmensione sapzion disponibile
    public int dim_y = 179; //dinmensione sapzion disponibile


    /** Creates new form JPanelLogoResize */
    public JPanelLogoResize() {
        initComponents();
        off_x2 = off_x + sfondo.getLocation().x;
        off_y2 = off_y + sfondo.getLocation().y;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        i = new it.tnx.invoicex.gui.logoresize.ImageBox();
        sfondo = new javax.swing.JLabel();

        setLayout(null);

        i.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                iMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                iMouseReleased(evt);
            }
        });
        i.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                iMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                iMouseMoved(evt);
            }
        });

        org.jdesktop.layout.GroupLayout iLayout = new org.jdesktop.layout.GroupLayout(i);
        i.setLayout(iLayout);
        iLayout.setHorizontalGroup(
            iLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 200, Short.MAX_VALUE)
        );
        iLayout.setVerticalGroup(
            iLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 105, Short.MAX_VALUE)
        );

        add(i);
        i.setBounds(140, 80, 200, 105);

        sfondo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        sfondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/tnx/invoicex/gui/logoresize/sfondo.png"))); // NOI18N
        sfondo.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        sfondo.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        sfondo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sfondoMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sfondoMouseReleased(evt);
            }
        });
        sfondo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sfondoMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                sfondoMouseMoved(evt);
            }
        });
        add(sfondo);
        sfondo.setBounds(0, 0, 528, 295);
    }// </editor-fold>//GEN-END:initComponents

    private void iMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iMouseDragged
        mouseDragged(evt);
    }//GEN-LAST:event_iMouseDragged

    private void sfondoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sfondoMouseMoved
        mouseMove(evt);
    }//GEN-LAST:event_sfondoMouseMoved

    private void iMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iMouseMoved
        mouseMove(evt);
    }//GEN-LAST:event_iMouseMoved

    private void iMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iMousePressed
        mousePressed(evt);
    }//GEN-LAST:event_iMousePressed

    private void iMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iMouseReleased
        mouseReleased(evt);
    }//GEN-LAST:event_iMouseReleased

    private void sfondoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sfondoMousePressed
        mousePressed(evt);
    }//GEN-LAST:event_sfondoMousePressed

    private void sfondoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sfondoMouseReleased
        mouseReleased(evt);
    }//GEN-LAST:event_sfondoMouseReleased

    private void sfondoMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sfondoMouseDragged
        mouseDragged(evt);
    }//GEN-LAST:event_sfondoMouseDragged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public it.tnx.invoicex.gui.logoresize.ImageBox i;
    public javax.swing.JLabel sfondo;
    // End of variables declaration//GEN-END:variables

    private void mouseMove(MouseEvent evt) {
        if (resizing) {
            if (angolo == 1) {
                i.setLocation(evt.getX(), evt.getY());
            }
        } else {
            Point pi = i.getLocationOnScreen();
            Rectangle r1 = new Rectangle((int) (pi.getX() - 3), ((int) pi.getY() - 3), 6, 6);
            Rectangle r2 = new Rectangle((int) (pi.getX() + i.getWidth() - 3), ((int) pi.getY() - 3), 6, 6);
            Rectangle r3 = new Rectangle((int) (pi.getX() + i.getWidth() - 3), ((int) pi.getY() + i.getHeight() - 3), 6, 6);
            Rectangle r4 = new Rectangle((int) (pi.getX() - 3), ((int) pi.getY() + i.getHeight() - 3), 6, 6);
            Rectangle r0 = new Rectangle((int) (pi.getX()), ((int) pi.getY()), i.getWidth(), i.getHeight());
//            System.out.println(pointer.getLocation().x + ":" + pointer.getLocation().y + " - " + r1);
            PointerInfo pointer = MouseInfo.getPointerInfo();
            if (r1.contains(pointer.getLocation())) {
                setCursor(Cursor.getPredefinedCursor(Cursor.NW_RESIZE_CURSOR));
                angolo = 1;
            } else if (r2.contains(pointer.getLocation())) {
                setCursor(Cursor.getPredefinedCursor(Cursor.NE_RESIZE_CURSOR));
                angolo = 2;
            } else if (r3.contains(pointer.getLocation())) {
                setCursor(Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR));
                angolo = 3;
            } else if (r4.contains(pointer.getLocation())) {
                setCursor(Cursor.getPredefinedCursor(Cursor.SW_RESIZE_CURSOR));
                angolo = 4;
            } else if (r0.contains(pointer.getLocation())) {
                setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
                angolo = 0;
            } else {
                setCursor(Cursor.getDefaultCursor());
                angolo = -1;
            }
        }
    }

    private void mousePressed(MouseEvent evt) {
        System.out.println("start drag ? angolo=" + angolo + " resizing=" + resizing);
        PointerInfo pointer = MouseInfo.getPointerInfo();
        if (angolo >= 0) {
            System.out.println("start drag !!!");
            resizing = true;
            start_r_i_comp = i.getBounds();
            start_r_i = i.getBounds();
            start_r_i.setLocation(i.getLocationOnScreen().x, i.getLocationOnScreen().y);
            System.out.println("start_r_i = " + start_r_i);
            start_p_m = new Point(pointer.getLocation().x, pointer.getLocation().y);
            System.out.println("start_p_m = " + start_p_m);
        }
    }

    private void mouseReleased(MouseEvent evt) {
        if (resizing) {
            resizing = false;
            angolo = -1;
            System.out.println("stop resizing");
            System.out.println("resizing = " + resizing);
        }
    }

    private void mouseDragged(MouseEvent evt) {
//        System.out.println("dragging resizing = " + resizing + " evt " + pointer.getLocation().x + " " + pointer.getLocation().y);
        PointerInfo pointer = MouseInfo.getPointerInfo();
        if (resizing) {
            int limite_x = sfondo.getLocationOnScreen().x + off_x;
            int limite_x2 = sfondo.getLocationOnScreen().x + off_x + dim_x;
            int limite_y = sfondo.getLocationOnScreen().y + off_y;
            int limite_y2 = sfondo.getLocationOnScreen().y + off_y + dim_y;
            if (angolo == 1) {
                int diffx = (int) (pointer.getLocation().x - start_r_i.getX());
                int nuovox = (int) (start_r_i_comp.getX() + diffx);
                int nuovow = (int)start_r_i.getWidth() - diffx;

                int diffy = (int) (pointer.getLocation().y - start_r_i.getY());
                int nuovoy = (int) (start_r_i_comp.getY() + diffy);
                int nuovoh = (int)start_r_i.getHeight() - diffy;

                if (pointer.getLocation().x < limite_x) {
                    nuovox = off_x2;
                    nuovow = i.getWidth();
                }
                if (pointer.getLocation().y < limite_y) {
                    nuovoy = off_y2;
                    nuovoh = i.getHeight();
                }

                i.setLocation(nuovox, nuovoy);
                i.setSize(nuovow, nuovoh);
            } else if (angolo == 2) {
                //angolo in alto a destra
                int diffx = (int) (pointer.getLocation().x - start_p_m.getX());
                int nuovox = (int) (start_r_i_comp.getWidth() + diffx);
                int nuovow = (int) (start_r_i_comp.getWidth() + diffx);

                int diffy = (int) (pointer.getLocation().y - start_p_m.getY());
                int nuovoy = (int) (start_r_i_comp.getY() + diffy);
                int nuovoh = (int) (start_r_i.getHeight() - diffy);

                if (nuovoy < off_y2) {
                    nuovoy = off_y2;
                    nuovoh = i.getHeight();
                }
                i.setLocation((int) start_r_i_comp.getX(), nuovoy);
                if (i.getLocationOnScreen().x + nuovow > limite_x2) {
                    nuovow = limite_x2 - i.getLocationOnScreen().x;
                }
                i.setSize(nuovow, nuovoh);
            } else if (angolo == 3) {
                //angolo in basso a destra
                int diffx = (int) (pointer.getLocation().x - start_p_m.getX());
                int nuovow = (int) (start_r_i_comp.getWidth() + diffx);

                int diffy = (int) (pointer.getLocation().y - start_p_m.getY());
                int nuovoh = (int) (start_r_i_comp.getHeight() + diffy);

                if (i.getLocationOnScreen().y + nuovoh > limite_y2) {
                    nuovoh = limite_y2 - i.getLocationOnScreen().y;
                }
                if (i.getLocationOnScreen().x + nuovow > limite_x2) {
                    nuovow = limite_x2 - i.getLocationOnScreen().x;
                }
                i.setSize(nuovow, nuovoh);
            } else if (angolo == 4) {
                //angolo in basso a sx
                int diffy = (int) (pointer.getLocation().y - start_p_m.getY());
                int nuovoy = (int) (start_r_i_comp.getHeight() + diffy);
                int nuovoh = (int) (start_r_i_comp.getHeight() + diffy);

                int diffx = (int) (pointer.getLocation().x - start_p_m.getX());
                int nuovox = (int) (start_r_i_comp.getX() + diffx);
                int nuovow = (int) (start_r_i.getWidth() - diffx);

                if (nuovox < off_x2) {
                    nuovox = off_x2;
                    nuovow = i.getWidth();
                }
                i.setLocation(nuovox, (int) start_r_i_comp.getY());
                if (i.getLocationOnScreen().y + nuovoh > limite_y2) {
                    nuovoh = limite_y2 - i.getLocationOnScreen().y;
                }
                i.setSize(nuovow, nuovoh);
            } else if (angolo == 0) {
                //controllo angolo sinistro alto
                int diffxm = (int) (pointer.getLocation().x - start_p_m.x);
                int nuovoxm = (int) (start_r_i.getX() + diffxm);

                int diffym = (int) (pointer.getLocation().y - start_p_m.getY());
                int nuovoym = (int) (start_r_i.getY() + diffym);
                
                Point loc = new Point();
                Point loc2 = new Point();
                boolean nox = false;
                boolean noy = false;

                int diffx = (int) (pointer.getLocation().x - start_p_m.x);
                int nuovox = (int) (start_r_i_comp.getX() + diffx);
                int diffy = (int) (pointer.getLocation().y - start_p_m.y);
                int nuovoy = (int) (start_r_i_comp.getY() + diffy);
                loc2.setLocation(nuovox, nuovoy);

                if (nuovoxm < limite_x) {
                    loc.setLocation(off_x2, i.getLocation().y);
                    nox = true;
                }
                if (nuovoym < limite_y) {
                    loc.setLocation(i.getLocation().x, off_y2);
                    noy = true;
                }

                //controllo angolo destro basso
                limite_x = sfondo.getLocationOnScreen().x + off_x + (dim_x - i.getWidth());
                limite_y = sfondo.getLocationOnScreen().y + off_y + (dim_y - i.getHeight());

                diffxm = (int) (pointer.getLocation().x - start_p_m.x);
                nuovoxm = (int) (start_r_i.getX() + diffxm);

                diffym = (int) (pointer.getLocation().y - start_p_m.getY());
                nuovoym = (int) (start_r_i.getY() + diffym);

                System.out.println("limite_x " + limite_x + " diffxm " + diffxm + " nuovoxm " + nuovoxm);

                if (nuovoxm > limite_x) {
                    loc.setLocation(off_x2 + (dim_x-i.getWidth()), i.getLocation().y);
                    nox = true;
                }
                if (nuovoym > limite_y) {
                    loc.setLocation(i.getLocation().x, off_y2 + (dim_y - i.getHeight()));
                    noy = true;
                }

                System.out.println("nox " + nox + " noy " + noy + " loc " + loc + " loc2 " + loc2);

                if (nox) {
                    i.setLocation(loc.x, i.getLocation().y);
                } else {
                    i.setLocation(loc2.x, i.getLocation().y);
                }
                if (noy) {
                    i.setLocation(i.getLocation().x, loc.y);
                } else {
                    i.setLocation(i.getLocation().x, loc2.y);
                }
            }
        }
    }

    public Rectangle.Double getLogoBounds() {
        double x = 0;
        x = i.getLocation().x - off_x;
        x = x * 100d / dim_x;

        double w = 0;
        w = i.getWidth();
        w = w * 100d / dim_x;

        double y = 0;
        y = i.getLocation().y - off_y;
        y = y * 100d / dim_y;

        double h = 0;
        h = i.getHeight();
        h = h * 100d / dim_y;

        System.out.println("x " + x + " y " + y + " w " + w + " h " + h);
        Rectangle.Double r2 = new Rectangle.Double(x, y, w, h);
        return r2;
    }

    public void setLogo(String value) throws IOException {
        i.setLogo(value);
    }

    public void setLogo(InputStream value) throws IOException {
        i.setLogo(value);
    }
}
