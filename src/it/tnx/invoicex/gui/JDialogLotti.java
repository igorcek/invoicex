/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JDialogLotti.java
 *
 * Created on 5-gen-2010, 17.42.40
 */
package it.tnx.invoicex.gui;

import it.tnx.Db;
import it.tnx.commons.CastUtils;
import it.tnx.commons.DbUtils;
import it.tnx.commons.DebugUtils;
import it.tnx.commons.SwingUtils;
import it.tnx.commons.table.EditorUtils;
import it.tnx.invoicex.Magazzino;
import it.tnx.invoicex.data.Giacenza;
import java.awt.Component;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.text.JTextComponent;
import org.apache.commons.lang.StringUtils;

/**
 *
 * @author mceccarelli
 */
public class JDialogLotti extends javax.swing.JDialog {

    public boolean ret = false;
    String tipo /* C carica, S scarica*/;
    Double qta;
    String articolo;
    String tabella;
    Integer id;
    boolean inserimento = false;

    /** Creates new form JDialogLotti */
    public JDialogLotti(java.awt.Frame parent, boolean modal, boolean inserimento) {
        super(parent, modal);
        this.inserimento = inserimento;
        initComponents();
        tab.setSurrendersFocusOnKeystroke(true);
        tab.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);

        tab.getColumn("Quantita").setCellEditor( new EditorUtils.NumberEditor(new JTextField()) );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labmsg = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tab = new MyTable();
        conferma = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestione Lotti");

        labmsg.setText("...");

        tab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Lotto", "Quantita", "Giacenza"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tab.setRowHeight(20);
        jScrollPane1.setViewportView(tab);
        tab.getColumnModel().getColumn(0).setPreferredWidth(200);
        tab.getColumnModel().getColumn(1).setPreferredWidth(50);
        tab.getColumnModel().getColumn(2).setPreferredWidth(50);

        conferma.setText("Conferma");
        conferma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confermaActionPerformed(evt);
            }
        });

        jButton2.setText("Annulla");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                    .add(labmsg)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jButton2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(conferma)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(labmsg)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(conferma)
                    .add(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confermaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confermaActionPerformed
        try {
            //controlli...
            //almeno un codice lotto
            boolean ok = true;

            int contalotti = 0;
            for (int i = 0; i < tab.getRowCount(); i++) {
                Object lotto = tab.getValueAt(i, 0);
                if (lotto != null && lotto.toString().trim().length() > 0) {
                    contalotti++;
                }
            }
            if (contalotti == 0) {
                if (!SwingUtils.showYesNoMessage(this, "Sembra che non hai inserito nessun lotto, confermi comunque ?")) {
                    ok = false;
                }
            }

            if (ok) {
                if (tabella.equals("movimenti_magazzino")) {
                    //riprendo movimento e lo splitto per i lotti
                    ArrayList<Map> list = DbUtils.getListMap(Db.getConn(), "select * from " + tabella + " where id = " + id);
                    //                DebugUtils.dump(list);
                    System.out.println("id da rimuovere = " + list.get(0).get("id"));
                    String sql = "delete from " + tabella + " where id = " + list.get(0).get("id");
                    DbUtils.tryExecQuery(Db.getConn(), sql);
                    for (int i = 0; i < tab.getRowCount(); i++) {
                        Object lotto = tab.getValueAt(i, 0);
//                        if (lotto != null && lotto.toString().trim().length() > 0 && tab.getValueAt(i, 1) != null && (Double)tab.getValueAt(i, 1) > 0) {
                        if (tab.getValueAt(i, 1) != null && (Double)tab.getValueAt(i, 1) > 0) {
                            System.out.println("aggiungere lotto:" + lotto);

                            HashMap m = (HashMap) list.get(0);
                            m.put("lotto", tab.getValueAt(i, 0));
                            m.put("quantita", tab.getValueAt(i, 1));
                            m.remove("id");
                            sql = "insert into " + tabella + " set " + DbUtils.prepareSqlFromMap(m);
                            System.out.println("sql:" + sql);
                            DbUtils.tryExecQuery(Db.getConn(), sql);
                        }
                    }
                } else {
                    //rimuovo eventuali precedenti
                    String sql = "delete from " + tabella + " where id_padre = " + id;
                    System.out.println("elimino i records precedenti da " + tabella + " sql:" + " esito:" + DbUtils.tryExecQuery(Db.getConn(), sql));
                    //inserisco
//                    List<HashMap> list = DbUtils.getListMap(Db.getConn(), "select * from " + tabella + " where id = " + id);
//                    System.out.println("recs:" + list.size());
//                    HashMap rectab = list.get(0);
                    for (int i = 0; i < tab.getRowCount(); i++) {
                        Object lotto = tab.getValueAt(i, 0);
//                        if (lotto != null && lotto.toString().trim().length() > 0 && tab.getValueAt(i, 1) != null && (Double)tab.getValueAt(i, 1) > 0) {
                        if (tab.getValueAt(i, 1) != null && (Double)tab.getValueAt(i, 1) > 0) {
                            System.out.println("aggiungere lotto:" + lotto);

                            HashMap r = new HashMap();
                            r.put("id_padre", id);
                            r.put("codice_articolo", articolo);
                            r.put("lotto", lotto);
                            r.put("qta", tab.getValueAt(i, 1));
                            sql = "insert into " + tabella + " set " + DbUtils.prepareSqlFromMap(r);
                            System.out.println("aggiungo i lotti:" + sql);
                            DbUtils.tryExecQuery(Db.getConn(), sql);
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        ret = true;
        dispose();
    }//GEN-LAST:event_confermaActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton conferma;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel labmsg;
    private javax.swing.JTable tab;
    // End of variables declaration//GEN-END:variables

    public void init(String tipo /* C carica, S scarica*/, Double qta, String articolo, String tabella, Integer id, String lotto_iniziale) {
        this.tipo = tipo;
        this.qta = qta;
        this.articolo = articolo;
        this.tabella = tabella;
        this.id = id;

        if (tipo.equals("S")) {
            labmsg.setText("Indica i lotti e le quantita da scaricare");
        } else {
            labmsg.setText("Indica i lotti e le quantita da caricare");
        }
        labmsg.setText(labmsg.getText() + " dell'articolo " + articolo);

//        if (tipo.equals("C")) {
//            if (lotto_iniziale != null) {
//                tab.setValueAt(lotto_iniziale, 0, 0);
//            }
//            tab.setValueAt(qta, 0, 1);
//            boolean success = tab.editCellAt(0, 0);
//            if (success) {
//                tab.changeSelection(0, 0, false, false);
//            }
//        } else {
            if (inserimento) {
                ArrayList<Giacenza> giacenza = Magazzino.getGiacenza(false, articolo, null);
                DebugUtils.dump(giacenza);
                int row = 0;
                if (tipo.equals("S")) {
                    for (Giacenza g : giacenza) {
                        double qtan = qta;
                        if (g.getGiacenza() <= 0) {
                            qtan = 0;
                        } else if (qtan > g.getGiacenza()) {
                            qtan = g.getGiacenza();
                        }
                        qta -= qtan;
                        chekrows(row);
                        tab.setValueAt(g.getLotto(), row, 0);
                        tab.setValueAt(qtan, row, 1);
                        tab.setValueAt(g.getGiacenza(), row, 2);
                        row++;
                    }
                    if (qta > 0) {
                        //se presente trovo riga con lotto vuoto
                        if (row > 0) {
                            for (int i = 0; i <= row; i++) {
                                if (StringUtils.isBlank(CastUtils.toString(tab.getValueAt(i, 0)))) {
                                    row = i;
                                    break;
                                }
                            }
                        }
                        chekrows(row);
                        tab.setValueAt("", row, 0);
                        tab.setValueAt(qta, row, 1);
                        tab.setValueAt(0, row, 2);
                    }
                } else {
                    //in carico è inutile far vedere gli altri lotti
                    chekrows(row);
                    tab.setValueAt("", row, 0);
                    tab.setValueAt(qta, row, 1);                    
                }
            } else {
                String sql = null;
                if (tabella.equalsIgnoreCase("movimenti_magazzino")) {
                    sql = "select * from " + tabella + " where id = " + id;
                } else {
                    sql = "select * from " + tabella + " where id_padre = " + id;
                }
                System.out.println("sql = " + sql);
                try {
                    if (tipo.equals("S")) {
                        ArrayList<Giacenza> giacenza = Magazzino.getGiacenza(false, articolo, null);
                        DebugUtils.dump(giacenza);

                        HashMap mlotti = DbUtils.getListMapMap(Db.getConn(), sql, "lotto");
                        DebugUtils.dump(mlotti);
                        Iterator ilotti = mlotti.keySet().iterator();
                        int row = 0;
                        if (mlotti.keySet().isEmpty()) {
                            //vuoto
                            chekrows(row);
                            tab.setValueAt("", row, 0);
                            tab.setValueAt(CastUtils.toDouble0(qta), row, 1);
                            for (Giacenza g : giacenza) {
                                System.out.println("g.getLotto = " + g.getLotto());
                                if (g.getLotto() == null || g.getLotto().equals("")) {
                                    tab.setValueAt(g.getGiacenza(), row, 2);
                                    break;
                                }
                            }
                            row++;
                        } else {
                            while (ilotti.hasNext()) {
                                String lotto = (String) ilotti.next();
                                HashMap rlotto = (HashMap) mlotti.get(lotto);
                                chekrows(row);
                                tab.setValueAt(lotto, row, 0);
                                if (tabella.equalsIgnoreCase("movimenti_magazzino")) {
                                    tab.setValueAt(CastUtils.toDouble0(rlotto.get("quantita")), row, 1);
                                } else {
                                    tab.setValueAt(CastUtils.toDouble0(rlotto.get("qta")), row, 1);
                                }
                                for (Giacenza g : giacenza) {
                                    if (g.getLotto().equalsIgnoreCase(lotto)) {
                                        tab.setValueAt(g.getGiacenza(), row, 2);
                                        break;
                                    }
                                }
                                row++;
                            }
                        }

                        for (Giacenza g : giacenza) {
                            if (!mlotti.containsKey(g.getLotto())) {
                                if (!(StringUtils.isBlank(g.getLotto()) && mlotti.keySet().isEmpty())) {
                                    chekrows(row);
                                    tab.setValueAt(g.getLotto(), row, 0);
                                    tab.setValueAt(0d, row, 1);
                                    tab.setValueAt(g.getGiacenza(), row, 2);
                                    row++;
                                }
                            }
                        }
                    } else {
                        //in carico presento solo la riga già presente
                        HashMap mlotti = DbUtils.getListMapMap(Db.getConn(), sql, "lotto");
                        DebugUtils.dump(mlotti);
                        Iterator ilotti = mlotti.keySet().iterator();
                        int row = 0;
                        if (mlotti.keySet().isEmpty()) {
                            //vuoto
                            chekrows(row);
                            tab.setValueAt("", row, 0);
                            tab.setValueAt(CastUtils.toDouble0(qta), row, 1);
                            row++;
                        } else {
                            while (ilotti.hasNext()) {
                                String lotto = (String) ilotti.next();
                                HashMap rlotto = (HashMap) mlotti.get(lotto);
                                chekrows(row);
                                tab.setValueAt(lotto, row, 0);
                                if (tabella.equalsIgnoreCase("movimenti_magazzino")) {
                                    tab.setValueAt(CastUtils.toDouble0(rlotto.get("quantita")), row, 1);
                                } else {
                                    tab.setValueAt(CastUtils.toDouble0(rlotto.get("qta")), row, 1);
                                }
                                row++;
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
//        }
    }
    
    private void chekrows(int row) {
        if (tab.getRowCount() <= row) {
            ((DefaultTableModel)tab.getModel()).setRowCount(row + 1);
        }
    }

    public ArrayList<String> getLotti() {
        ArrayList lotti = new ArrayList();
        for (int row = 0; row < tab.getRowCount(); row++) {
            if (tab.getValueAt(row, 0) != null && CastUtils.toDouble0(tab.getValueAt(row, 1)) > 0) {
                lotti.add((String)tab.getValueAt(row, 0));
            }
        }
        return lotti;
    }
    public ArrayList<Double> getLottiQta() {
        ArrayList lotti = new ArrayList();
        for (int row = 0; row < tab.getRowCount(); row++) {
            if (tab.getValueAt(row, 0) != null && CastUtils.toDouble0(tab.getValueAt(row, 1)) > 0) {
                lotti.add(CastUtils.toDouble0(tab.getValueAt(row, 1)));
            }
        }
        return lotti;
    }    
}

class MyTable extends JTable {
//  Place cell in edit mode when it 'gains focus'

    public void changeSelection(
            int row, int column, boolean toggle, boolean extend) {
        super.changeSelection(row, column, toggle, extend);

        if (editCellAt(row, column)) {
            getEditorComponent().requestFocusInWindow();
        }
    }

    //  Select the text when the cell starts editing
    //  a) text will be replaced when you start typing in a cell
    //  b) text will be selected when you use F2 to start editing
    //  c) text will be selected when double clicking to start editing
    public boolean editCellAt(int row, int column, EventObject e) {
        boolean result = super.editCellAt(row, column, e);
        final Component editor = getEditorComponent();

        if (editor != null && editor instanceof JTextComponent) {
            if (e == null) {
                ((JTextComponent) editor).selectAll();
            } else {
                SwingUtilities.invokeLater(new Runnable() {

                    public void run() {
                        ((JTextComponent) editor).selectAll();
                    }
                });
            }
        }

        return result;
    }

    //  Select the text when the cell starts editing
    //  a) text will be replaced when you start typing in a cell
    //  b) text will be selected when you use F2 to start editing
    //  c) caret is placed at end of text when double clicking to start editing
    public Component prepareEditor(
            TableCellEditor editor, int row, int column) {
        Component c = super.prepareEditor(editor, row, column);

        if (c instanceof JTextComponent) {
            System.out.println("prepare " + ((JTextField) c).getText());
            ((JTextField) c).selectAll();
        }

        return c;
    }
}
