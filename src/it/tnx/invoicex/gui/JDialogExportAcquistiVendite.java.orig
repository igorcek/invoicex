/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JDialogStampaArticoli.java
 *
 * Created on 21-nov-2008, 9.06.21
 */
package it.tnx.invoicex.gui;

import it.tnx.Db;
import gestioneFatture.*;
import it.tnx.commons.DbUtils;
import it.tnx.commons.KeyValuePair;
import it.tnx.commons.SwingUtils;
import it.tnx.dbeans.JTableDb;
import it.tnx.dbeans.pdfPrint.PrintSimpleTable;
import it.tnx.importExportAscii.ReadyTec;
import it.tnx.invoicex.BirraPeroni;
import java.io.File;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;

/**
 *
 * @author mceccarelli
 */
public class JDialogExportAcquistiVendite extends javax.swing.JDialog {

    private JTableDb griglia;

    /** Creates new form JDialogStampaArticoli */
    public JDialogExportAcquistiVendite(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        dal.setFormats(new SimpleDateFormat("dd/MM/yyyy"));
        al.setFormats(new SimpleDateFormat("dd/MM/yyyy"));

        if (main.pluginScontrini) {
            tipo.addItem("Vendita solo Fatture");
            tipo.addItem("Vendita solo Scontrini");
        }

//0 Vendita (Fatture di Vendita)
//1 Acquisti (Fatture di Acquisto)
//2 Preventivi/Ordini
//3 Vendita solo Fatture
//4 Vendita solo Scontrini

//        Vector v = new Vector();
//        v.add(new KeyValuePair("codice", "codice"));
//        v.add(new KeyValuePair("descrizione", "descrizione"));
//        SwingUtils.initJComboFromKVList(ordine, v);
//
        comCliente.dbAddElement("<tutti i clienti>", "*");
        comCliente.dbOpenList(Db.getConn(), "select ragione_sociale, codice from clie_forn where tipo = 'C' or tipo = 'E' order by ragione_sociale ", "*", false);

        comFornitore.dbAddElement("<tutti i fornitori>", "*");
        comFornitore.dbOpenList(Db.getConn(), "select ragione_sociale, codice from clie_forn where tipo = 'F' or tipo = 'E' order by ragione_sociale", "*", false);

        comArticolo.dbAddElement("<tutti gli articoli>", "*");
        comArticolo.dbOpenList(Db.getConn(), "select descrizione, codice from articoli order by descrizione", "*", false);

        Vector v = new Vector();
        v.add(new KeyValuePair("pdf", "PDF"));
        v.add(new KeyValuePair("html", "HTML"));
        v.add(new KeyValuePair("xls", "EXCEL"));
        v.add(new KeyValuePair("csv", "CSV"));
        v.add(new KeyValuePair("rea", "Tracciato Readytec"));
        if (main.getPersonalContain("peroni")) {
            v.add(new KeyValuePair("peroni", "Tracciato Birra Peroni"));
        }
        SwingUtils.initJComboFromKVList(formato, v);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stampa = new javax.swing.JButton();
        annulla = new javax.swing.JButton();
        tipo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        formato = new javax.swing.JComboBox();
        dal = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        al = new org.jdesktop.swingx.JXDatePicker();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        comCliente = new tnxbeans.tnxComboField();
        jLabel7 = new javax.swing.JLabel();
        comFornitore = new tnxbeans.tnxComboField();
        jLabel2 = new javax.swing.JLabel();
        comArticolo = new tnxbeans.tnxComboField();
        raggruppa = new javax.swing.JCheckBox();
        cheShowRef = new javax.swing.JCheckBox();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export Acquisti/Vendite");
        setMinimumSize(new java.awt.Dimension(412, 215));

        stampa.setFont(stampa.getFont().deriveFont(stampa.getFont().getStyle() | java.awt.Font.BOLD));
        stampa.setText("Esporta");
        stampa.addActionListener(formListener);

        annulla.setText("Annulla");
        annulla.addActionListener(formListener);

        tipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Vendita (Fatture di Vendita)", "Acquisti (Fatture di Acquisto)", "DDT di Vendita", "DDT di Acquisto", "Preventivi/Ordini di Vendita", "Preventivi/Ordini di Acquisto" }));
        tipo.addActionListener(formListener);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Origine");
        jLabel1.setPreferredSize(new java.awt.Dimension(80, 14));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Formato Stampa");
        jLabel5.setPreferredSize(new java.awt.Dimension(80, 14));

        formato.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        formato.addActionListener(formListener);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Dal");
        jLabel3.setPreferredSize(new java.awt.Dimension(80, 14));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Al");
        jLabel4.setPreferredSize(new java.awt.Dimension(80, 14));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Cliente");
        jLabel6.setPreferredSize(new java.awt.Dimension(80, 14));

        comCliente.setDbDescCampo("");
        comCliente.setDbNomeCampo("");
        comCliente.setDbTipoCampo("");
        comCliente.setDbTrovaMentreScrive(true);
        comCliente.addItemListener(formListener);
        comCliente.addFocusListener(formListener);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Fornitore");
        jLabel7.setPreferredSize(new java.awt.Dimension(80, 14));

        comFornitore.setDbDescCampo("");
        comFornitore.setDbNomeCampo("");
        comFornitore.setDbTipoCampo("");
        comFornitore.setDbTrovaMentreScrive(true);
        comFornitore.addItemListener(formListener);
        comFornitore.addFocusListener(formListener);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Articolo");

        comArticolo.setDbTrovaMentreScrive(true);
        comArticolo.setMaximumSize(new java.awt.Dimension(300, 32767));

        raggruppa.setText("Raggruppa per documento");
        raggruppa.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        cheShowRef.setText("Visualizza Riferimento Documenti");
        cheShowRef.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tipo, 0, 350, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(annulla)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(stampa))
                    .add(layout.createSequentialGroup()
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(comCliente, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(comFornitore, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                            .add(comArticolo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 350, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(raggruppa)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(cheShowRef))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, dal, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(formato, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(al, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(tipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(comCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jLabel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(comFornitore, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(comArticolo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(dal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(al, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(12, 12, 12)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(formato, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(raggruppa)
                    .add(cheShowRef))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 7, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(stampa)
                    .add(annulla))
                .addContainerGap())
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, java.awt.event.ItemListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == stampa) {
                JDialogExportAcquistiVendite.this.stampaActionPerformed(evt);
            }
            else if (evt.getSource() == annulla) {
                JDialogExportAcquistiVendite.this.annullaActionPerformed(evt);
            }
            else if (evt.getSource() == tipo) {
                JDialogExportAcquistiVendite.this.tipoActionPerformed(evt);
            }
            else if (evt.getSource() == formato) {
                JDialogExportAcquistiVendite.this.formatoActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == comCliente) {
                JDialogExportAcquistiVendite.this.comClienteFocusLost(evt);
            }
            else if (evt.getSource() == comFornitore) {
                JDialogExportAcquistiVendite.this.comFornitoreFocusLost(evt);
            }
        }

        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            if (evt.getSource() == comCliente) {
                JDialogExportAcquistiVendite.this.comClienteItemStateChanged(evt);
            }
            else if (evt.getSource() == comFornitore) {
                JDialogExportAcquistiVendite.this.comFornitoreItemStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void stampaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stampaActionPerformed
        //stampa
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        if (((KeyValuePair) this.formato.getSelectedItem()).key.toString().equalsIgnoreCase("rea")) {
            if (this.tipo.getSelectedItem().equals("Vendita (Fatture di Vendita)")) {
                String query = "SELECT t.* FROM test_fatt t left join righ_fatt r ON r.id_padre = t.id WHERE tipo_fattura != 7";
                if (this.comCliente.getSelectedIndex() > 0) query += " and t.cliente = '" + this.comCliente.getSelectedKey() + "'";
                if (this.comArticolo.getSelectedIndex() > 0) query += " and r.codice_articolo = " + Db.pc(this.comArticolo.getSelectedKey(), 12);
                if (this.dal.getDate() != null) query += " and t.data >= " + DbUtils.pc2(this.dal.getDate(), 91);
                if (this.al.getDate() != null)  query += " and t.data <= " + DbUtils.pc2(this.al.getDate(), 91);
                if (this.comFornitore.getSelectedIndex() > 0)  query += " and t.fornitore = '" + this.comCliente.getSelectedKey() + "'";

                query += " group by t.id";

                ResultSet rs = Db.openResultSet(query);
                ReadyTec rt = new ReadyTec(rs, this);
                rt.start();
            } else {
                SwingUtils.showErrorMessage(this, "Il tracciato Readytec è disponibile solamente per fatture di vendita", "Errore");
            }
        } else {
            int[] headerWidth = null;

            String sql = "select ";

            List lista_fatture_v = new ArrayList();
            lista_fatture_v.add("Vendita (Fatture di Vendita)");
            lista_fatture_v.add("Vendita solo Fatture");
            lista_fatture_v.add("Vendita solo Scontrini");

            if (lista_fatture_v.contains(this.tipo.getSelectedItem())) {
                if (!this.raggruppa.isSelected()) {
                    if (cheShowRef.isSelected()) {
                        headerWidth = new int[]{5, 12, 5, 4, 4, 12, 6, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};
                    } else {
                        headerWidth = new int[]{5, 15, 5, 4, 4, 15, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};
                    }
                    sql = sql + " r.codice_articolo, ";
                    sql = sql + " r.descrizione, ";
                    sql = sql + " CONCAT(t.serie, t.numero) as numero_doc, ";
                    sql = sql + " r.riga, ";
                    sql = sql + " t.data, ";
                    sql = sql + " c.ragione_sociale, ";
                    sql = sql + " t.spese_trasporto, ";
                    sql = sql + " t.spese_incasso, ";
                    if (cheShowRef.isSelected()) {
                        sql = sql + " t.riferimento, ";
                    }
                    sql = sql + " r.um, ";
                    sql = sql + " r.quantita, ";
                    sql = sql + " r.prezzo as 'prezzo unitario', ";
                    sql = sql + " r.prezzo * r.quantita as importo, ";
                    sql = sql + " r.sconto1 as 'sconto riga 1', ";
                    sql = sql + " r.sconto2 as 'sconto riga 2', ";
                    sql = sql + " t.sconto1 as 'sconto testata 1', ";
                    sql = sql + " t.sconto2 as 'sconto testata 2', ";
                    sql = sql + " t.sconto3 as 'sconto testata 3' ";
                    sql = sql + " , round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) as 'importo imponibile' ";
                    sql = sql + " , round(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale, 2) as 'importo iva' ";
                    sql = sql + " , round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) + round((round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale),2) as 'importo totale riga' ";
                } else {
                    if (cheShowRef.isSelected()) {
                        headerWidth = new int[]{5, 12, 5, 4, 4, 12, 6, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};
                    } else {
                        headerWidth = new int[]{5, 15, 5, 4, 4, 15, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};
                    }

                    sql = sql + " r.codice_articolo, ";
                    sql = sql + " r.descrizione, ";
                    sql = sql + " CONCAT(t.serie, t.numero) as numero_doc, ";
                    sql = sql + " r.riga, ";
                    sql = sql + " t.data, ";
                    sql = sql + " c.ragione_sociale, ";
                    sql = sql + " t.spese_trasporto, ";
                    sql = sql + " t.spese_incasso, ";
                    if (cheShowRef.isSelected()) {
                        sql = sql + " t.riferimento, ";
                    }
                    sql = sql + " r.um, ";
                    sql = sql + " sum(r.quantita), ";
                    sql = sql + " sum(r.prezzo) as 'prezzo unitario', ";
                    sql = sql + " sum(r.prezzo * r.quantita) as importo, ";
                    sql = sql + " sum(r.sconto1) as 'sconto riga 1', ";
                    sql = sql + " sum(r.sconto2) as 'sconto riga 2', ";
                    sql = sql + " sum(t.sconto1) as 'sconto testata 1', ";
                    sql = sql + " sum(t.sconto2) as 'sconto testata 2', ";
                    sql = sql + " sum(t.sconto3) as 'sconto testata 3' ";
                    sql = sql + " , sum(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2)) as 'importo imponibile' ";
                    sql = sql + " , sum(round(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale, 2)) as 'importo iva' ";
                    sql = sql + " , sum(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) + round((round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale),2))  + IFNULL(t.spese_trasporto,0) + IFNULL(t.spese_incasso,0) as 'importo totale' ";
                }
                sql = sql + " from test_fatt t left join righ_fatt r on t.id = r.id_padre";
                sql = sql + " left join clie_forn c on t.cliente = c.codice";
                sql = sql + " left join codici_iva i on iva = i.codice";
            } else if ((this.tipo.getSelectedItem().equals("DDT di Vendita")) || (this.tipo.getSelectedItem().equals("DDT di Acquisto"))) {
                if (!this.raggruppa.isSelected()) {
                    if (cheShowRef.isSelected() && this.tipo.getSelectedItem().equals("DDT di Vendita")) {
                        headerWidth = new int[]{5, 12, 5, 4, 4, 12, 6, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};
                    } else {
                        headerWidth = new int[]{5, 15, 5, 4, 4, 15, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};
                    }

                    sql = sql + " r.codice_articolo, ";
                    sql = sql + " r.descrizione, ";
                    sql = sql + " CONCAT(t.serie, t.numero) as numero_doc, ";
                    sql = sql + " r.riga, ";
                    sql = sql + " t.data, ";
                    sql = sql + " c.ragione_sociale, ";
                    sql = sql + " t.spese_trasporto, ";
                    sql = sql + " t.spese_incasso, ";
                    if (cheShowRef.isSelected() && this.tipo.getSelectedItem().equals("DDT di Vendita")) {
                        sql = sql + " t.riferimento, ";
                    }
                    sql = sql + " r.um, ";
                    sql = sql + " r.quantita, ";
                    sql = sql + " r.prezzo as 'prezzo unitario', ";
                    sql = sql + " r.prezzo * r.quantita as importo, ";
                    sql = sql + " r.sconto1 as 'sconto riga 1', ";
                    sql = sql + " r.sconto2 as 'sconto riga 2', ";
                    sql = sql + " t.sconto1 as 'sconto testata 1', ";
                    sql = sql + " t.sconto2 as 'sconto testata 2', ";
                    sql = sql + " t.sconto3 as 'sconto testata 3' ";
                    sql = sql + " , round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) as 'importo imponibile' ";
                    sql = sql + " , round(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale, 2) as 'importo iva' ";
                    sql = sql + " , round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) + round((round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale),2) as 'importo totale riga' ";
                } else {
                    if (cheShowRef.isSelected() && this.tipo.getSelectedItem().equals("DDT di Vendita")) {
                        headerWidth = new int[]{5, 12, 5, 4, 4, 12, 6, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};
                    } else {
                        headerWidth = new int[]{5, 15, 5, 4, 4, 15, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};
                    }

                    sql = sql + " r.codice_articolo, ";
                    sql = sql + " r.descrizione, ";
                    sql = sql + " CONCAT(t.serie, t.numero) as numero_doc, ";
                    sql = sql + " r.riga, ";
                    sql = sql + " t.data, ";
                    sql = sql + " c.ragione_sociale, ";
                    sql = sql + " t.spese_trasporto, ";
                    sql = sql + " t.spese_incasso, ";
                    if (cheShowRef.isSelected() && this.tipo.getSelectedItem().equals("DDT di Vendita")) {
                        sql = sql + " t.riferimento, ";
                    }
                    sql = sql + " r.um, ";
                    sql = sql + " sum(r.quantita), ";
                    sql = sql + " sum(r.prezzo) as 'prezzo unitario', ";
                    sql = sql + " sum(r.prezzo * r.quantita) as importo, ";
                    sql = sql + " sum(r.sconto1) as 'sconto riga 1', ";
                    sql = sql + " sum(r.sconto2) as 'sconto riga 2', ";
                    sql = sql + " sum(t.sconto1) as 'sconto testata 1', ";
                    sql = sql + " sum(t.sconto2) as 'sconto testata 2', ";
                    sql = sql + " sum(t.sconto3) as 'sconto testata 3' ";
                    sql = sql + " , sum(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2)) as 'importo imponibile' ";
                    sql = sql + " , sum(round(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale, 2)) as 'importo iva' ";
                    sql = sql + " , sum(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) + round((round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale),2))  + IFNULL(t.spese_trasporto,0) + IFNULL(t.spese_incasso,0) as 'importo totale' ";
                }
                if (this.tipo.getSelectedItem().equals("DDT di Vendita")) {
                    sql = sql + " from test_ddt t left join righ_ddt r on t.id = r.id_padre";
                    sql = sql + " left join clie_forn c on t.cliente = c.codice";
                } else {
                    sql = sql + " from test_ddt_acquisto t left join righ_ddt_acquisto r on t.id = r.id_padre";
                    sql = sql + " left join clie_forn c on t.fornitore = c.codice";
                }
                sql = sql + " left join codici_iva i on r.iva = i.codice";
            } else if ((this.tipo.getSelectedItem().equals("Preventivi/Ordini di Vendita")) || (this.tipo.getSelectedItem().equals("Preventivi/Ordini di Acquisto"))) {
                if (!this.raggruppa.isSelected()) {
                    if (cheShowRef.isSelected() && this.tipo.getSelectedItem().equals("Preventivi/Ordini di Vendita")) {
                        headerWidth = new int[]{5, 12, 5, 4, 4, 12, 6, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};
                    } else {
                        headerWidth = new int[]{5, 15, 5, 4, 4, 15, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};
                    }

                    sql = sql + " r.codice_articolo, ";
                    sql = sql + " r.descrizione, ";
                    sql = sql + " CONCAT(t.serie, t.numero) as numero_doc, ";
                    sql = sql + " r.riga, ";
                    sql = sql + " t.data, ";
                    sql = sql + " c.ragione_sociale, ";
                    sql = sql + " t.spese_trasporto, ";
                    sql = sql + " t.spese_incasso, ";
                    if (cheShowRef.isSelected() && this.tipo.getSelectedItem().equals("Preventivi/Ordini di Vendita")) {
                        sql = sql + " t.riferimento, ";
                    }
                    sql = sql + " r.um, ";
                    sql = sql + " r.quantita, ";
                    sql = sql + " r.prezzo as 'prezzo unitario', ";
                    sql = sql + " r.prezzo * r.quantita as importo, ";
                    sql = sql + " r.sconto1 as 'sconto riga 1', ";
                    sql = sql + " r.sconto2 as 'sconto riga 2', ";
                    sql = sql + " t.sconto1 as 'sconto testata 1', ";
                    sql = sql + " t.sconto2 as 'sconto testata 2', ";
                    sql = sql + " t.sconto3 as 'sconto testata 3' ";
                    sql = sql + " , round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) as 'importo imponibile' ";
                    sql = sql + " , round(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale, 2) as 'importo iva' ";
                    sql = sql + " , round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) + round((round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale),2) as 'importo totale riga' ";
                } else {
                    if (cheShowRef.isSelected() && this.tipo.getSelectedItem().equals("Preventivi/Ordini di Vendita")) {
                        headerWidth = new int[]{5, 12, 5, 4, 4, 12, 6, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};
                    } else {
                        headerWidth = new int[]{5, 15, 5, 4, 4, 15, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};
                    }

                    sql = sql + " r.codice_articolo, ";
                    sql = sql + " r.descrizione, ";
                    sql = sql + " CONCAT(t.serie, t.numero) as numero_doc, ";
                    sql = sql + " r.riga, ";
                    sql = sql + " t.data, ";
                    sql = sql + " c.ragione_sociale, ";
                    sql = sql + " t.spese_trasporto, ";
                    sql = sql + " t.spese_incasso, ";
                    if (cheShowRef.isSelected() && this.tipo.getSelectedItem().equals("Preventivi/Ordini di Vendita")) {
                        sql = sql + " t.riferimento, ";
                    }
                    sql = sql + " r.um, ";
                    sql = sql + " sum(r.quantita), ";
                    sql = sql + " sum(r.prezzo) as 'prezzo unitario', ";
                    sql = sql + " sum(r.prezzo * r.quantita) as importo, ";
                    sql = sql + " sum(r.sconto1) as 'sconto riga 1', ";
                    sql = sql + " sum(r.sconto2) as 'sconto riga 2', ";
                    sql = sql + " sum(t.sconto1) as 'sconto testata 1', ";
                    sql = sql + " sum(t.sconto2) as 'sconto testata 2', ";
                    sql = sql + " sum(t.sconto3) as 'sconto testata 3' ";
                    sql = sql + " , sum(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2)) as 'importo imponibile' ";
                    sql = sql + " , sum(round(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale, 2)) as 'importo iva' ";
                    sql = sql + " , sum(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) + round((round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale),2))  + IFNULL(t.spese_trasporto,0) + IFNULL(t.spese_incasso,0) as 'importo totale' ";
                }
                if (this.tipo.getSelectedItem().equals("Preventivi/Ordini di Vendita")) {
                    sql = sql + " from test_ordi t left join righ_ordi r on t.serie = r.serie and t.numero = r.numero and t.anno = r.anno";
                    sql = sql + " left join clie_forn c on t.cliente = c.codice";
                } else {
                    sql = sql + " from test_ordi_acquisto t left join righ_ordi_acquisto r on t.serie = r.serie and t.numero = r.numero and t.anno = r.anno";
                    sql = sql + " left join clie_forn c on t.fornitore = c.codice";
                }
                sql = sql + " left join codici_iva i on iva = i.codice";
            } else if (this.tipo.getSelectedItem().equals("Acquisti (Fatture di Acquisto)")) {
                if (!this.raggruppa.isSelected()) {
                    headerWidth = new int[]{5, 15, 5, 4, 4, 15, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};


                    sql = sql + " r.codice_articolo, ";
                    sql = sql + " r.descrizione, ";
                    sql = sql + " CONCAT(t.serie_doc, t.numero_doc) as numero_doc, ";
                    sql = sql + " r.riga, ";
                    sql = sql + " t.data, ";
                    sql = sql + " c.ragione_sociale, ";
                    sql = sql + " t.spese_trasporto, ";
                    sql = sql + " t.spese_incasso, ";
                    sql = sql + " r.um, ";
                    sql = sql + " r.quantita, ";
                    sql = sql + " r.prezzo as 'prezzo unitario', ";
                    sql = sql + " r.prezzo * r.quantita as importo, ";
                    sql = sql + " r.sconto1 as 'sconto riga 1', ";
                    sql = sql + " r.sconto2 as 'sconto riga 2', ";
                    sql = sql + " t.sconto1 as 'sconto testata 1', ";
                    sql = sql + " t.sconto2 as 'sconto testata 2', ";
                    sql = sql + " t.sconto3 as 'sconto testata 3' ";
                    sql = sql + " , round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) as 'importo imponibile' ";
                    sql = sql + " , round(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale, 2) as 'importo iva' ";
                    sql = sql + " , round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) + round((round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale),2) as 'importo totale riga' ";
                } else {
                    if (cheShowRef.isSelected()) {
                        headerWidth = new int[]{5, 12, 5, 4, 4, 12, 6, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};
                    } else {
                        headerWidth = new int[]{5, 15, 5, 4, 4, 15, 6, 6, 3, 4, 6, 6, 3, 3, 3, 3, 3, 6, 6, 6};
                    }

                    sql = sql + " r.codice_articolo, ";
                    sql = sql + " r.descrizione, ";
                    sql = sql + " CONCAT(t.serie_doc, t.numero_doc) as numero_doc, ";
                    sql = sql + " r.riga, ";
                    sql = sql + " t.data, ";
                    sql = sql + " c.ragione_sociale, ";
                    sql = sql + " t.spese_trasporto, ";
                    sql = sql + " t.spese_incasso, ";
                    if (cheShowRef.isSelected()) {
                        sql = sql + " t.riferimento, ";
                    }
                    sql = sql + " r.um, ";
                    sql = sql + " sum(r.quantita), ";
                    sql = sql + " sum(r.prezzo) as 'prezzo unitario', ";
                    sql = sql + " sum(r.prezzo * r.quantita) as importo, ";
                    sql = sql + " sum(r.sconto1) as 'sconto riga 1', ";
                    sql = sql + " sum(r.sconto2) as 'sconto riga 2', ";
                    sql = sql + " sum(t.sconto1) as 'sconto testata 1', ";
                    sql = sql + " sum(t.sconto2) as 'sconto testata 2', ";
                    sql = sql + " sum(t.sconto3) as 'sconto testata 3' ";
                    sql = sql + " , sum(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2)) as 'importo imponibile' ";
                    sql = sql + " , sum(round(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale, 2)) as 'importo iva' ";
                    sql = sql + " , sum(round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) + round((round(calcola_importo_netto(r.prezzo * r.quantita, r.sconto1, r.sconto2, t.sconto1, t.sconto2, t.sconto3),2) / 100 * i.percentuale),2))  + IFNULL(t.spese_trasporto,0) + IFNULL(t.spese_incasso,0) as 'importo totale' ";
                }
                sql = sql + " from test_fatt_acquisto t left join righ_fatt_acquisto r on t.serie = r.serie and t.numero = r.numero and t.anno = r.anno";
                sql = sql + " left join clie_forn c on t.fornitore = c.codice";
                sql = sql + " left join codici_iva i on r.iva = i.codice";
            }
            sql = sql + " where 1 = 1 and riga is not null";
            if (this.tipo.getSelectedItem().equals("Vendita solo Fatture")) {
                sql = sql + " and tipo_fattura != 7";
            } else if (this.tipo.getSelectedItem().equals("Vendita solo Scontrini")) {
                sql = sql + " and tipo_fattura = 7";
            }
            if (this.comCliente.getSelectedIndex() > 0) {
                if (this.tipo.getSelectedItem().toString().toLowerCase().indexOf("vendita") >= 0) {
                    sql = sql + " and cliente = '" + this.comCliente.getSelectedKey() + "'";
                } else {
                    sql = sql + " and fornitore = '" + this.comCliente.getSelectedKey() + "'";
                }
            }
            if ((this.comFornitore.getSelectedIndex() > 0)
                    && (this.tipo.getSelectedItem().toString().toLowerCase().indexOf("acquisto") >= 0)) {
                sql = sql + " and fornitore = '" + this.comFornitore.getSelectedKey() + "'";
            }

            if (this.comArticolo.getSelectedIndex() > 0) {
                sql = sql + " and r.codice_articolo = " + Db.pc(this.comArticolo.getSelectedKey(), 12);
            }
            if (this.dal.getDate() != null) {
                if (this.tipo.getSelectedIndex() != 1) {
                    sql = sql + " and data >= " + DbUtils.pc2(this.dal.getDate(), 91);
                } else {
                    sql = sql + " and data_doc >= " + DbUtils.pc2(this.dal.getDate(), 91);
                }
            }
            if (this.al.getDate() != null) {
                if (this.tipo.getSelectedIndex() != 1) {
                    sql = sql + " and data <= " + DbUtils.pc2(this.al.getDate(), 91);
                } else {
                    sql = sql + " and data_doc <= " + DbUtils.pc2(this.al.getDate(), 91);
                }
            }

            if (this.raggruppa.isSelected()) {
                sql = sql + " group by t.id";
            }

            if (this.tipo.getSelectedItem().equals("Vendita solo Scontrini")) {
                sql = sql + " order by t.data, t.numero, r.riga";
            } else if (this.tipo.getSelectedItem().equals("Vendita solo Scontrini")) {
                sql = sql + " order by t.data_doc";
            } else {
                sql = sql + " order by t.data, r.anno, r.serie, r.numero, r.riga";
            }

            System.out.println("sql export: " + sql);

            ResultSet rs = null;
            try {
                System.out.println("sql:\n" + sql);
                rs = DbUtils.tryOpenResultSetEditable(Db.conn, sql);
            } catch (Exception ex) {
                if ((ex.getMessage().indexOf("FUNCTION") >= 0) && (ex.getMessage().indexOf("calcola_importo_netto does not exist") >= 0)) {
                    try {
                        String sqlagg = DbChanges2.readfrom("agg_66_mc.sql");
                        DbUtils.tryExecQuery(Db.getConn(), sqlagg);
                        rs = DbUtils.tryOpenResultSetEditable(Db.conn, sql);
                    } catch (Exception e) {
                    }
                } else {
                    ex.printStackTrace();
                    setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                    SwingUtils.showErrorMessage(this, ex.getMessage());
                    return;
                }
            }

            PrintSimpleTable print = new PrintSimpleTable(rs);
            String caption = "";
            try {
                ResultSet r = Db.openResultSet("select ragione_sociale from dati_azienda");
                if (r.next()) {
                    caption = caption + r.getString(1);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            if (caption.length() > 0) {
                caption = caption + " - ";
            }
            caption = caption + this.tipo.getSelectedItem();

            if (((KeyValuePair) this.formato.getSelectedItem()).key.toString().equalsIgnoreCase("pdf")) {
                print.print(caption, headerWidth, ((KeyValuePair) this.formato.getSelectedItem()).key.toString(), "", "", -2);
                Util.start("tempStampa.pdf");
            } else if (((KeyValuePair) this.formato.getSelectedItem()).key.toString().equalsIgnoreCase("xls")) {
                String nomeFile = print.printExcel(caption, headerWidth, "", "");
                Util.start(nomeFile);
            } else if (((KeyValuePair) this.formato.getSelectedItem()).key.toString().equalsIgnoreCase("csv")) {
                String nomeFile = print.printCsv(caption, headerWidth, "", "");
                File fdir = new File(new File(nomeFile).getAbsolutePath());
                fdir = fdir.getParentFile();
                System.out.println("fdir:" + fdir);
                Util.start(fdir.getAbsolutePath());
            } else {
                print.print(caption, headerWidth, ((KeyValuePair) this.formato.getSelectedItem()).key.toString(), "", "");
                Util.start("tempStampa.html");
            }
            try {
                rs.getStatement().close();
                rs.close();
            } catch (Exception e) {
            }
        }
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_stampaActionPerformed

    private void exportReadytec() {
    }

    private String getField(Object val, int lenght, String tipo, String allineamento, int segno, int decimali, String virgola) {
        String field = "";

        if (tipo.equals("A")) {
            field = String.valueOf(val);
        } else if (tipo.equals("N")) {
            System.out.println("Numerico");
        } else if (tipo.equals("E")) {
            System.out.println("Numerico Editato");
        } else if (tipo.equals("D")) {
            System.out.println("Data");
        }


        if (field.length() < lenght) {
            int curLenght = field.length();
            while (curLenght < lenght) {
                if (allineamento.equals("S") || allineamento.equals("")) {
                    field += " ";
                } else {
                    field = " " + field;
                }
            }
        }
        return field;

    }

    private void annullaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annullaActionPerformed
        dispose();
    }//GEN-LAST:event_annullaActionPerformed

    private void comClienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comClienteItemStateChanged
}//GEN-LAST:event_comClienteItemStateChanged

    private void comClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_comClienteFocusLost
}//GEN-LAST:event_comClienteFocusLost

    private void comFornitoreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comFornitoreItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_comFornitoreItemStateChanged

    private void comFornitoreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_comFornitoreFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_comFornitoreFocusLost

    private void tipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoActionPerformed
        String tipoDoc = String.valueOf(tipo.getSelectedItem());
        boolean disattiva = tipoDoc.contains("Acquisto");
        if (disattiva) {
            this.cheShowRef.setSelected(false);
            this.cheShowRef.setEnabled(false);
        } else {
            this.cheShowRef.setEnabled(true);
        }

        if(!tipoDoc.equals("Vendita (Fatture di Vendita)")){
            int lastIndex = formato.getModel().getSize()-1;
            String formatoString = String.valueOf(formato.getModel().getElementAt(lastIndex));
            if(formatoString.equals("Tracciato Readytec")){
                formato.removeItemAt(lastIndex);
            }
        } else {
            int lastIndex = formato.getModel().getSize()-1;
            String formatoString = String.valueOf(formato.getModel().getElementAt(lastIndex));
            if(!formatoString.equals("Tracciato Readytec")){
                formato.addItem(new KeyValuePair("rea", "Tracciato Readytec"));
            }
        }
    }//GEN-LAST:event_tipoActionPerformed

    private void formatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatoActionPerformed
        if (((KeyValuePair) this.formato.getSelectedItem()).key.toString().equalsIgnoreCase("rea")) {
            this.comArticolo.setEnabled(false);
            this.cheShowRef.setEnabled(false);
            this.raggruppa.setEnabled(false);
        } else {
            this.comArticolo.setEnabled(true);
            this.cheShowRef.setEnabled(true);
            this.raggruppa.setEnabled(true);
        }

    }//GEN-LAST:event_formatoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                JDialogExportAcquistiVendite dialog = new JDialogExportAcquistiVendite(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public org.jdesktop.swingx.JXDatePicker al;
    public javax.swing.JButton annulla;
    public javax.swing.JCheckBox cheShowRef;
    public tnxbeans.tnxComboField comArticolo;
    public tnxbeans.tnxComboField comCliente;
    public tnxbeans.tnxComboField comFornitore;
    public org.jdesktop.swingx.JXDatePicker dal;
    public javax.swing.JComboBox formato;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    public javax.swing.JSeparator jSeparator1;
    public javax.swing.JCheckBox raggruppa;
    public javax.swing.JButton stampa;
    public javax.swing.JComboBox tipo;
    // End of variables declaration//GEN-END:variables

    public JTableDb getGriglia() {
        return griglia;
    }

    public void setGriglia(JTableDb griglia) {
        this.griglia = griglia;
    }
}
