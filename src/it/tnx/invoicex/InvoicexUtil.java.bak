/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package it.tnx.invoicex;

import it.tnx.Db;
import gestioneFatture.InvoicexEvent;
import gestioneFatture.main;
import it.tnx.commons.CastUtils;
import java.awt.Rectangle;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import com.Ostermiller.util.CSVParser;
import com.caucho.hessian.io.Hessian2Input;
import com.caucho.hessian.io.Hessian2Output;
import gestioneFatture.GenericFrmTest;
import gestioneFatture.MenuPanel;
import gestioneFatture.Util;
import gestioneFatture.frmElenFatt;
import gestioneFatture.iniFileProp;
import it.tnx.commons.DbUtils;
import it.tnx.commons.DebugUtils;
import it.tnx.commons.MicroBench;
import it.tnx.commons.SwingUtils;
import it.tnx.invoicex.gui.JFrameDb;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.Window;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.math.BigInteger;
import java.sql.Blob;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JWindow;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import net.sf.jasperreports.engine.JRElement;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignBand;
import net.sf.jasperreports.engine.design.JRDesignImage;
import net.sf.jasperreports.engine.design.JasperDesign;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.io.IOUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.jvnet.substance.SubstanceDefaultTableCellRenderer;
import tnxbeans.tnxComboField;
import tnxbeans.tnxTextField;

/**
 *
 * @author test1
 */
public class InvoicexUtil {

    static public void fireEvent(Object source, int eventType, Object... args) {
        try {
            InvoicexEvent event = new InvoicexEvent(source);
            event.type = eventType;
            event.args = args;
            main.events.fireInvoicexEvent(event);
        } catch (Exception err) {
            err.printStackTrace();
        }
    }

    static public int generaProssimoNumeroDocumento(String tipo, int dbAnno, String dbSerie, boolean vendita) {
        try {
            String table = "test_fatt";
            if (tipo.equals("ordine")) {
                table = "test_ordi";
            }
            if (tipo.equals("ddt")) {
                table = "test_ddt";
            }
            if (vendita) {
                table += "_acquisto";
            }

            ResultSet rs = Db.openResultSet("select max(numero) as new from " + table + " where serie = '" + Db.aa(dbSerie) + "' and anno = '" + dbAnno + "'");
            BigInteger res = BigInteger.ZERO;
            if (rs.next()) {
                res = BigInteger.valueOf(rs.getLong("new"));
            }

            return res.intValue() + 1;
        } catch (Exception e) {
            e.printStackTrace();
            return -1;
        }
    }

    static public void importCSV(String tipoDoc, File f, String dbSerie, int dbNumero, int dbAnno, int dbIdPadre) throws SQLException {
        importCSV(tipoDoc, f, dbSerie, dbNumero, dbAnno, dbIdPadre, "FromFile");
    }

    static public void importCSV(String tipoDoc, File f, String dbSerie, int dbNumero, int dbAnno, int dbIdPadre, String nomeListino) throws SQLException {
        CSVParser cp;
        String nomeTabella = "";
        boolean ricarico = false;
        double percRicarico = 0.00;
        String listinoRicarico = "";

        if (tipoDoc.equals(Db.TIPO_DOCUMENTO_DDT)) {
            nomeTabella = "righ_ddt";
        } else if (tipoDoc.equals(Db.TIPO_DOCUMENTO_DDT_ACQUISTO)) {
            nomeTabella = "righ_ddt_acquisto";
        } else if (tipoDoc.equals(Db.TIPO_DOCUMENTO_FATTURA)) {
            nomeTabella = "righ_fatt";
        } else if (tipoDoc.equals(Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA)) {
            nomeTabella = "righ_fatt_acquisto";
        } else if (tipoDoc.equals(Db.TIPO_DOCUMENTO_ORDINE)) {
            nomeTabella = "righ_ordi";
        } else if (tipoDoc.equals(Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO)) {
            nomeTabella = "righ_ordi_acquisto";
        }

        if (!nomeListino.equals("FromFile")) {
            ResultSet rs = Db.openResultSet("SELECT ricarico_listino, ricarico_flag, ricarico_perc FROM tipi_listino WHERE codice = '" + nomeListino + "'");
            if (rs.next()) {
                String flag = rs.getString("ricarico_flag");

                if (flag != null && flag.equals("S")) {
                    ricarico = true;
                    percRicarico = rs.getDouble("ricarico_perc");
                    listinoRicarico = rs.getString("ricarico_listino");
                }
            }
        }

        int col = 0;
        String sql = "SELECT * FROM " + nomeTabella + " LIMIT 1";
        ResultSet righe = Db.openResultSet(sql);
        Vector field = new Vector();
        try {
            ResultSetMetaData rsmd = righe.getMetaData();
            col = rsmd.getColumnCount();

            for (int i = 1; i <= col; i++) {
                field.add(rsmd.getColumnName(i));
            }

            cp = new CSVParser(new FileInputStream(f));
            cp.changeDelimiter(';');
            String[] csv = cp.getLine();

            Vector chiavi = new Vector();
            for (int i = 0; i < csv.length; i++) {
                chiavi.add(csv[i]);
            }

            Hashtable dati = new Hashtable();
            Vector<String> nonCaricati = new Vector();
            while ((csv = cp.getLine()) != null) {
                for (int i = 0; i < chiavi.size(); i++) {
                    dati.put(chiavi.get(i), csv[i]);
                }

                sql = "SELECT max(riga) as last FROM " + nomeTabella + " WHERE id_padre = '" + dbIdPadre + "'";
                ResultSet contaRighe = Db.openResultSet(sql);
                int riga = 0;

                if (contaRighe.next()) {
                    riga = contaRighe.getInt("last") + 1;
                } else {
                    riga = 1;
                }

                Vector values = new Vector();
                for (Object campo : field) {
                    String chiave = String.valueOf(campo);

                    if (chiave.equals("serie")) {
                        values.add(dbSerie);
                    } else if (chiave.equals("numero")) {
                        values.add(dbNumero);
                    } else if (chiave.equals("anno")) {
                        values.add(dbAnno);
                    } else if (chiave.equals("id_padre")) {
                        values.add(dbIdPadre);
                    } else if (chiave.equals("prezzo")) {
                        if (!nomeListino.equals("FromFile")) {
                            String sqlart = "";

                            if (ricarico) {
                                sqlart = "SELECT (prezzo + (prezzo * " + percRicarico + ")/100) as prezzo FROM articoli_prezzi WHERE articolo = '" + Db.nz(dati.get("codice_articolo"), "") + "' AND listino = '" + listinoRicarico + "'";
                            } else {
                                sqlart = "SELECT prezzo FROM articoli_prezzi WHERE articolo = '" + Db.nz(dati.get("codice_articolo"), "") + "' AND listino = '" + nomeListino + "'";
                            }

                            ResultSet rs = Db.openResultSet(sqlart);
                            if (rs.next()) {
                                values.add(String.valueOf(rs.getDouble("prezzo")));
                            } else {
                                values.add(Db.nz(dati.get(chiave), ""));
                                nonCaricati.add(Db.nz(dati.get("codice_articolo"), "") + ": " + Db.nz(dati.get("descrizione"), ""));
                            }
                        } else {
                            values.add(Db.nz(dati.get(chiave), ""));
                        }
                    } else if (chiave.equals("riga")) {
                        values.add(riga);
                        riga++;
                    } else {
                        values.add(Db.nz(dati.get(chiave), ""));
                    }
                }

                sql = "INSERT INTO " + nomeTabella + " SET ";
                for (int i = 0; i < field.size(); i++) {
                    if (!String.valueOf(field.get(i)).equals("id")) {
                        if (i == field.size() - 1) {
                            sql += field.get(i) + " = '" + values.get(i) + "'";
                        } else {
                            sql += field.get(i) + " = '" + values.get(i) + "', ";
                        }
                    }
                }
                System.out.println("sql: " + sql);
                Db.executeSql(sql);
            }
            if (!nonCaricati.isEmpty()) {
                String list = "<html>Articoli non caricati (manca prezzo nel listino prescelto):<br>";
                for (String value : nonCaricati) {
                    list += "- " + value + "<br>";
                }
                list += "<br>Questi articoli verranno ricaricati con il prezzo inserito nel csv importato</html>";
                JOptionPane.showMessageDialog(main.getPadre(), list, "ELENCO ARTICOLI NON CARICATI", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static public void exportCSV(String tipoDoc, int[] ids, String nomeFile) {
        String nomeTabella = "";
        if (tipoDoc.equals(Db.TIPO_DOCUMENTO_DDT)) {
            nomeTabella = "righ_ddt";
        } else if (tipoDoc.equals(Db.TIPO_DOCUMENTO_DDT_ACQUISTO)) {
            nomeTabella = "righ_ddt_acquisto";
        } else if (tipoDoc.equals(Db.TIPO_DOCUMENTO_FATTURA)) {
            nomeTabella = "righ_fatt";
        } else if (tipoDoc.equals(Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA)) {
            nomeTabella = "righ_fatt_acquisto";
        } else if (tipoDoc.equals(Db.TIPO_DOCUMENTO_ORDINE)) {
            nomeTabella = "righ_ordi";
        } else if (tipoDoc.equals(Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO)) {
            nomeTabella = "righ_ordi_acquisto";
        }
        String intestazioni = "";
        String riga = "";
        FileOutputStream fcsv = null;
        String sql = "SELECT * FROM " + nomeTabella + " LIMIT 1";
        ResultSet righe = Db.openResultSet(sql);
        Vector field = new Vector();

        try {
            String dir = System.getProperty("user.home") + File.separator + ".invoicex" + File.separator + "Export" + File.separator;
            File startDir = new File(dir);
            if (!startDir.exists()) {
                startDir.mkdir();
            }

            nomeFile = dir + nomeFile + ".csv";

            fcsv = new FileOutputStream(nomeFile);
            System.out.println("Debug: cvs creato");


            int col = 0;
            if (righe.next()) {
                ResultSetMetaData rsmd = righe.getMetaData();
                col = rsmd.getColumnCount();


                for (int i = 1; i <= col; i++) {
                    field.add(rsmd.getColumnName(i));
                }
                intestazioni = StringUtils.join(field, ";");
                riga = intestazioni + "\n";
                fcsv.write(riga.getBytes());
                System.out.println("Debug: intestazione creata");
            }
            for (int id : ids) {
                sql = "SELECT * FROM " + nomeTabella + " WHERE id_padre = (" + id + ") order by riga";
                System.out.println("sql: " + sql);
                righe = Db.openResultSet(sql);
                ResultSetMetaData rsmd = righe.getMetaData();
                col = rsmd.getColumnCount();

                righe.beforeFirst();
                while (righe.next()) {
                    Hashtable dati = new Hashtable();


                    for (int i = 0; i < col; i++) {
                        String chiave = String.valueOf(field.get(i));
                        try {
                            dati.put(chiave, Db.nz(righe.getString(chiave), ""));
                        } catch (Exception e) {
                            continue;
                        }

                    }

                    riga = getRiga(dati, intestazioni);
                    fcsv.write(riga.getBytes());
                }
            }
            fcsv.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
//            it.tnx.commons.SwingUtils.open(new File(System.getProperty("user.home") + File.separator + ".invoicex" + File.separator + "Export" + File.separator));
            Util.start2(System.getProperty("user.home") + File.separator + ".invoicex" + File.separator + "Export" + File.separator);
        }
    }

    private static String getRiga(Hashtable<String, String> dati, String colonne) {
        String[] cols = StringUtils.split(colonne, ";");
        String riga = "";
        for (int i = 0; i < cols.length; i++) {
            riga += "\"" + StringUtils.replace(StringUtils.defaultString(dati.get(cols[i])), "\"", "") + "\"" + ";";
        }
        riga += "\r\n";
        return riga;
    }

    static public void esportaInExcel(ResultSet rs, String nomeFile, String title, String note_testa, String note_piede, Map colonne) {
        Connection connection;
        java.sql.Statement stat;
        ResultSet resu;
        String nomeFileXls = nomeFile;

        try {

            HSSFWorkbook wb = new HSSFWorkbook();
            HSSFDataFormat format = wb.createDataFormat();

            if (title == null || title.length() == 0) {
                title = "export";
            }

            HSSFSheet sheet = wb.createSheet(title);

            short contarows = 0;
            HSSFRow row = sheet.createRow((short) contarows);
            contarows++;
            row.createCell((short) 0).setCellValue(title);

            if (note_testa != null && note_testa.length() > 0) {
                row = sheet.createRow((short) contarows);
                contarows++;
                row = sheet.createRow((short) contarows);
                contarows++;
                row.createCell((short) 0).setCellValue(note_testa);
            }

            row = sheet.createRow((short) contarows);
            contarows++;
            //colonne
            row = sheet.createRow((short) contarows);
            contarows++;
            int columns = 0;
            columns = rs.getMetaData().getColumnCount();

            Iterator iter = colonne.keySet().iterator();
            short i = 0;
            while (iter.hasNext()) {
                Object key = iter.next();
                Object value = colonne.get(key);
                String col = "";
                //col = rs.getMetaData().getColumnLabel(i+1);
                col = (String) value;
                if (col == null || col.length() == 0) {
                    col = (String) key;
                }
                row.createCell((short) i).setCellValue(col);
                i++;
                //sheet.setColumnWidth((short) i, (short) (headerWidth[i] * 300));
            }

            //stili
            HSSFCellStyle styledouble = wb.createCellStyle();
            styledouble.setDataFormat(format.getFormat("#,##0.00###"));

            HSSFCellStyle styleint = wb.createCellStyle();
            styleint.setDataFormat(format.getFormat("#,##0"));

            HSSFCellStyle styledata = wb.createCellStyle();
            styledata.setDataFormat(format.getFormat("dd/MM/yy"));

            //righe
            int rowcount = 0;
            rs.last();
            rowcount = rs.getRow();
            rs.beforeFirst();
            for (int j = 0; j < rowcount; j++) {
                row = sheet.createRow((short) contarows);
                contarows++;
                //colonne
                iter = colonne.keySet().iterator();
                i = 0;
                while (iter.hasNext()) {
                    String key = (String) iter.next();
                    String value = (String) colonne.get(key);

                    //controllo tipo di campo
                    Object o = null;
                    rs.absolute(j + 1);
                    o = rs.getObject(key);
                    if (o instanceof Double) {
                        HSSFCell cell = row.createCell((short) i);
                        cell.setCellValue((Double) o);
                        cell.setCellStyle(styledouble);
                    } else if (o instanceof BigDecimal) {
                        HSSFCell cell = row.createCell((short) i);
                        cell.setCellValue(((BigDecimal) o).doubleValue());
                        cell.setCellStyle(styledouble);
                    } else if (o instanceof Integer) {
                        HSSFCell cell = row.createCell((short) i);
                        cell.setCellValue(((Integer) o).intValue());
                        cell.setCellStyle(styleint);
                    } else if (o instanceof java.sql.Date) {
                        HSSFCell cell = row.createCell((short) i);
                        cell.setCellValue(((java.sql.Date) o));
                        cell.setCellStyle(styledata);
                    } else if (o instanceof byte[]) {
                        HSSFCell cell = row.createCell((short) i);
                        cell.setCellValue(new String((byte[]) o));
                        cell.setCellStyle(styleint);
                        row.createCell((short) i).setCellValue(new String((byte[]) o));
                    } else if (o instanceof Long) {
                        HSSFCell cell = row.createCell((short) i);
                        cell.setCellValue(((Long) o).longValue());
                        cell.setCellStyle(styleint);
                    } else {
                        if (!(o instanceof String)) {
                            if (o != null) {
                                System.out.println(o.getClass());
                            }
                        }
                        row.createCell((short) i).setCellValue(CastUtils.toString(o));
                    }
                    i++;
                }
            }

            if (note_piede != null && note_piede.length() > 0) {
                row = sheet.createRow((short) contarows);
                contarows++;
                row = sheet.createRow((short) contarows);
                contarows++;
                row.createCell((short) 0).setCellValue(note_piede);
            }

            FileOutputStream fileOut = new FileOutputStream(nomeFileXls);
            wb.write(fileOut);
            fileOut.close();

            return;
        } catch (Exception err) {
            javax.swing.JOptionPane.showMessageDialog(null, err.toString());
            err.printStackTrace();
            return;
        }
    }

    public static void esportaInExcel(List<Object[]> list, String nomeFile, String title, String note_testa, String note_piede, Map colonne) {
        String nomeFileXls = nomeFile;
        try {
            HSSFWorkbook wb = new HSSFWorkbook();
            HSSFDataFormat format = wb.createDataFormat();

            if ((title == null) || (title.length() == 0)) {
                title = "export";
            }

            HSSFSheet sheet = wb.createSheet(title);

            short contarows = 0;
            HSSFRow row = sheet.createRow(contarows);
            contarows = (short) (contarows + 1);
            row.createCell(0).setCellValue(title);

            if ((note_testa != null) && (note_testa.length() > 0)) {
                row = sheet.createRow(contarows);
                contarows = (short) (contarows + 1);
                row = sheet.createRow(contarows);
                contarows = (short) (contarows + 1);
                row.createCell(0).setCellValue(note_testa);
            }

            row = sheet.createRow(contarows);
            contarows = (short) (contarows + 1);

            row = sheet.createRow(contarows);
            contarows = (short) (contarows + 1);
            int columns = 0;
            columns = ((Object[]) list.get(0)).length;

            Iterator iter = colonne.keySet().iterator();
            short i = 0;
            while (iter.hasNext()) {
                Object key = iter.next();
                Object value = colonne.get(key);
                String col = "";

                col = (String) value;
                if ((col == null) || (col.length() == 0)) {
                    col = (String) key;
                }
                row.createCell(i).setCellValue(col);
                i = (short) (i + 1);
            }

            HSSFCellStyle styledouble = wb.createCellStyle();
            styledouble.setDataFormat(format.getFormat("#,##0.00###"));

            HSSFCellStyle styleint = wb.createCellStyle();
            styleint.setDataFormat(format.getFormat("#,##0"));

            HSSFCellStyle styledata = wb.createCellStyle();
            styledata.setDataFormat(format.getFormat("dd/MM/yy"));

            int rowcount = 0;
            rowcount = list.size();
            for (int j = 0; j < rowcount; j++) {
                row = sheet.createRow(contarows);
                contarows = (short) (contarows + 1);

                iter = colonne.keySet().iterator();
                i = 0;
                while (iter.hasNext()) {
                    String key = (String) iter.next();
                    String value = (String) colonne.get(key);

                    Object o = null;
                    o = ((Object[]) list.get(j))[i];
                    if ((o instanceof Double)) {
                        HSSFCell cell = row.createCell(i);
                        cell.setCellValue(((Double) o).doubleValue());
                        cell.setCellStyle(styledouble);
                    } else if ((o instanceof BigDecimal)) {
                        HSSFCell cell = row.createCell(i);
                        cell.setCellValue(((BigDecimal) o).doubleValue());
                        cell.setCellStyle(styledouble);
                    } else if ((o instanceof Integer)) {
                        HSSFCell cell = row.createCell(i);
                        cell.setCellValue(((Integer) o).intValue());
                        cell.setCellStyle(styleint);
                    } else if ((o instanceof Date)) {
                        HSSFCell cell = row.createCell(i);
                        cell.setCellValue((Date) o);
                        cell.setCellStyle(styledata);
                    } else if ((o instanceof byte[])) {
                        HSSFCell cell = row.createCell(i);
                        cell.setCellValue(new String((byte[]) (byte[]) o));
                        cell.setCellStyle(styleint);
                        row.createCell(i).setCellValue(new String((byte[]) (byte[]) o));
                    } else if ((o instanceof Long)) {
                        HSSFCell cell = row.createCell(i);
                        cell.setCellValue(((Long) o).longValue());
                        cell.setCellStyle(styleint);
                    } else {
                        if ((!(o instanceof String))
                                && (o != null)) {
                            System.out.println(o.getClass());
                        }

                        row.createCell(i).setCellValue(CastUtils.toString(o));
                    }
                    i = (short) (i + 1);
                }
            }

            if ((note_piede != null) && (note_piede.length() > 0)) {
                row = sheet.createRow(contarows);
                contarows = (short) (contarows + 1);
                row = sheet.createRow(contarows);
                contarows = (short) (contarows + 1);
                row.createCell(0).setCellValue(note_piede);
            }

            FileOutputStream fileOut = new FileOutputStream(nomeFileXls);
            wb.write(fileOut);
            fileOut.close();

            return;
        } catch (Exception err) {
            JOptionPane.showMessageDialog(null, err.toString());
            err.printStackTrace();
        }
    }

    //stampe..
    public static String controllaPosizioneLogoSuffisso() {
        if (main.fileIni.existKey("varie", "logo_x") && main.fileIni.getValue("varie", "logo_disabilita", "N").equalsIgnoreCase("N")) {
            int x = CastUtils.toInteger0(main.fileIni.getValue("varie", "logo_x", "0"));
            int y = CastUtils.toInteger0(main.fileIni.getValue("varie", "logo_y", "0"));
            int w = CastUtils.toInteger0(main.fileIni.getValue("varie", "logo_w", "100"));
            int h = CastUtils.toInteger0(main.fileIni.getValue("varie", "logo_h", "100"));
            return "_x" + x + "_y" + y + "_w" + w + "_h" + h;
        }
        return "";
    }

    public static JasperDesign controllaLogo(File freport, JasperReport rep, JasperDesign repdes) throws JRException {
        //controllo il logo
        JRDesignBand header = (JRDesignBand) repdes.getPageHeader();
        if (main.fileIni.existKey("varie", "logo_x") && main.fileIni.getValue("varie", "logo_disabilita", "N").equalsIgnoreCase("N")) {
            for (JRElement el : header.getElements()) {
                if (el instanceof JRDesignImage) {
                    JRDesignImage image = (JRDesignImage) el;

                    System.out.println("image x " + image.getX() + " y " + image.getY() + " w " + image.getWidth() + " h " + image.getHeight());
                    int x = CastUtils.toInteger0(main.fileIni.getValue("varie", "logo_x", "0"));
                    int y = CastUtils.toInteger0(main.fileIni.getValue("varie", "logo_y", "0"));
                    int w = CastUtils.toInteger0(main.fileIni.getValue("varie", "logo_w", "100"));
                    int h = CastUtils.toInteger0(main.fileIni.getValue("varie", "logo_h", "100"));

                    x = check(x, 0);
                    y = check(y, 0);
                    w = checks(w, 100);
                    h = checks(h, 100);

                    System.out.println("logo x " + x + " y " + y + " sw " + w + " sh " + h);

                    image.setVerticalAlignment(JRDesignImage.VERTICAL_ALIGN_TOP);
                    int w2 = image.getWidth();
                    int h2 = image.getHeight();
                    x = x * w2 / 100;
                    y = y * h2 / 100;
                    w = w * w2 / 100;
                    h = h * h2 / 100;
                    image.setX(image.getX() + x);
                    image.setY(image.getY() + y);
                    image.setWidth(w);
                    image.setHeight(h);
                }
            }
        }

        return repdes;
    }

    static private int check(int x, int def) {
        if (x < 0 || x > 100) {
            return def;
        }
        return x;
    }

    static private int checks(int x, int def) {
        if (x <= 0 || x > 100) {
            return def;
        }
        return x;
    }

    public static void storicizza(String nota, String doc, int id) {
        //Creazione dati
        MicroBench mb = new MicroBench();
        mb.start();

        HashMap dati = new HashMap();
        if (doc.equals("fattura")) {
            try {
                ArrayList testa = DbUtils.getListMap(Db.getConn(), "select * from test_fatt where id = " + id);
                dati.put("testa", testa);
                ArrayList righe = DbUtils.getListMap(Db.getConn(), "select * from righ_fatt where id_padre = " + id);
                dati.put("righe", righe);
                ArrayList cliente = DbUtils.getListMap(Db.getConn(), "select c.* from clie_forn c join test_fatt t on c.codice = t.cliente where t.id = " + id);
                dati.put("cliente", cliente);
                ArrayList movimenti = DbUtils.getListMap(Db.getConn(), "select * from movimenti_magazzino where da_tabella = 'test_fatt' and da_id = " + id);
                dati.put("movimenti", movimenti);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else if (doc.equals("ddt")) {
            try {
                ArrayList testa = DbUtils.getListMap(Db.getConn(), "select * from test_ddt where id = " + id);
                dati.put("testa", testa);
                ArrayList righe = DbUtils.getListMap(Db.getConn(), "select * from righ_ddt where id_padre = " + id);
                dati.put("righe", righe);
                ArrayList cliente = DbUtils.getListMap(Db.getConn(), "select c.* from clie_forn c join test_ddt t on c.codice = t.cliente where t.id = " + id);
                dati.put("cliente", cliente);
                ArrayList movimenti = DbUtils.getListMap(Db.getConn(), "select * from movimenti_magazzino where da_tabella = 'test_ddt' and da_id = " + id);
                dati.put("movimenti", movimenti);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else if (doc.equals("ordine")) {
            try {
                ArrayList testa = DbUtils.getListMap(Db.getConn(), "select * from test_ordi where id = " + id);
                dati.put("testa", testa);
                ArrayList righe = DbUtils.getListMap(Db.getConn(), "select * from righ_ordi where id_padre = " + id);
                dati.put("righe", righe);
                ArrayList cliente = DbUtils.getListMap(Db.getConn(), "select c.* from clie_forn c join test_ordi t on c.codice = t.cliente where t.id = " + id);
                dati.put("cliente", cliente);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else if (doc.equals("ordine_acquisto")) {
            try {
                ArrayList testa = DbUtils.getListMap(Db.getConn(), "select * from test_ordi_acquisto where id = " + id);
                dati.put("testa", testa);
                ArrayList righe = DbUtils.getListMap(Db.getConn(), "select * from righ_ordi_acquisto where id_padre = " + id);
                dati.put("righe", righe);
                ArrayList cliente = DbUtils.getListMap(Db.getConn(), "select c.* from clie_forn c join test_ordi_acquisto t on c.codice = t.fornitore where t.id = " + id);
                dati.put("cliente", cliente);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            System.err.println("doc:" + doc + " non roconosciuto");
            Thread.dumpStack();
            return;
        }

        try {
//            ByteArrayOutputStream bout = new ByteArrayOutputStream();
//            ObjectOutputStream oos = new ObjectOutputStream(bout);
//            oos.writeObject(dati);

            //hessian serialization
            ByteArrayOutputStream bout = new ByteArrayOutputStream();
            Hessian2Output out = new Hessian2Output(bout);
            out.startMessage();
            out.writeObject(dati);
            out.completeMessage();
            out.close();

            //codifico base64
            byte[] bytes64 = Base64.encodeBase64(bout.toByteArray());

            ResultSet r = DbUtils.tryOpenResultSetEditable(Db.getConn(), "select * from storico limit 0");
            r.moveToInsertRow();
            r.updateString("nota", nota);
            r.updateBytes("dati", bytes64);
            r.insertRow();
            int idstorico = CastUtils.toInteger0(DbUtils.getObject(Db.getConn(), "select LAST_INSERT_ID()")).intValue();
            System.out.println("id storico:" + idstorico);

//            //test di rilettura
//            ResultSet rtest = DbUtils.tryOpenResultSetEditable(Db.getConn(), "select * from storico where id = " + idstorico);
//            if (rtest.next()) {
////                ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(rtest.getBytes("dati")));
////                Object oread = ois.readObject();
//
//                //hessian serialization
//                ByteArrayInputStream bin = new ByteArrayInputStream(rtest.getBytes("dati"));
//                Hessian2Input in = new Hessian2Input(bin);
//                in.startMessage();
//                Object oread = in.readObject();
//                in.completeMessage();
//                in.close();
//                bin.close();
//
//                System.out.println("test rilettura storico:");
//                DebugUtils.dump(oread);
//            }
//            try {
//                rtest.getStatement().close();
//                rtest.close();
//            } catch (Exception e) {
//            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            Hessian2Output out = new Hessian2Output(bos);
            out.startMessage();
            out.writeObject(dati);
            out.completeMessage();
            out.close();
            byte[] data = bos.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println(mb.getDiff("storico"));
    }

    public static void leggiDaStorico(String cosa, int id) {
        List<Map> list;
        String msg = "";
        try {
            String sql = "select id, data from storico where nota like 'modifica " + cosa + " id:" + id + " %'";
            System.out.println("sql = " + sql);
            list = DbUtils.getListMap(Db.getConn(), sql);
            System.out.println("list = " + list);
            for (Map rec : list) {
                msg += leggiDaStorico(CastUtils.toInteger(rec.get("id")));
            }
        } catch (Exception ex) {
            Logger.getLogger(InvoicexUtil.class.getName()).log(Level.SEVERE, null, ex);
        }

        JFrameDb frame = new JFrameDb();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        frame.sqlarea.setText(msg);
    }

    public static String leggiDaStorico(int idStorico) throws Exception {
        //test di rilettura
        String msg = "";
        System.out.println("lettura sotrico id:" + idStorico);
        ResultSet rtest = DbUtils.tryOpenResultSetEditable(Db.getConn(), "select * from storico where id = " + idStorico);
        if (rtest.next()) {
            try {
                //prima provo serilalizzazione java (vecchi ostorico ma problemi con class version)
                ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(rtest.getBytes("dati")));
                Object oread = ois.readObject();
                System.out.println("rilettura storico:");
                DebugUtils.dump(oread);
                String sqlrighe = stampaSqlRighe(oread);
                if (sqlrighe.length() > 0) {
                    msg += "da storico " + rtest.getString("id") + " data " + rtest.getString("data") + "\n" + sqlrighe + "\n\n";
                }
            } catch (Exception e) {
                System.out.println("rileggo con hessian per err:" + e.getMessage());
                //provo con nuovo sistema hessian
                try {
                    byte[] bytes64dec = Base64.decodeBase64(rtest.getBytes("dati"));
                    ByteArrayInputStream bin = new ByteArrayInputStream(bytes64dec);
                    Hessian2Input in = new Hessian2Input(bin);
                    in.startMessage();
                    Object oread = in.readObject();
                    in.completeMessage();
                    in.close();
                    bin.close();
                    DebugUtils.dump(oread);

                    String sqlrighe = stampaSqlRighe(oread);
                    if (sqlrighe.length() > 0) {
                        msg += "da storico " + rtest.getString("id") + " data " + rtest.getString("data") + "\n" + sqlrighe + "\n\n";
                    }
                } catch (Exception e2) {
                    System.out.println("impossibile leggere storico " + idStorico + " err:" + e2.getMessage());
                }
            }
        }
        try {
            rtest.getStatement().close();
            rtest.close();
        } catch (Exception e) {
        }
        return msg;
    }

    public static String stampaSqlRighe(Object o) {
        String sql = "";
        try {
            Map m = (Map) o;
            List<Map> l = (List<Map>) m.get("righe");
            for (Map ml : l) {
                sql += "insert ??? set " + DbUtils.prepareSqlFromMap(ml) + ";\n";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return sql;
    }

    public static Integer getIdFattura(String serie, int numero, int anno) {
        return getIdFattura(Db.getConn(), serie, numero, anno);
    }

    public static Integer getIdFattura(Connection conn, String serie, int numero, int anno) {
        try {
            return (Integer) DbUtils.getObject(conn, "select id from test_fatt where tipo_fattura != 7 and serie = '" + Db.aa(serie) + "' and numero = " + numero + " and anno = " + anno);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static Integer getIdFatturaAcquisto(String serie, int numero, int anno) {
        try {
            return (Integer) DbUtils.getObject(Db.getConn(), "select id from test_fatt_acquisto where serie = '" + Db.aa(serie) + "' and numero = " + numero + " and anno = " + anno);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static Integer getIdDdt(String serie, int numero, int anno) {
        try {
            return (Integer) DbUtils.getObject(Db.getConn(), "select id from test_ddt where serie = '" + Db.aa(serie) + "' and numero = " + numero + " and anno = " + anno);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static Integer getIdOrdine(String serie, int numero, int anno) {
        try {
            return (Integer) DbUtils.getObject(Db.getConn(), "select id from test_ordi where serie = '" + Db.aa(serie) + "' and numero = " + numero + " and anno = " + anno);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static Integer getIdOrdineAcquisto(String serie, int numero, int anno) {
        try {
            return (Integer) DbUtils.getObject(Db.getConn(), "select id from test_ordi_acquisto where serie = '" + Db.aa(serie) + "' and numero = " + numero + " and anno = " + anno);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static Integer getNumeroScadenze(String serie, int numero, int anno) {
        try {
            return ((Long) DbUtils.getObject(Db.getConn(), "select count(*) from scadenze where documento_tipo = 'FA' and documento_serie = '" + Db.aa(serie) + "' and documento_numero = " + numero + " and documento_anno = " + anno)).intValue();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static void controlloProvvigioniAutomatiche(tnxComboField comAgente, tnxTextField texProvvigione, tnxTextField texScon1, JInternalFrame from) {
        //trovo la percentuale di questo agente
        try {
            ResultSet r = Db.lookUp(comAgente.getSelectedKey().toString(), "id", "agenti");
            if (r == null) {
                return;
            }

            iniFileProp fileIni = main.fileIni;

            double percentualeTabella = 0d;
            double percentualeForm = 0d;

            if (fileIni.getValueBoolean("pref", "provvigioniAutomatiche", false)) {
                BigDecimal scontoMinTmp = (BigDecimal) DbUtils.getObject(Db.getConn(), "SELECT MAX(sconto_soglia) FROM soglie_provvigioni WHERE sconto_soglia <= " + Db.pc(texScon1.getText(), Types.DECIMAL));
                BigDecimal scontoMaxTmp = (BigDecimal) DbUtils.getObject(Db.getConn(), "SELECT MIN(sconto_soglia) FROM soglie_provvigioni WHERE sconto_soglia > " + Db.pc(texScon1.getText(), Types.DECIMAL));

                BigDecimal provvMinTmp = BigDecimal.valueOf(0d);
                BigDecimal provvMaxTmp = BigDecimal.valueOf(0d);

                scontoMinTmp = scontoMinTmp == null ? BigDecimal.valueOf(0d) : scontoMinTmp;
                scontoMaxTmp = scontoMaxTmp == null ? BigDecimal.valueOf(100d) : scontoMaxTmp;

                if (fileIni.getValueBoolean("pref", "provvigioniPercentualeAuto", false)) {
                    provvMinTmp = (BigDecimal) DbUtils.getObject(Db.getConn(), "SELECT MAX(percentuale) FROM soglie_provvigioni WHERE sconto_soglia <= " + Db.pc(texScon1.getText(), Types.DECIMAL));
                    provvMaxTmp = (BigDecimal) DbUtils.getObject(Db.getConn(), "SELECT MIN(percentuale) FROM soglie_provvigioni WHERE sconto_soglia > " + Db.pc(texScon1.getText(), Types.DECIMAL));

                    provvMinTmp = provvMinTmp == null ? BigDecimal.valueOf(0d) : provvMinTmp;
                    provvMaxTmp = provvMaxTmp == null ? (BigDecimal) DbUtils.getObject(Db.getConn(), "SELECT MAX(percentuale) FROM soglie_provvigioni") : provvMaxTmp;
                } else {
                    Integer sogliaMinTmp = (Integer) DbUtils.getObject(Db.getConn(), "SELECT MAX(soglia) FROM soglie_provvigioni WHERE sconto_soglia <= " + Db.pc(texScon1.getText(), Types.DECIMAL));
                    Integer sogliaMaxTmp = (Integer) DbUtils.getObject(Db.getConn(), "SELECT MIN(soglia) FROM soglie_provvigioni WHERE sconto_soglia > " + Db.pc(texScon1.getText(), Types.DECIMAL));

                    sogliaMinTmp = sogliaMinTmp == null ? 0 : sogliaMinTmp;
                    sogliaMaxTmp = sogliaMaxTmp == null ? 5 : sogliaMaxTmp;

                    if (sogliaMinTmp != 0) {
                        provvMinTmp = (BigDecimal) DbUtils.getObject(Db.getConn(), "SELECT percentuale_soglia_" + sogliaMinTmp + " FROM agenti WHERE id = " + Db.pc(comAgente.getSelectedKey(), Types.INTEGER));
                    } else {
                        provvMinTmp = BigDecimal.valueOf(0d);
                    }
                    provvMaxTmp = (BigDecimal) DbUtils.getObject(Db.getConn(), "SELECT percentuale_soglia_" + sogliaMaxTmp + " FROM agenti WHERE id = " + Db.pc(comAgente.getSelectedKey(), Types.INTEGER));

                    provvMinTmp = provvMinTmp == null ? BigDecimal.valueOf(0d) : provvMinTmp;
                    provvMaxTmp = provvMaxTmp == null ? (BigDecimal) DbUtils.getObject(Db.getConn(), "SELECT percentuale_soglia_5 FROM agenti WHERE id = " + Db.pc(comAgente.getSelectedKey(), Types.INTEGER)) : provvMaxTmp;
                }



                Double provvigione = 0d;
                Double sconto = Double.parseDouble(texScon1.getText());
                Double scontoMin = scontoMinTmp.doubleValue();
                Double scontoMax = scontoMaxTmp.doubleValue();
                Double provvMin = provvMinTmp.doubleValue();
                Double provvMax = provvMaxTmp.doubleValue();

                provvigione = ((((sconto - scontoMin) / (scontoMax - scontoMin)) * (provvMax - provvMin)) + provvMin);

                percentualeTabella = provvigione == null ? 0 : provvigione;
                percentualeForm = Db.getDouble(texProvvigione.getText());
            } else {
                percentualeTabella = r.getObject("percentuale") == null ? 0 : r.getDouble("percentuale");
                percentualeForm = Db.getDouble(texProvvigione.getText());
            }

            double prov_prima = Db.getDouble(texProvvigione.getText());
            if (texProvvigione.getText().length() == 0 || percentualeForm == percentualeTabella || percentualeForm == 0) {
                if (!fileIni.getValueBoolean("pref", "provvigioniAutomatiche", false)) {
                    texProvvigione.setText(Db.formatValuta(r.getDouble("percentuale")));
                } else {
                    texProvvigione.setText(Db.formatValuta(percentualeTabella));
                }
            } else {
                if (!fileIni.getValueBoolean("pref", "provvigioniAutomatiche", false)) {
                    int ret = javax.swing.JOptionPane.showConfirmDialog(from, "La percentuale di provvigione dell'agente selezionato differisce da quella impostata.\nPer modificarla premere 'Si'", "Attenzione", javax.swing.JOptionPane.YES_NO_OPTION);

                    if (ret == javax.swing.JOptionPane.YES_OPTION) {
                        texProvvigione.setText(Db.formatValuta(r.getDouble("percentuale")));
                    }
                } else {
                    texProvvigione.setText(Db.formatValuta(percentualeTabella));
                }
            }
            double prov_dopo = Db.getDouble(texProvvigione.getText());
            if (prov_prima != prov_dopo && ((GenericFrmTest) from).getGrid().getRowCount() > 0) {
                ((GenericFrmTest) from).aggiornareProvvigioni();
            }
        } catch (Exception err) {
            err.printStackTrace();
        }
    }

    static public String getStatoEvasione(JTable tab, String qta, String qta_evasa) {
        String evaso = "";
        try {
            double sq = 0;
            double sqn = 0;
            double sqe = 0;
            double sqen = 0;
            boolean evasa = true;
            for (int row = 0; row < tab.getRowCount(); row++) {
                sqn = CastUtils.toDouble0(tab.getValueAt(row, tab.getColumn(qta).getModelIndex()));
                sqen = CastUtils.toDouble0(tab.getValueAt(row, tab.getColumn(qta_evasa).getModelIndex()));
                sq += sqn;
                sqe += sqen;
                if (sqn > 0 && sqen < sqn) {
                    evasa = false;
                }
            }
            if (evasa) {
                evaso = "S";
            } else if (sqe > 0) {
                evaso = "P";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return evaso;
    }

    static public void aggiornaStatoEvasione(String tipoDoc, Integer id) {
        String sql = "select IFNULL(quantita, 0) as sq, IFNULL(quantita_evasa,0) as sqe from " + Db.getNomeTabR(tipoDoc);
        sql += " where id_padre = " + id;
        System.out.println("sql = " + sql);
        String evaso = "";
        try {
            List<Map> list = DbUtils.getListMap(Db.getConn(), sql);
            double sq = 0;
            double sqn = 0;
            double sqe = 0;
            double sqen = 0;
            boolean evasa = true;
            for (int row = 0; row < list.size(); row++) {
                Map m = list.get(row);
                sqn = CastUtils.toDouble0(m.get("sq"));
                sqen = CastUtils.toDouble0(m.get("sqe"));
                sq += sqn;
                sqe += sqen;
                if (sqn > 0 && sqen < sqn) {
                    evasa = false;
                }
            }
            if (evasa) {
                evaso = "S";
            } else if (sqe > 0) {
                evaso = "P";
            }
            sql = "update " + Db.getNomeTabT(tipoDoc) + " set evaso = '" + evaso + "' where id = " + id;
            System.out.println("sql = " + sql);
            DbUtils.tryExecQuery(Db.getConn(), sql);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String getNumeroDaId(String tipoDocDest, Integer id) {
        return getNumeroDaId(tipoDocDest, id, true);
    }

    public static String getNumeroDaId(String tipoDocDest, Integer id, boolean includiTipoDoc) {
        try {
            String sql = "select numero, serie, anno from " + Db.getNomeTabT(tipoDocDest) + " where id = " + id;
            if (tipoDocDest.equals(Db.TIPO_DOCUMENTO_SCONTRINO)) {
                sql += " and tipo_fattura = 7";
            } else if (tipoDocDest.equals(Db.TIPO_DOCUMENTO_FATTURA)) {
                sql += " and tipo_fattura != 7";
            }
            System.out.println("sql = " + sql);
            List<Map> list = DbUtils.getListMap(Db.getConn(), sql);
            Map m = list.get(0);
            String ret = "";
            if (includiTipoDoc) {
                ret += Db.getDescTipoDocBrevissima(tipoDocDest);
            }
            if (CastUtils.toString(m.get("serie")).trim().equals("")) {
                ret += " " + m.get("numero");
            } else {
                ret += " " + m.get("serie") + "/" + m.get("numero");
            }
            return ret;
        } catch (Exception e) {
            System.out.println("errore in getNumeroDaId : " + tipoDocDest + " " + id);
            e.printStackTrace();
            return null;
        }
    }

    static public DefaultTableCellRenderer getFlagRender() {
        return new DefaultTableCellRenderer() {

            Color green = new java.awt.Color(200, 255, 200);
            Color dback = UIManager.getColor("Table.background");
            Color bmix = SwingUtils.mixColours(dback, green);
            DefaultTableCellRenderer r2 = new DefaultTableCellRenderer();
            Font font1 = UIManager.getFont("TextField.font");
            Font font2 = UIManager.getFont("TextField.font").deriveFont(UIManager.getFont("TextField.font").getSize() - 2f);

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                Component c2 = r2.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                dback = c2.getBackground();
                ((JLabel) c).setFont(font1);
                String conv = CastUtils.toString(value);
                String conv2 = CastUtils.toString(table.getValueAt(row, table.getColumn("convertito2").getModelIndex()));
                if (value.toString().length() > 0) {
                    c.setBackground(SwingUtils.mixColours(dback, green));
                    if (conv2.trim().equals("")) {
                        ((JLabel) c).setText(conv);
                    } else {
                        ((JLabel) c).setFont(font2);
                        ((JLabel) c).setText(StringUtils.replace(conv2, "\n", " - "));
                    }
                } else {
                    c.setBackground(dback);
                    ((JLabel) c).setText("");
                }
                return c;
            }
        };
    }

    static public SubstanceDefaultTableCellRenderer getFlagRenderSubstance() {
        return new org.jvnet.substance.SubstanceDefaultTableCellRenderer() {

            Font font1 = UIManager.getFont("TextField.font");
            Font font2 = UIManager.getFont("TextField.font").deriveFont(UIManager.getFont("TextField.font").getSize() - 2f);

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                ((JLabel) c).setFont(font1);
                String conv = CastUtils.toString(value);
                String conv2 = CastUtils.toString(table.getValueAt(row, table.getColumn("convertito2").getModelIndex()));
                if (value.toString().length() > 0) {
                    c.setBackground(SwingUtils.mixColours(c.getBackground(), new java.awt.Color(200, 255, 200)));
                    if (conv2.trim().equals("")) {
                        ((JLabel) c).setText(conv);
                    } else {
                        ((JLabel) c).setFont(font2);
                        ((JLabel) c).setText(StringUtils.replace(conv2, "\n", " - "));
                    }
                }
                return c;
            }
        };
    }

    public static DefaultTableCellRenderer getEvasoRender() {
        return new DefaultTableCellRenderer() {

            DefaultTableCellRenderer r2 = new DefaultTableCellRenderer();

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel lab = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                Component c2 = r2.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                lab.setHorizontalAlignment(JLabel.CENTER);
                lab.setFont(UIManager.getFont("Label.font"));
                if (value == null) {
                    value = "";
                }
                try {
                    if (value.toString().equalsIgnoreCase("S")) {
                        lab.setText("Sì");
                        lab.setBackground(SwingUtils.mixColours(new java.awt.Color(200, 255, 200), c2.getBackground()));
                    } else if (value.toString().equalsIgnoreCase("P")) {
                        lab.setText("Parziale");
                        lab.setBackground(SwingUtils.mixColours(new java.awt.Color(255, 255, 200), c2.getBackground()));
                        lab.setFont(lab.getFont().deriveFont((float) lab.getFont().getSize() - 2f));
                    } else {
                        lab.setText("");
                        lab.setBackground(SwingUtils.mixColours(new java.awt.Color(255, 255, 255), c2.getBackground()));
                    }
                } catch (java.lang.NullPointerException errNull) {
                }
                return lab;
            }
        };
    }

    public static DefaultTableCellRenderer getEvasoRenderSubstance() {
        return new org.jvnet.substance.SubstanceDefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel lab = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                lab.setHorizontalAlignment(JLabel.CENTER);
                lab.setFont(UIManager.getFont("Label.font"));
                if (value == null) {
                    value = "";
                }
                try {
                    if (value.toString().equalsIgnoreCase("S")) {
                        lab.setText("Sì");
                        lab.setBackground(SwingUtils.mixColours(new java.awt.Color(200, 255, 200), lab.getBackground()));
                    } else if (value.toString().equalsIgnoreCase("P")) {
                        lab.setText("Parziale");
                        lab.setBackground(SwingUtils.mixColours(new java.awt.Color(255, 255, 200), lab.getBackground()));
                        lab.setFont(lab.getFont().deriveFont((float) lab.getFont().getSize() - 2f));
                    } else {
                        lab.setText("");
                        lab.setBackground(SwingUtils.mixColours(new java.awt.Color(255, 255, 255), lab.getBackground()));
                    }
                } catch (java.lang.NullPointerException errNull) {
                }
                return lab;
            }
        };
    }

    static public boolean isFunzioniManutenzione() {
        return main.getPadrePanel().menFunzioniManutenzione.isSelected();
    }

    public static void aggiornaElenchiFatture() {
        JInternalFrame[] iframes = main.getPadre().getDesktopPane().getAllFrames();
        for (JInternalFrame f : iframes) {
            if (f instanceof frmElenFatt) {
                ((frmElenFatt) f).dbRefresh();
            }
        }
    }

    public static void aggiornaListini() {
        System.out.println("aggiornaListini");
        try {
            List<Map> listini = DbUtils.getListMap(Db.getConn(), "select * from tipi_listino");
            for (Map rec : listini) {
                String sql = "insert ignore into articoli_prezzi select codice, " + Db.pcs((String) rec.get("codice")) + " as listino, null as prezzo from articoli";
                System.out.println("aggiornaListini sql: " + sql);
                DbUtils.tryExecQuery(Db.getConn(), sql);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static InputStream caricaLogoDaDb(Connection conn) {
        return caricaLogoDaDb(conn, "logo");
    }

    public static InputStream caricaLogoDaDb(Connection conn, String campo) {
        ResultSet r = null;
        try {
            controllaAggiornamentoFileLogo(campo);
            r = DbUtils.tryOpenResultSet(conn, "select id, " + campo + " from dati_azienda");
            if (r.next()) {
                Blob blob = r.getBlob(campo);
                if (blob == null) {
                    return null;
                }
                return blob.getBinaryStream();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DbUtils.close(r);
        }
        return null;
    }

    public static byte[] caricaLogoDaDbBytes(Connection conn, String campo) {
        ResultSet r = null;
        try {
            controllaAggiornamentoFileLogo(campo);
            r = DbUtils.tryOpenResultSet(conn, "select id, " + campo + " from dati_azienda");
            if (r.next()) {
                Blob blob = r.getBlob(campo);
                if (blob == null) {
                    return null;
                }
                return IOUtils.toByteArray(blob.getBinaryStream());
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            DbUtils.close(r);
        }
        return null;
    }

    public static void salvaImgInDb(String file) {
        salvaImgInDb(file, "logo");
    }

    public static void salvaImgInDb(String file, String campo) {
        try {
            File fileLogo = new File(file);
            boolean stampareLogo = true;

            if (file != null && fileLogo.exists()) {
                System.out.println("salvo logo in db per file:" + file + " fileLogo.exist:" + fileLogo.exists());
                FileInputStream is = new FileInputStream(fileLogo);
                byte[] bb = new byte[(int) fileLogo.length()];
                is.read(bb);
                Statement s = Db.getConn().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet r = s.executeQuery("select id," + campo + ", " + campo + "_nome_file, " + campo + "_data_modifica, " + campo + "_dimensione from dati_azienda");
                if (r.next()) {
                    r.updateObject(campo, bb);
                    r.updateObject(campo + "_nome_file", file);
                    r.updateObject(campo + "_data_modifica", fileLogo.lastModified());
                    r.updateObject(campo + "_dimensione", fileLogo.length());
                    r.updateRow();
                }
                r.close();
                s.close();
            } else {
                System.out.println("azzero logo in db per file:" + file + " fileLogo.exist:" + fileLogo.exists());
                Statement s = Db.getConn().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet r = s.executeQuery("select id," + campo + ", " + campo + "_nome_file, " + campo + "_data_modifica, " + campo + "_dimensione from dati_azienda");
                if (r.next()) {
                    r.updateObject(campo, null);
                    r.updateObject(campo + "_nome_file", null);
                    r.updateObject(campo + "_data_modifica", null);
                    r.updateObject(campo + "_dimensione", null);
                    r.updateRow();
                }
                r.close();
                s.close();
            }
        } catch (Exception ex1) {
            ex1.printStackTrace();
        }
    }

    private static void controllaAggiornamentoFileLogo(String campo) {
        //logo_nome_file
        try {
            List<Map> lm = DbUtils.getListMap(Db.getConn(), "select id, " + campo + "_nome_file as nome_file, " + campo + "_data_modifica as data_modifica, " + campo + "_dimensione as dimensione from dati_azienda");
            Map m = lm.get(0);
            String nomefile = (String) m.get("nome_file");
            if (StringUtils.isNotBlank(nomefile)) {
                File test = new File(nomefile);
                if (test.exists()) {
                    //se trovo il file controllo se è cambiato
                    Long data_modifica = (Long) m.get("data_modifica");
                    Long dimensione = (Long) m.get("dimensione");
                    if (test.lastModified() > data_modifica || test.length() != dimensione) {
                        //aggiornare
                        InvoicexUtil.salvaImgInDb(test.getAbsolutePath(), campo);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String aggiungi_recapiti(String recapito_prec, boolean dest_diversa, ResultSet rCliente, ResultSet rDocu) {
        String pre = dest_diversa ? "dest_" : "";
        ResultSet r = dest_diversa ? rDocu : rCliente;
        try {
            String recapito = "";
            if (main.fileIni.getValueBoolean("pref", "stampaTelefono", false)) {
                if (it.tnx.Db.nz(r.getString(pre + "telefono"), "").length() > 0) {
                    recapito += "Tel. " + r.getString(pre + "telefono");
                }
            }

            if (main.fileIni.getValueBoolean("pref", "stampaCellulare", false)) {
                if (it.tnx.Db.nz(r.getString(pre + "cellulare"), "").length() > 0) {
                    if (recapito.length() > 0) {
                        recapito += " ";
                    }
                    recapito += "Cell. " + r.getString(pre + "cellulare");
                }
            }

            recapito = recapito_prec + (StringUtils.isBlank(recapito_prec) ? "" : "<br>") + recapito;
            return recapito;
        } catch (Exception e) {
            e.printStackTrace();
            return recapito_prec;
        }

    }

    public static void attendiCaricamentoPluginRitenute(final Runnable run) {
        if (main.fine_init_plugin) {
            run.run();
        } else {
            final JWindow flash = SwingUtils.showFlashMessage2("Attendere caricamento plugins", 5, null, Color.red, new Font(null, Font.BOLD, 16), true);
            Thread t = new Thread("attendere caricamento plugins") {

                @Override
                public void run() {
                    while (!main.fine_init_plugin) {
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(InvoicexUtil.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    run.run();
                    flash.dispose();
                }
            };
            t.start();
        }
    }

    public static String getIvaDefault() {
        try {
            return (String) DbUtils.getObject(Db.getConn(), "select codiceIvaDefault from dati_azienda limit 1");
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    public static String getIvaSpese() {
        try {
            return (String) DbUtils.getObject(Db.getConn(), "select codiceIvaSpese from dati_azienda limit 1");
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static boolean isPassaggio21eseguito() {
        try {
            String eseguito = CastUtils.toString(DbUtils.getObject(Db.getConn(), "select iva21eseguito from dati_azienda limit 1"));
            if (eseguito.equalsIgnoreCase("S")) return true;
            return false;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public static String getIvaDefaultPassaggio() {
        String iva = getIvaDefault();
        if (StringUtils.isBlank(iva)) {
            if (isPassaggio21eseguito()) {
                return "21";
            } else {
                return "20";
            }
        } else {
            return iva;
        }
    }

    static public void checkSize(Window w) {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension ss = toolkit.getScreenSize();
        System.out.println("checkSize ss = " + ss);
        Insets ds = toolkit.getScreenInsets(w.getGraphicsConfiguration());
        System.out.println("ds = " + ds);
        ss.setSize(ss.getWidth() - ds.left - ds.right, ss.getHeight() - ds.top - ds.bottom);
//        ss.setSize(1024, 600);
        if (w.getHeight() > ss.getHeight()) {
            w.setSize(w.getWidth(), (int) ss.getHeight());
        }
    }

    public static int getHeightIntFrame() {
        MenuPanel m = main.getPadrePanel();
        return (int) m.getDesktopPane().getVisibleRect().getHeight() - m.getNextFrameTop();
    }

    public static int getHeightIntFrame(int h) {
        MenuPanel m = main.getPadrePanel();
        if ((m.getDesktopPane().getVisibleRect().getHeight() - m.getNextFrameTop()) < h) {
            return (int) m.getDesktopPane().getVisibleRect().getHeight() - m.getNextFrameTop();
        } else {
            return h;
        }
    }

    public static Rectangle getDesktopSize() {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension ss = toolkit.getScreenSize();
        Insets ds = toolkit.getScreenInsets(new Frame().getGraphicsConfiguration());
        return new Rectangle((int)ss.getWidth() - ds.left - ds.right, (int)ss.getHeight() - ds.top - ds.bottom);
    }
    public static Point getDesktopTopLeft() {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Insets ds = toolkit.getScreenInsets(new Frame().getGraphicsConfiguration());
        return new Point(ds.top, ds.left);
    }
}
