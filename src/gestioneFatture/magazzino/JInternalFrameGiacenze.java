/**
 * Invoicex
 * Copyright (c) 2005,2006,2007 Marco Ceccarelli, Tnx snc
 *
 * Questo software è soggetto, e deve essere distribuito con la licenza
 * GNU General Public License, Version 2. La licenza accompagna il software
 * o potete trovarne una copia alla Free Software Foundation http://www.fsf.org .
 *
 * This software is subject to, and may be distributed under, the
 * GNU General Public License, Version 2. The license should have
 * accompanied the software or you may obtain a copy of the license
 * from the Free Software Foundation at http://www.fsf.org .
 *
 * --
 * Marco Ceccarelli (m.ceccarelli@tnx.it)
 * Tnx snc (http://www.tnx.it)
 *
 */
/*
 * JInternalFrameGiacenze.java
 *
 * Created on 23 maggio 2007, 12.06
 */
package gestioneFatture.magazzino;

import it.tnx.Db;
import gestioneFatture.Reports;
import gestioneFatture.Util;
import gestioneFatture.main;
import it.tnx.commons.CastUtils;
import it.tnx.commons.DateUtils;
import it.tnx.commons.FormatUtils;
import it.tnx.commons.KeyValuePair;
import it.tnx.commons.SwingUtils;
import it.tnx.dbeans.pdfPrint.PrintSimpleTable;
import it.tnx.invoicex.Magazzino;
import it.tnx.invoicex.data.Giacenza;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.TreeSet;
import java.util.regex.Pattern;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.swingworker.SwingWorker;
import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.decorator.Filter;
import org.jdesktop.swingx.decorator.FilterPipeline;
import org.jdesktop.swingx.decorator.PatternFilter;
import util.BeanAdapterTableModel;

/**
 *
 * @author  mceccarelli
 */
public class JInternalFrameGiacenze extends javax.swing.JInternalFrame {

    private boolean matricola;
    private boolean lotti;
    boolean flagPrimo = true;
    private Object listino;

    /** Creates new form JInternalFrameGiacenze */
    public JInternalFrameGiacenze(boolean matricola) {
        this(matricola, false);
    }

    public JInternalFrameGiacenze(boolean matricola, boolean lotti) {
        initComponents();
        
        comArticoli_old.setVisible(false);
        texArticolo.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                filtra();
            }

            public void removeUpdate(DocumentEvent e) {
                filtra();
            }

            public void changedUpdate(DocumentEvent e) {
                filtra();
            }
        });

        jXDatePicker1.setFormats(new SimpleDateFormat("dd/MM/yyyy"));
        this.matricola = matricola;
        this.lotti = lotti;
    }

    public void initFilters() {
//        comArticoli_old.addItem(null);
//        TreeSet articoli = new TreeSet();
//        BeanAdapterTableModel model = (BeanAdapterTableModel) tabGiacenze.getModel();
//        for (Object o : model.getBeans()) {
//            articoli.add(((Giacenza) o).getCodice_articolo());
//        }
//        Iterator iter = articoli.iterator();
//        for (Object o : articoli) {
//            comArticoli_old.addItem(iter.next());
//        }

        KeyValuePair kv = new KeyValuePair("null", "<non stampare prezzi>");
        KeyValuePair kv1 = new KeyValuePair("EL1", "<Giacenza con ultimo prezzo vendita>");
        KeyValuePair kv2 = new KeyValuePair("EL2", "<Giacenza con ultimo prezzo acquisto>");
        SwingUtils.initJComboFromDb(comPrezzi, Db.getConn(), "select codice, descrizione from tipi_listino order by codice", "codice", "descrizione", kv, kv1, kv2);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabGiacenze = new JXTable();
        jButton1 = new javax.swing.JButton();
        comArticoli_old = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        comPrezzi = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        labTotali = new javax.swing.JLabel();
        butRefresh = new javax.swing.JButton();
        texArticolo = new javax.swing.JTextField();
        giacenza_zero = new javax.swing.JCheckBox();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Giacenze");

        tabGiacenze.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabGiacenze);

        jButton1.setText("Stampa");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        comArticoli_old.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comArticoli_oldActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Filtra per articolo");

        comPrezzi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comPrezziActionPerformed(evt);
            }
        });

        jLabel2.setText("Prezzo");

        jButton2.setText("Esporta in Excel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jXDatePicker1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePicker1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Data");

        jLabel4.setFont(jLabel4.getFont().deriveFont(jLabel4.getFont().getSize()-1f));
        jLabel4.setText("la giacenza verrà calcolata alla data specificata");

        labTotali.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labTotali.setText("...");
        labTotali.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        butRefresh.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        butRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/view-refresh.png"))); // NOI18N
        butRefresh.setToolTipText("Aggiorna l'elenco");
        butRefresh.setIconTextGap(2);
        butRefresh.setMargin(new java.awt.Insets(2, 2, 2, 2));
        butRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRefreshActionPerformed(evt);
            }
        });

        texArticolo.setColumns(20);
        texArticolo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texArticoloActionPerformed(evt);
            }
        });

        giacenza_zero.setSelected(true);
        giacenza_zero.setText("Comprendi giacenza a zero");
        giacenza_zero.setToolTipText("Selezionandolo verranno visualizzati anche gli articoli con giacenza uguale a zero");
        giacenza_zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                giacenza_zeroActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(jLabel3)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jXDatePicker1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(comPrezzi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 193, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(0, 15, Short.MAX_VALUE)
                                .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(texArticolo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(jLabel4)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(comArticoli_old, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(butRefresh))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jButton2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton1))
                    .add(layout.createSequentialGroup()
                        .add(giacenza_zero)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, labTotali, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jXDatePicker1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel3)
                        .add(jLabel4)
                        .add(comArticoli_old, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(butRefresh))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(comPrezzi, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2)
                    .add(texArticolo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(giacenza_zero)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                .add(4, 4, 4)
                .add(labTotali)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton2)
                    .add(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comArticoli_oldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comArticoli_oldActionPerformed
//        if (comArticoli_old.getSelectedItem() != null) {
//            Filter[] filterArray = {new PatternFilter("(.*" + comArticoli_old.getSelectedItem() + ".*)", 0, 0)};
//            FilterPipeline filters = new FilterPipeline(filterArray);
//            ((JXTable) tabGiacenze).setFilters(filters);
//        } else {
//            ((JXTable) tabGiacenze).setFilters(null);
//        }
//        aggiornaTotali();
    }//GEN-LAST:event_comArticoli_oldActionPerformed

    public void filtra() {
        if (texArticolo.getText().length() > 0) {
//            Filter[] filterArray = {new PatternFilter("(.*" + texArticolo.getText() + ".*)", 0, 0)};
            Filter[] filterArray = {new PatternFilter("(.*" + texArticolo.getText() + ".*)", Pattern.CASE_INSENSITIVE, 0)};
            FilterPipeline filters = new FilterPipeline(filterArray);
            ((JXTable) tabGiacenze).setFilters(filters);
        } else {
            ((JXTable) tabGiacenze).setFilters(null);
        }
        aggiornaTotali();
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //ripredno i dati dalla tabella eventualmente ordinata o filtrata
        BeanAdapterTableModel model = (BeanAdapterTableModel) tabGiacenze.getModel();
        ArrayList newbeans = new ArrayList();
        for (int i = 0; i < tabGiacenze.getRowCount(); i++) {
            int mi = ((JXTable) tabGiacenze).convertRowIndexToModel(i);
            Object o = model.getBeans().get(mi);
            newbeans.add(o);
        }

        File frep;
        String nomeFile = "Giacenze.jrxml";
        if (matricola) {
            if (comPrezzi.getSelectedIndex() >= 1) {
                nomeFile = "GiacenzeMatricolaPrezzo.jrxml";
            } else {
                nomeFile = "GiacenzeMatricola.jrxml";
            }
        } else if (lotti) {
            if (comPrezzi.getSelectedIndex() >= 1) {
                nomeFile = "GiacenzeLottiPrezzo.jrxml";
            } else {
                nomeFile = "GiacenzeLotti.jrxml";
            }
        } else {
            if (comPrezzi.getSelectedIndex() >= 1) {
                nomeFile = "GiacenzePrezzo.jrxml";
            } else {
                nomeFile = "Giacenze.jrxml";
            }
        }

        frep = new File(Reports.DIR_REPORTS + Reports.DIR_MAGAZZINO + nomeFile);

        try {
            
            JasperReport rep = Reports.getReport(frep);
            java.util.Map params = new java.util.HashMap();
            params.put("titolo", "al " + DateUtils.formatDate(jXDatePicker1.getDate()));
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(newbeans);
            JasperPrint print = JasperManager.fillReport(rep, params, ds);

//            java.util.prefs.Preferences preferences = java.util.prefs.Preferences.userNodeForPackage(main.class);
//            if (preferences.getBoolean("stampaPdf", false)) {
            if (main.fileIni.getValueBoolean("pref", "stampaPdf", false)) {
                String nomeFilePdf = "tempPrnFatt.pdf";
                JasperExportManager.exportReportToPdfFile(print, nomeFilePdf);
//                SwingUtils.open(new File(nomeFilePdf));
                Util.start2(nomeFilePdf);
            } else {
                JasperViewer.viewReport(print, false);
            }
        } catch (Exception err) {
            err.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void comPrezziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comPrezziActionPerformed
        SwingUtils.mouse_wait(this);

        KeyValuePair item = (KeyValuePair) comPrezzi.getSelectedItem();
        if (item == null) {
            listino = new Integer(0);
        } else {
            listino = item.key;
            if (listino.equals("null")) {
                listino = new Integer(0);
            } else if (listino.equals("EL1")) {
                listino = new Integer(1);
            } else if (listino.equals("EL2")) {
                listino = new Integer(2);
            }
        }

        SwingWorker w = new SwingWorker() {
            BeanAdapterTableModel tableModel;

            @Override
            protected Object doInBackground() throws Exception {
                Magazzino m = new Magazzino();
                ArrayList beans;
                String[][] cols;

                if (matricola) {
                    beans = Magazzino.getGiacenza(true, null, listino, jXDatePicker1.getDate(), false, giacenza_zero.isSelected());
                    if (listino.equals(new Integer(1))) {
                        cols = new String[][]{{"codice_articolo", "articolo"}, {"descrizione_articolo", "descrizione"}, {"giacenza", "giacenza"}, {"matricola", "matricola"}, {"prezzo", "prezzo"}};
                    } else if (listino.equals(new Integer(2))) {
                        cols = new String[][]{{"codice_articolo", "articolo"}, {"descrizione_articolo", "descrizione"}, {"giacenza", "giacenza"}, {"matricola", "matricola"}, {"prezzo", "prezzo"}};
                    } else if (listino.equals(new Integer(0))) {
                        cols = new String[][]{{"codice_articolo", "articolo"}, {"descrizione_articolo", "descrizione"}, {"giacenza", "giacenza"}, {"matricola", "matricola"}};
                    } else {
                        cols = new String[][]{{"codice_articolo", "articolo"}, {"descrizione_articolo", "descrizione"}, {"giacenza", "giacenza"}, {"matricola", "matricola"}, {"prezzo", "prezzo"}};
                    }
                } else if (lotti) {
                    beans = Magazzino.getGiacenzaPerLotti(null, listino, jXDatePicker1.getDate(), giacenza_zero.isSelected());
                    if (listino.equals(new Integer(1))) {
                        cols = new String[][]{{"codice_articolo", "articolo"}, {"descrizione_articolo", "descrizione"}, {"giacenza", "giacenza"}, {"lotto", "lotto"}, {"prezzo", "prezzo"}};
                    } else if (listino.equals(new Integer(2))) {
                        cols = new String[][]{{"codice_articolo", "articolo"}, {"descrizione_articolo", "descrizione"}, {"giacenza", "giacenza"}, {"lotto", "lotto"}, {"prezzo", "prezzo"}};
                    } else if (listino.equals(new Integer(0))) {
                        cols = new String[][]{{"codice_articolo", "articolo"}, {"descrizione_articolo", "descrizione"}, {"giacenza", "giacenza"}, {"lotto", "lotto"}};
                    } else {
                        cols = new String[][]{{"codice_articolo", "articolo"}, {"descrizione_articolo", "descrizione"}, {"giacenza", "giacenza"}, {"lotto", "lotto"}, {"prezzo", "prezzo"}};
                    }
                } else {
                    beans = Magazzino.getGiacenza(false, null, listino, jXDatePicker1.getDate(), false, giacenza_zero.isSelected());
                    if (listino.equals(new Integer(1))) {
                        cols = new String[][]{{"codice_articolo", "articolo"}, {"descrizione_articolo", "descrizione"}, {"giacenza", "giacenza"}, {"prezzo", "prezzo"}};
                    } else if (listino.equals(new Integer(2))) {
                        cols = new String[][]{{"codice_articolo", "articolo"}, {"descrizione_articolo", "descrizione"}, {"giacenza", "giacenza"}, {"prezzo", "prezzo"}};
                    } else if (listino.equals(new Integer(0))) {
                        cols = new String[][]{{"codice_articolo", "articolo"}, {"descrizione_articolo", "descrizione"}, {"giacenza", "giacenza"}};
                    } else {
                        cols = new String[][]{{"codice_articolo", "articolo"}, {"descrizione_articolo", "descrizione"}, {"giacenza", "giacenza"}, {"prezzo", "prezzo"}};
                    }
                }

                tableModel = new BeanAdapterTableModel(beans, cols);
                return null;
            }

            @Override
            protected void done() {
                super.done();
                tabGiacenze.setModel(tableModel);
                aggiornaTotali();
                SwingUtils.mouse_def(JInternalFrameGiacenze.this);
            }

        };
        w.execute();

    }//GEN-LAST:event_comPrezziActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        SwingUtils.mouse_wait(main.getPadre());
        PrintSimpleTable print = new PrintSimpleTable(tabGiacenze);
        int[] hw = null;
        if (matricola || lotti) {
            if (String.valueOf(comPrezzi.getSelectedItem()).equals("<non stampare prezzi>")) {
                hw = new int[]{10, 50, 10, 10};
            } else {
                hw = new int[]{10, 50, 10, 10, 10};
            }
        } else {
            if (String.valueOf(comPrezzi.getSelectedItem()).equals("<non stampare prezzi>")) {
                hw = new int[]{10, 50, 10};
            } else {
                hw = new int[]{10, 50, 10, 10};
            }
        }
        String nomeFile = print.printExcel("Giacenze al " + DateUtils.formatDate(jXDatePicker1.getDate()), hw, "", "");
//        SwingUtils.open(new File(nomeFile));
        Util.start2(nomeFile);

        SwingUtils.mouse_def(main.getPadre());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jXDatePicker1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePicker1ActionPerformed
        comPrezziActionPerformed(null);
    }//GEN-LAST:event_jXDatePicker1ActionPerformed

    private void butRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRefreshActionPerformed
        aggiorna();
}//GEN-LAST:event_butRefreshActionPerformed

    private void texArticoloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texArticoloActionPerformed

    }//GEN-LAST:event_texArticoloActionPerformed

    private void giacenza_zeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_giacenza_zeroActionPerformed
        aggiorna();
    }//GEN-LAST:event_giacenza_zeroActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butRefresh;
    private javax.swing.JComboBox comArticoli_old;
    private javax.swing.JComboBox comPrezzi;
    private javax.swing.JCheckBox giacenza_zero;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private javax.swing.JLabel labTotali;
    public javax.swing.JTable tabGiacenze;
    private javax.swing.JTextField texArticolo;
    // End of variables declaration//GEN-END:variables

    public void aggiornaTotali() {
        //totali
        double tot_qta = 0;
        double tot_valore = 0;
        labTotali.setText("");
        try {
            int col_giac = tabGiacenze.getColumnModel().getColumnIndex("giacenza");
            int col_valore = -1;
            try {
                col_valore = tabGiacenze.getColumnModel().getColumnIndex("prezzo");    
            } catch (Exception e) {
            }
            for (int row = 0; row < tabGiacenze.getRowCount(); row++) {
                double qta = CastUtils.toDouble0(tabGiacenze.getValueAt(row, col_giac));
                double valore = 0;
                if (col_valore >= 0) {
                    valore = CastUtils.toDouble0(tabGiacenze.getValueAt(row, col_valore));
                }
                tot_qta += qta;
                tot_valore += (qta * valore);
            }
            labTotali.setText("<html>Totale Quantita' <b>" + FormatUtils.formatPerc(tot_qta) + "</b> / Totale Valore <b>" + FormatUtils.formatEuroIta(tot_valore) + "</b></html>");
        } catch (Exception e) {
        }

    }

    public void aggiorna() {
        comPrezziActionPerformed(null);
    }
}
