/** * Invoicex Copyright (c) 2005,2006,2007 Marco Ceccarelli, Tnx snc * * Questo software Ã¨ soggetto, e deve essere distribuito con la licenza GNU * General Public License, Version 2. La licenza accompagna il software o potete * trovarne una copia alla Free Software Foundation http://www.fsf.org . * * This software is subject to, and may be distributed under, the GNU General * Public License, Version 2. The license should have accompanied the software * or you may obtain a copy of the license from the Free Software Foundation at * http://www.fsf.org . * * -- Marco Ceccarelli (m.ceccarelli@tnx.it) Tnx snc (http://www.tnx.it) * */package gestioneFatture;import it.tnx.Db;import gestioneFatture.frmElenFatt.EmailCellRenderer;import gestioneFatture.logic.clienti.Cliente;import it.tnx.SwingWorker;import it.tnx.accessoUtenti.Permesso;import it.tnx.commons.CastUtils;import it.tnx.commons.DateUtils;import it.tnx.commons.DbUtils;import it.tnx.commons.FileUtils;import it.tnx.commons.SwingUtils;import it.tnx.commons.cu;import it.tnx.commons.swing.DelayedExecutor;import it.tnx.invoicex.InvoicexUtil;import it.tnx.invoicex.ItextUtil;import it.tnx.invoicex.gui.JDialogJasperViewer;import java.awt.Color;import java.awt.Component;import java.awt.Cursor;import java.awt.event.MouseEvent;import java.awt.event.MouseMotionAdapter;import java.io.File;import java.lang.reflect.Method;import java.security.PrivilegedAction;import java.sql.*;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Enumeration;import java.util.GregorianCalendar;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.ResourceBundle;import java.util.Vector;import javax.swing.JDialog;import javax.swing.JFileChooser;import javax.swing.JInternalFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.filechooser.FileFilter;import javax.swing.table.DefaultTableCellRenderer;import javax.swing.table.TableCellRenderer;import net.sf.jasperreports.engine.*;import net.sf.jasperreports.engine.design.JasperDesign;import net.sf.jasperreports.engine.util.JRLoader;import net.sf.jasperreports.engine.xml.JRXmlLoader;import org.apache.commons.lang.StringUtils;import tnxbeans.tnxDbGrid;public class frmElenOrdini        extends javax.swing.JInternalFrame {    DefaultTableCellRenderer flagRender;    DefaultTableCellRenderer evasoRender;    public String sqlWhereLimit = "";    public String sqlWhereDaData = "";    public String sqlWhereSerie = "";    public String sqlWhereAData = "";    public String sqlWhereCliente = "";    public String sqlWhereTipo = "";    public String sqlWhereStato = "";    private boolean visualizzaTotali = true;    public boolean acquisto = false;    private boolean apriDirDopoStampa = true;    DelayedExecutor delay_cliente = new DelayedExecutor(new Runnable() {        public void run() {            SwingUtilities.invokeLater(new Runnable() {                public void run() {                    SwingUtils.mouse_wait();                    System.out.println("*** dbrefresh");                    if (texCliente.getText().trim().length() == 0) {                        sqlWhereCliente = "";                    } else {                        //sqlWhereCliente = " and cliente = " + Db.pc(this.comCliente.getSelectedKey(), Types.INTEGER);                        sqlWhereCliente = " and clie_forn.ragione_sociale like '%" + Db.aa(texCliente.getText()) + "%'";                        if (main.fileIni.getValueBoolean("pref", "ColAgg_RiferimentoCliente", false)) {                            sqlWhereCliente = " and (clie_forn.ragione_sociale like '%" + Db.aa(texCliente.getText()) + "%'";                            sqlWhereCliente += " or clie_forn.persona_riferimento like '%" + Db.aa(texCliente.getText()) + "%'";                            sqlWhereCliente += ")";                        }                    }                    dbRefresh();                    SwingUtils.mouse_def();                }            });        }    }, 250);    /**     * Creates new form frmElenPrev     */    public frmElenOrdini() {        this(false);    }    public frmElenOrdini(boolean acquisto) {//        if (!acquisto) {        try {            InvoicexEvent event = new InvoicexEvent(this);            event.type = InvoicexEvent.TYPE_FRMELENORDI_CONSTR_PRE_INIT_COMPS;            main.events.fireInvoicexEvent(event);        } catch (Exception err) {            err.printStackTrace();        }//        }        this.acquisto = false;        //creo render per info ordi se convertito o no        if (!main.substance) {            flagRender = InvoicexUtil.getFlagRender();        } else {            flagRender = InvoicexUtil.getFlagRenderSubstance();        }        if (!main.substance) {            evasoRender = InvoicexUtil.getEvasoRender();        } else {            evasoRender = InvoicexUtil.getEvasoRenderSubstance();        }        initComponents();        if (main.fileIni.getValueBoolean("pref", "ColAgg_RiferimentoCliente", false)) {            menColAggRiferimentoCliente.setSelected(true);        }        if (!InvoicexUtil.isFunzioniManutenzione()) {            sep1.setVisible(false);            menAzzeraConv.setVisible(false);            menCalcEvaso.setVisible(false);        }        if (!main.getPersonalContain("trilogiq")) {            menConvOrdine.setVisible(false);        }        griglia.setNoTnxResize(true);        comCliente.setVisible(false);        setAcquisto(acquisto);//        if (acquisto == false) {        try {            InvoicexEvent event = new InvoicexEvent(this);            event.type = InvoicexEvent.TYPE_FRMELENORDINI_CONSTR_POST_INIT_COMPS;            main.events.fireInvoicexEvent(event);        } catch (Exception err) {            err.printStackTrace();        }//        }        if (main.pluginEmail) {            griglia.addMouseMotionListener(new MouseMotionAdapter() {                @Override                public void mouseMoved(MouseEvent e) {                    int r = griglia.rowAtPoint(e.getPoint());                    int c = griglia.columnAtPoint(e.getPoint());                    try {                        if (c == griglia.getColumn("Mail Inviata").getModelIndex() && CastUtils.toInteger0(griglia.getValueAt(r, c)) >= 1) {                            griglia.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));                        } else {                            griglia.setCursor(Cursor.getDefaultCursor());                        }                    } catch (Exception ex) {                    }                }            });        }        radAcquisto.setEnabled(main.utente.getPermesso(Permesso.PERMESSO_ORDINI_ACQUISTO, Permesso.PERMESSO_TIPO_LETTURA));        radVendita.setEnabled(main.utente.getPermesso(Permesso.PERMESSO_ORDINI_VENDITA, Permesso.PERMESSO_TIPO_LETTURA));    }    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents    private void initComponents() {        jPopupMenu1 = new javax.swing.JPopupMenu();        menModifica = new javax.swing.JMenuItem();        menElimina = new javax.swing.JMenuItem();        menStampa = new javax.swing.JMenuItem();        menDuplica = new javax.swing.JMenuItem();        menPdfEmail = new javax.swing.JMenuItem();        menCreaDdt = new javax.swing.JMenuItem();        menCreaFattura = new javax.swing.JMenuItem();        menCreaFatturaAcc = new javax.swing.JMenuItem();        menCreaFatturaPro = new javax.swing.JMenuItem();        menConvOrdine = new javax.swing.JMenuItem();        menExportCSV = new javax.swing.JMenuItem();        sep1 = new javax.swing.JPopupMenu.Separator();        menAzzeraConv = new javax.swing.JMenuItem();        menCalcEvaso = new javax.swing.JMenuItem();        menColAgg = new javax.swing.JMenu();        menColAggRiferimentoCliente = new javax.swing.JCheckBoxMenuItem();        storico = new javax.swing.JMenuItem();        menColoraRiga = new javax.swing.JMenu();        menColoraRosso = new javax.swing.JMenuItem();        menColoraBlu = new javax.swing.JMenuItem();        menColoraGiallo = new javax.swing.JMenuItem();        menTogliColore = new javax.swing.JMenuItem();        buttonGroup1 = new javax.swing.ButtonGroup();        panDati = new javax.swing.JPanel();        jScrollPane1 = new javax.swing.JScrollPane();        griglia = new tnxDbGrid() {            Color color_hover = new Color(200,200,220);            Color color_sel = new Color(155,155,175);            Color color_fatt = new Color(255,255,255);            Color color_red = InvoicexUtil.getColorePerMarcatura("rosso");            Color color_blu = InvoicexUtil.getColorePerMarcatura("blu");            Color color_yel = InvoicexUtil.getColorePerMarcatura("giallo");            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {                Component c = super.prepareRenderer(renderer, row, column);                Color back = colorForRow(row, c);                c.setForeground(Color.BLACK);                if (isRowSelected(row)) {                    c.setBackground(SwingUtils.mixColours(back, color_sel));                } else if (row == rollOverRowIndex) {                    c.setBackground(SwingUtils.mixColours(back, color_hover));                } else {                    c.setBackground(back);                }                return c;            }            protected Color colorForRow(int row, Component c) {                try {                    if(getValueAt(row, getColumnByName("color")).equals("rosso")){                        return color_red;                    } else if(getValueAt(row, getColumnByName("color")).equals("blu")){                        return color_blu;                    } else if(getValueAt(row, getColumnByName("color")).equals("giallo")){                        return color_yel;                    } else {                        return color_fatt;                    }                } catch (Exception e) {                }                return c.getBackground();            }        };        jPanel1 = new javax.swing.JPanel();        tooMenu = new javax.swing.JToolBar();        jPanel4 = new javax.swing.JPanel();        jLabel10 = new javax.swing.JLabel();        texSerie = new javax.swing.JTextField();        jLabel2 = new javax.swing.JLabel();        texLimit = new javax.swing.JTextField();        jLabel3 = new javax.swing.JLabel();        jLabel4 = new javax.swing.JLabel();        jLabel5 = new javax.swing.JLabel();        texDal = new javax.swing.JTextField();        jLabel6 = new javax.swing.JLabel();        texAl = new javax.swing.JTextField();        jLabel7 = new javax.swing.JLabel();        jLabel8 = new javax.swing.JLabel();        comCliente = new tnxbeans.tnxComboField();        texCliente = new javax.swing.JTextField();        jLabel9 = new javax.swing.JLabel();        jLabel11 = new javax.swing.JLabel();        comFiltroTipo = new javax.swing.JComboBox();        jLabel12 = new javax.swing.JLabel();        comFiltroFatturato = new javax.swing.JComboBox();        butRefresh = new javax.swing.JButton();        jPanel2 = new javax.swing.JPanel();        jPanel5 = new javax.swing.JPanel();        jPanel8 = new javax.swing.JPanel();        butNew = new javax.swing.JButton();        butNew1 = new javax.swing.JButton();        btnNewA = new javax.swing.JButton();        btnNewB = new javax.swing.JButton();        butModi = new javax.swing.JButton();        butDele = new javax.swing.JButton();        butDuplica = new javax.swing.JButton();        jPanel7 = new javax.swing.JPanel();        jLabel1 = new javax.swing.JLabel();        radVendita = new javax.swing.JRadioButton();        radAcquisto = new javax.swing.JRadioButton();        jPanel6 = new javax.swing.JPanel();        butPrin = new javax.swing.JButton();        butEmail = new javax.swing.JButton();        butConvDdt = new javax.swing.JButton();        butConvFattura = new javax.swing.JButton();        butConvFatturaAcc = new javax.swing.JButton();        butConvProforma = new javax.swing.JButton();        jPanel3 = new javax.swing.JPanel();        labTotale = new javax.swing.JLabel();        menModifica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/apps/accessories-text-editor.png"))); // NOI18N        menModifica.setText("Modifica");        menModifica.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menModificaActionPerformed(evt);            }        });        jPopupMenu1.add(menModifica);        menElimina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/places/user-trash.png"))); // NOI18N        menElimina.setText("Elimina");        menElimina.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menEliminaActionPerformed(evt);            }        });        jPopupMenu1.add(menElimina);        menStampa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-print.png"))); // NOI18N        menStampa.setText("Stampa");        menStampa.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menStampaActionPerformed(evt);            }        });        jPopupMenu1.add(menStampa);        menDuplica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-copy.png"))); // NOI18N        menDuplica.setText("Duplica");        menDuplica.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menDuplicaActionPerformed(evt);            }        });        jPopupMenu1.add(menDuplica);        menPdfEmail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/acrobat16x16.png"))); // NOI18N        menPdfEmail.setText("Crea Pdf per Email");        menPdfEmail.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menPdfEmailActionPerformed(evt);            }        });        jPopupMenu1.add(menPdfEmail);        menCreaDdt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/emblems/emblem-system.png"))); // NOI18N        menCreaDdt.setText("Crea DDT");        menCreaDdt.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menCreaDdtActionPerformed(evt);            }        });        jPopupMenu1.add(menCreaDdt);        menCreaFattura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/emblems/emblem-system.png"))); // NOI18N        menCreaFattura.setText("Crea Fattura");        menCreaFattura.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menCreaFatturaActionPerformed(evt);            }        });        jPopupMenu1.add(menCreaFattura);        menCreaFatturaAcc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/emblems/emblem-system.png"))); // NOI18N        menCreaFatturaAcc.setText("Crea Fattura Accompagnatoria");        menCreaFatturaAcc.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menCreaFatturaAccActionPerformed(evt);            }        });        jPopupMenu1.add(menCreaFatturaAcc);        menCreaFatturaPro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/emblems/emblem-system.png"))); // NOI18N        menCreaFatturaPro.setText("Crea Fattura Proforma");        menCreaFatturaPro.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menCreaFatturaProActionPerformed(evt);            }        });        jPopupMenu1.add(menCreaFatturaPro);        menConvOrdine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/emblems/emblem-system.png"))); // NOI18N        menConvOrdine.setText("Converti in Ordine");        menConvOrdine.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menConvOrdineActionPerformed(evt);            }        });        jPopupMenu1.add(menConvOrdine);        menExportCSV.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/media-skip-forward.png"))); // NOI18N        menExportCSV.setText("Export righe in CSV");        menExportCSV.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menExportCSVActionPerformed(evt);            }        });        jPopupMenu1.add(menExportCSV);        jPopupMenu1.add(sep1);        menAzzeraConv.setText("Azzera campo 'Convertito'");        menAzzeraConv.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menAzzeraConvActionPerformed(evt);            }        });        jPopupMenu1.add(menAzzeraConv);        menCalcEvaso.setText("Ricalcola stato evasione");        menCalcEvaso.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menCalcEvasoActionPerformed(evt);            }        });        jPopupMenu1.add(menCalcEvaso);        menColAgg.setText("Colonne Aggiuntive");        menColAggRiferimentoCliente.setText("Riferimento Cliente");        menColAggRiferimentoCliente.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColAggRiferimentoClienteActionPerformed(evt);            }        });        menColAgg.add(menColAggRiferimentoCliente);        jPopupMenu1.add(menColAgg);        storico.setText("Controlla Storico");        storico.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                storicoActionPerformed(evt);            }        });        jPopupMenu1.add(storico);        menColoraRiga.setText("Marca");        menColoraRosso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/status/color-red.png"))); // NOI18N        menColoraRosso.setText("Rosso");        menColoraRosso.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColoraRossoActionPerformed(evt);            }        });        menColoraRiga.add(menColoraRosso);        menColoraBlu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/status/color-blu.png"))); // NOI18N        menColoraBlu.setText("Blu");        menColoraBlu.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColoraBluActionPerformed(evt);            }        });        menColoraRiga.add(menColoraBlu);        menColoraGiallo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/status/color-yellow.png"))); // NOI18N        menColoraGiallo.setText("Giallo");        menColoraGiallo.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColoraGialloActionPerformed(evt);            }        });        menColoraRiga.add(menColoraGiallo);        menTogliColore.setText("Togli Colore");        menTogliColore.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menTogliColoreActionPerformed(evt);            }        });        menColoraRiga.add(menTogliColore);        jPopupMenu1.add(menColoraRiga);        setClosable(true);        setIconifiable(true);        setMaximizable(true);        setResizable(true);        setTitle("Gestione Preventivi / Ordini");        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {                formInternalFrameClosed(evt);            }            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {                formInternalFrameOpened(evt);            }        });        panDati.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));        panDati.setLayout(new java.awt.BorderLayout());        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseClicked(java.awt.event.MouseEvent evt) {                jScrollPane1MouseClicked(evt);            }        });        griglia.setFont(griglia.getFont().deriveFont(griglia.getFont().getSize()+1f));        griglia.setRowHeight(20);        griglia.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseClicked(java.awt.event.MouseEvent evt) {                grigliaMouseClicked(evt);            }            public void mousePressed(java.awt.event.MouseEvent evt) {                grigliaMousePressed(evt);            }            public void mouseReleased(java.awt.event.MouseEvent evt) {                grigliaMouseReleased(evt);            }        });        jScrollPane1.setViewportView(griglia);        panDati.add(jScrollPane1, java.awt.BorderLayout.CENTER);        getContentPane().add(panDati, java.awt.BorderLayout.CENTER);        jPanel1.setLayout(new java.awt.BorderLayout());        jPanel1.add(tooMenu, java.awt.BorderLayout.NORTH);        jLabel10.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        jLabel10.setText("serie");        jPanel4.add(jLabel10);        texSerie.setColumns(3);        texSerie.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        texSerie.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texSerieFocusLost(evt);            }        });        texSerie.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                texSerieKeyPressed(evt);            }        });        jPanel4.add(texSerie);        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        jLabel2.setText("vis.");        jPanel4.add(jLabel2);        texLimit.setColumns(3);        texLimit.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        texLimit.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texLimitFocusLost(evt);            }        });        texLimit.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                texLimitKeyPressed(evt);            }        });        jPanel4.add(texLimit);        jLabel3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        jLabel3.setText("doc.");        jPanel4.add(jLabel3);        jLabel4.setText("|");        jPanel4.add(jLabel4);        jLabel5.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        jLabel5.setText("da data");        jPanel4.add(jLabel5);        texDal.setColumns(7);        texDal.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        texDal.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texDalFocusLost(evt);            }        });        texDal.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                texDalKeyPressed(evt);            }        });        jPanel4.add(texDal);        jLabel6.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        jLabel6.setText("a data");        jPanel4.add(jLabel6);        texAl.setColumns(7);        texAl.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        texAl.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texAlFocusLost(evt);            }        });        texAl.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                texAlKeyPressed(evt);            }        });        jPanel4.add(texAl);        jLabel7.setText("|");        jPanel4.add(jLabel7);        jLabel8.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        jLabel8.setText("cliente");        jPanel4.add(jLabel8);        comCliente.setDbNomeCampo("");        comCliente.setDbTrovaMentreScrive(true);        comCliente.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        comCliente.setPreferredSize(new java.awt.Dimension(137, 18));        comCliente.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                comClienteFocusLost(evt);            }        });        comCliente.addItemListener(new java.awt.event.ItemListener() {            public void itemStateChanged(java.awt.event.ItemEvent evt) {                comClienteItemStateChanged(evt);            }        });        jPanel4.add(comCliente);        texCliente.setColumns(8);        texCliente.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                texClienteActionPerformed(evt);            }        });        texCliente.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyReleased(java.awt.event.KeyEvent evt) {                texClienteKeyReleased(evt);            }        });        jPanel4.add(texCliente);        jLabel9.setText("|");        jLabel9.setIconTextGap(2);        jPanel4.add(jLabel9);        jLabel11.setFont(jLabel11.getFont().deriveFont(jLabel11.getFont().getSize()-1f));        jLabel11.setText("Tipo");        jPanel4.add(jLabel11);        comFiltroTipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tutti", "Preventivi", "Ordini" }));        comFiltroTipo.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                comFiltroTipoActionPerformed(evt);            }        });        jPanel4.add(comFiltroTipo);        jLabel12.setFont(jLabel12.getFont().deriveFont(jLabel12.getFont().getSize()-1f));        jLabel12.setText("Fatturato");        jPanel4.add(jLabel12);        comFiltroFatturato.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Qualsiasi", "Si", "No", "Parziale" }));        comFiltroFatturato.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                comFiltroFatturatoActionPerformed(evt);            }        });        jPanel4.add(comFiltroFatturato);        butRefresh.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        butRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/view-refresh.png"))); // NOI18N        butRefresh.setToolTipText("Aggiorna l'elenco dei documenti");        butRefresh.setIconTextGap(2);        butRefresh.setMargin(new java.awt.Insets(2, 2, 2, 2));        butRefresh.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butRefreshActionPerformed(evt);            }        });        jPanel4.add(butRefresh);        jPanel1.add(jPanel4, java.awt.BorderLayout.SOUTH);        jPanel2.setLayout(new java.awt.GridLayout(0, 1));        jPanel5.setLayout(new java.awt.BorderLayout());        butNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-new.png"))); // NOI18N        butNew.setText("Nuovo Preventivo");        butNew.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butNewActionPerformed(evt);            }        });        jPanel8.add(butNew);        butNew1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-new.png"))); // NOI18N        butNew1.setText("Nuovo Ordine");        butNew1.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butNew1ActionPerformed(evt);            }        });        jPanel8.add(butNew1);        btnNewA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-new.png"))); // NOI18N        btnNewA.setText("Nuovo Ordine A");        btnNewA.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btnNewAActionPerformed(evt);            }        });        jPanel8.add(btnNewA);        btnNewB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-new.png"))); // NOI18N        btnNewB.setText("Nuovo Ordine B");        btnNewB.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                btnNewBActionPerformed(evt);            }        });        jPanel8.add(btnNewB);        butModi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/apps/accessories-text-editor.png"))); // NOI18N        butModi.setText("Modifica");        butModi.setIconTextGap(2);        butModi.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butModiActionPerformed(evt);            }        });        jPanel8.add(butModi);        butDele.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/places/user-trash.png"))); // NOI18N        butDele.setText("Elimina");        butDele.setToolTipText("Elimina");        butDele.setIconTextGap(2);        butDele.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butDeleActionPerformed(evt);            }        });        jPanel8.add(butDele);        butDuplica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-copy.png"))); // NOI18N        butDuplica.setText("Duplica");        butDuplica.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butDuplicaActionPerformed(evt);            }        });        jPanel8.add(butDuplica);        jPanel5.add(jPanel8, java.awt.BorderLayout.CENTER);        jLabel1.setText("Documenti di:");        jPanel7.add(jLabel1);        buttonGroup1.add(radVendita);        radVendita.setText("Vendita");        radVendita.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                radVenditaActionPerformed(evt);            }        });        jPanel7.add(radVendita);        buttonGroup1.add(radAcquisto);        radAcquisto.setText("Acquisto");        radAcquisto.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                radAcquistoActionPerformed(evt);            }        });        jPanel7.add(radAcquisto);        jPanel5.add(jPanel7, java.awt.BorderLayout.EAST);        jPanel2.add(jPanel5);        butPrin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-print.png"))); // NOI18N        butPrin.setText("Stampa");        butPrin.setToolTipText("");        butPrin.setIconTextGap(2);        butPrin.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butPrinActionPerformed(evt);            }        });        jPanel6.add(butPrin);        butEmail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/pdf-icon-16.png"))); // NOI18N        butEmail.setText("Crea PDF");        butEmail.setToolTipText("");        butEmail.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butEmailActionPerformed(evt);            }        });        jPanel6.add(butEmail);        butConvDdt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/emblems/emblem-system.png"))); // NOI18N        butConvDdt.setText("crea DDT");        butConvDdt.setIconTextGap(2);        butConvDdt.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butConvDdtActionPerformed1(evt);            }        });        jPanel6.add(butConvDdt);        butConvFattura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/emblems/emblem-system.png"))); // NOI18N        butConvFattura.setText("crea Fattura");        butConvFattura.setToolTipText("");        butConvFattura.setIconTextGap(2);        butConvFattura.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butConvFatturaActionPerformed(evt);            }        });        jPanel6.add(butConvFattura);        butConvFatturaAcc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/emblems/emblem-system.png"))); // NOI18N        butConvFatturaAcc.setText("crea Fattura Acc.");        butConvFatturaAcc.setToolTipText("");        butConvFatturaAcc.setIconTextGap(2);        butConvFatturaAcc.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butConvFatturaAccActionPerformed(evt);            }        });        jPanel6.add(butConvFatturaAcc);        butConvProforma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/emblems/emblem-system.png"))); // NOI18N        butConvProforma.setText("crea Proforma");        butConvProforma.setToolTipText("");        butConvProforma.setIconTextGap(2);        butConvProforma.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butConvProformaActionPerformed(evt);            }        });        jPanel6.add(butConvProforma);        jPanel2.add(jPanel6);        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);        jPanel3.setLayout(new java.awt.BorderLayout(2, 2));        labTotale.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        labTotale.setText("totale documenti visualizzati ");        labTotale.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));        jPanel3.add(labTotale, java.awt.BorderLayout.CENTER);        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);        pack();    }// </editor-fold>//GEN-END:initComponents    private void butConvDdtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConvDdtActionPerformed        if (griglia.getSelectedRowCount() <= 0) {            SwingUtils.showErrorMessage(this, "Seleziona un documento prima!");            return;        }        Vector tempElenco = new Vector();        String tempWhere = "";        int[] righeSelezionate = this.griglia.getSelectedRows();        String cliente = "";        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));        if (this.griglia.getSelectedRowCount() < 1) {            JOptionPane.showMessageDialog(this, "Si deve selezionare almeno un Documento");        } else {            //controllo che abbia preso lo stesso cliente            String campo_cliente = acquisto ? "Fornitore" : "Cliente";            cliente = Db.nz(griglia.getValueAt(righeSelezionate[0], griglia.getColumnByName(campo_cliente)), "").toString();            for (int u = 0; u < this.griglia.getSelectedRowCount(); u++) {                if (!Db.nz(griglia.getValueAt(righeSelezionate[u], griglia.getColumnByName(campo_cliente)), "").toString().equals(cliente)) {                    JOptionPane.showMessageDialog(this, "Si deve selezionare i Documenti di un solo " + (acquisto ? "Fornitore" : "Cliente") + " per volta");                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                    return;                }            }            //controllo che abbia preso lo stesso cliente            boolean chiesto = false;            for (int u = 0; u < this.griglia.getSelectedRowCount(); u++) {                if (!chiesto && Db.nz(griglia.getValueAt(righeSelezionate[u], griglia.getColumnByName("Convertito")), "").toString().length() > 0) {                    int ret = JOptionPane.showConfirmDialog(this, "Ci sono uno o piu' Documenti gia' convertiti nella selezione, continuare lo stesso ?", "Attenzione", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);                    chiesto = true;                    if (ret == javax.swing.JOptionPane.NO_OPTION) {                        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                        return;                    }                }            }            dbOrdine doc = new dbOrdine();            doc.acquisto = acquisto;            for (int i = 0; i < this.griglia.getSelectedRowCount(); i++) {                tempWhere = " where (";                tempWhere = tempWhere + " t.serie = " + Db.pc(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Serie")).toString(), "VARCHAR");                tempWhere = tempWhere + " and t.numero = " + Db.pc(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Numero")).toString(), "NUMBER");                tempWhere = tempWhere + " and t.anno = " + Db.pc(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Anno")).toString(), Types.VARCHAR);                tempWhere = tempWhere + " )";                //aggiungo al vettore                tempElenco.add(tempWhere);                try {                    if (!acquisto) {                        Integer id = InvoicexUtil.getIdOrdine(CastUtils.toString(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Serie"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Numero"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Anno"))));                        InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE, id);                    } else {                        Integer id = InvoicexUtil.getIdOrdineAcquisto(CastUtils.toString(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Serie"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Numero"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Anno"))));                        InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO, id);                    }                } catch (Exception e) {                    e.printStackTrace();                }            }            doc.serie = griglia.getValueAt(righeSelezionate[0], griglia.getColumnByName("Serie")).toString();            doc.elenco = tempElenco;            doc.ids = getIds();            String optRiportaSerie = main.fileIni.getValue("pref", "riporta_serie", "0");            int repSerie = javax.swing.JOptionPane.YES_OPTION;            if (optRiportaSerie.equals("0")) {                if (!doc.serie.equals("")) {                    repSerie = JOptionPane.showConfirmDialog(this, "Vuoi riportare la serie del preventivo nel DDT?", "Riporta serie", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);                }            } else if (optRiportaSerie.equals("2") || optRiportaSerie.equals("3")) {                repSerie = javax.swing.JOptionPane.NO_OPTION;            }            int value = repSerie == javax.swing.JOptionPane.YES_OPTION ? 1 : 0;            String ret = doc.converti(acquisto ? "ddt_acquisto" : "ddt", value);            if (ret != null) {                JOptionPane.showMessageDialog(this, "Il nuovo DDT e' il " + ret);                for (int i : righeSelezionate) {                    //adesso da db, vedi sopra                    String stato_corrente = CastUtils.toString(griglia.getValueAt(i, griglia.getColumnByName("Stato")));                    String stato = main.fileIni.getValue("pref", "stato_ordi", stato_corrente);                    int id = Integer.parseInt(String.valueOf(griglia.getValueAt(i, griglia.getColumnByName("id"))));                    String query = "UPDATE test_ordi SET stato_ordine = " + Db.pc(stato, Types.VARCHAR) + " WHERE id = " + Db.pc(id, Types.INTEGER);                    Db.executeSql(query);                }            } else {                SwingUtils.showInfoMessage(this, "Conversione annullata");            }        }        //aggiorno la tabella        dbRefresh();        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));    }//GEN-LAST:event_butConvDdtActionPerformed    public Integer[] getIds() {        Integer[] ids = new Integer[griglia.getSelectedRowCount()];        int[] selrows = griglia.getSelectedRows();        for (int i = 0; i < griglia.getSelectedRowCount(); i++) {            try {                ids[i] = (Integer) griglia.getValueAt(selrows[i], griglia.getColumnByName("id"));            } catch (Exception e) {                e.printStackTrace();            }        }        return ids;    }    private static class ModalPrivilegedAction implements PrivilegedAction {        private Class clazz;        private String methodName;        public ModalPrivilegedAction(Class clazz, String methodName) {            this.clazz = clazz;            this.methodName = methodName;        }        public Object run() {            Method method = null;            try {                method = clazz.getDeclaredMethod(methodName, (Class[]) null);            } catch (NoSuchMethodException ex) {            }            if (method != null) {                method.setAccessible(true);            }            return method;        }    }    private void texAlKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texAlKeyPressed        if (evt.getKeyCode() == evt.VK_ENTER) {            texAlFocusLost(null);        }    }//GEN-LAST:event_texAlKeyPressed    private void texDalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texDalKeyPressed        if (evt.getKeyCode() == evt.VK_ENTER) {            texDalFocusLost(null);        }    }//GEN-LAST:event_texDalKeyPressed    private void texLimitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texLimitKeyPressed        if (evt.getKeyCode() == evt.VK_ENTER) {            texLimitFocusLost(null);        }    }//GEN-LAST:event_texLimitKeyPressed    private void butRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRefreshActionPerformed        dbRefresh();    }//GEN-LAST:event_butRefreshActionPerformed    private void comClienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comClienteItemStateChanged        if (evt.getStateChange() == evt.SELECTED) {            comClienteFocusLost(null);        }    }//GEN-LAST:event_comClienteItemStateChanged    private void comClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_comClienteFocusLost        filtraPerCliente();    }//GEN-LAST:event_comClienteFocusLost    public void filtraPerCliente() {//        if (this.comCliente.getSelectedKey().toString().equals("*")) {//            sqlWhereCliente = "";//        } else {//            sqlWhereCliente = " and cliente = " + Db.pc(this.comCliente.getSelectedKey(), Types.INTEGER);//        }//        dbRefresh();        delay_cliente.update();    }    private void texAlFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texAlFocusLost        if (this.texAl.getText().length() == 0) {            sqlWhereAData = "";            dbRefresh();        } else {            if (it.tnx.Checks.isDate(this.texAl.getText())) {                sqlWhereAData = " and data <= " + Db.pc2(this.texAl.getText(), Types.DATE);                dbRefresh();            } else {                javax.swing.JOptionPane.showMessageDialog(this, "Il parametro richiesto deve essere una data in formato (gg/mm/aaaa)", "Attenzione", javax.swing.JOptionPane.INFORMATION_MESSAGE);            }        }    }//GEN-LAST:event_texAlFocusLost    private void texDalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texDalFocusLost        if (this.texDal.getText().length() == 0) {            sqlWhereDaData = "";            dbRefresh();        } else {            if (it.tnx.Checks.isDate(this.texDal.getText())) {                sqlWhereDaData = " and data >= " + Db.pc2(this.texDal.getText(), Types.DATE);                dbRefresh();            } else {                javax.swing.JOptionPane.showMessageDialog(this, "Il parametro richiesto deve essere una data in formato (gg/mm/aaaa)", "Attenzione", javax.swing.JOptionPane.INFORMATION_MESSAGE);            }        }    }//GEN-LAST:event_texDalFocusLost    private void texLimitFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texLimitFocusLost        if (this.texLimit.getText().length() == 0) {            sqlWhereLimit = "";            dbRefresh();        } else {            if (it.tnx.Checks.isInteger(this.texLimit.getText())) {                sqlWhereLimit = " limit " + this.texLimit.getText();                dbRefresh();            } else {                javax.swing.JOptionPane.showMessageDialog(this, "Il parametro richiesto deve essere numerico", "Attenzione", javax.swing.JOptionPane.INFORMATION_MESSAGE);            }        }    }//GEN-LAST:event_texLimitFocusLost    private void butConvFatturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConvFatturaActionPerformed        if (griglia.getSelectedRowCount() <= 0) {            SwingUtils.showErrorMessage(this, "Seleziona un documento prima!");            return;        }        Vector tempElenco = new Vector();        String tempWhere = "";        int[] righeSelezionate = this.griglia.getSelectedRows();        String cliente = "";        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));        if (this.griglia.getSelectedRowCount() < 1) {            JOptionPane.showMessageDialog(this, "Si deve selezionare almeno un Documento");        } else {            //controllo che abbia preso lo stesso cliente            String campo_cliente = acquisto ? "Fornitore" : "Cliente";            cliente = Db.nz(griglia.getValueAt(righeSelezionate[0], griglia.getColumnByName(campo_cliente)), "").toString();            for (int u = 0; u < this.griglia.getSelectedRowCount(); u++) {                if (!Db.nz(griglia.getValueAt(righeSelezionate[u], griglia.getColumnByName(campo_cliente)), "").toString().equals(cliente)) {                    JOptionPane.showMessageDialog(this, "Si deve selezionare i Documenti di un solo cliente per volta");                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                    return;                }            }            //controllo che abbia preso lo stesso cliente            boolean chiesto = false;            for (int u = 0; u < this.griglia.getSelectedRowCount(); u++) {                if (!chiesto && Db.nz(griglia.getValueAt(righeSelezionate[u], griglia.getColumnByName("Convertito")), "").toString().length() > 0) {                    int ret = JOptionPane.showConfirmDialog(this, "Ci sono uno o piu' Documenti gia' convertiti nella selezione, continuare lo stesso ?", "Attenzione", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);                    chiesto = true;                    if (ret == javax.swing.JOptionPane.NO_OPTION) {                        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                        return;                    }                }            }            dbOrdine doc = new dbOrdine();            for (int i = 0; i < this.griglia.getSelectedRowCount(); i++) {                tempWhere = " where (";                tempWhere = tempWhere + " t.serie = " + Db.pc(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Serie")).toString(), "VARCHAR");                tempWhere = tempWhere + " and t.numero = " + Db.pc(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Numero")).toString(), "NUMBER");                tempWhere = tempWhere + " and t.anno = " + Db.pc(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Anno")).toString(), Types.VARCHAR);                tempWhere = tempWhere + " )";                //aggiungo al vettore                tempElenco.add(tempWhere);                try {                    if (!acquisto) {                        Integer id = InvoicexUtil.getIdOrdine(CastUtils.toString(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Serie"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Numero"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Anno"))));                        InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE, id);                    } else {                        Integer id = InvoicexUtil.getIdOrdineAcquisto(CastUtils.toString(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Serie"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Numero"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Anno"))));                        InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO, id);                    }                } catch (Exception e) {                    e.printStackTrace();                }            }            doc.serie = griglia.getValueAt(righeSelezionate[0], griglia.getColumnByName("Serie")).toString();            doc.elenco = tempElenco;            doc.ids = getIds();            doc.acquisto = acquisto;            String optRiportaSerie = main.fileIni.getValue("pref", "riporta_serie", "0");            int repSerie = javax.swing.JOptionPane.YES_OPTION;            if (optRiportaSerie.equals("0")) {                if (!doc.serie.equals("")) {                    repSerie = JOptionPane.showConfirmDialog(this, "Vuoi riportare la serie del preventivo in Fattura?", "Riporta serie", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);                }            } else if (optRiportaSerie.equals("2") || optRiportaSerie.equals("3")) {                repSerie = javax.swing.JOptionPane.NO_OPTION;            }            int value = repSerie == javax.swing.JOptionPane.YES_OPTION ? 1 : 0;            String ret = doc.converti(acquisto ? "fatt_acquisto" : "fatt", value);            if (ret != null) {                JOptionPane.showMessageDialog(this, "La nuova fattura e' la " + ret);//                String stato = main.fileIni.getValue("pref", "stato_ordi", "Preventivo");                for (int i : righeSelezionate) {                    //adesso da db vedi sopra                    String stato_corrente = CastUtils.toString(griglia.getValueAt(i, griglia.getColumnByName("Stato")));                    String stato = main.fileIni.getValue("pref", "stato_ordi", stato_corrente);                    int id = Integer.parseInt(String.valueOf(griglia.getValueAt(i, griglia.getColumnByName("id"))));                    String query = "UPDATE test_ordi SET stato_ordine = " + Db.pc(stato, Types.VARCHAR) + " WHERE id = " + Db.pc(id, Types.INTEGER);                    Db.executeSql(query);                }            } else {                SwingUtils.showInfoMessage(this, "Conversione annullata");            }        }        //aggiorno la tabella        dbRefresh();        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));    }//GEN-LAST:event_butConvFatturaActionPerformed    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened        // Add your handling code here:        this.griglia.resizeColumnsPerc(true);    }//GEN-LAST:event_formInternalFrameOpened    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed        // Add your handling code here:        main.getPadre().closeFrame(this);    }//GEN-LAST:event_formInternalFrameClosed    private void grigliaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grigliaMouseClicked        try {            int r = griglia.rowAtPoint(evt.getPoint());            int c = griglia.columnAtPoint(evt.getPoint());            if (main.pluginEmail && griglia.getColumn("Mail Inviata") != null && c == griglia.getColumn("Mail Inviata").getModelIndex() && CastUtils.toInteger0(griglia.getValueAt(r, c)) >= 1) {                HashMap params = new HashMap();                params.put("source", this);                params.put("tipo", "Ordine o Preventivo di " + (acquisto ? "Acquisto" : "Vendita"));                params.put("id", griglia.getValueAt(r, griglia.getColumnByName("id")));                InvoicexEvent event = new InvoicexEvent(params);                event.type = InvoicexEvent.TYPE_EMAIL_STORICO;                main.events.fireInvoicexEvent(event);            } else {                if (evt.getClickCount() == 2) {                    butModiActionPerformed(null);                } else {                    //tasto destro                    //if (e.getModifiers()==InputEvent.BUTTON3_MASK) popGrig.show(tabNomi,e.getX(),e.getY());                }            }        } catch (Exception err) {            err.printStackTrace();        }    }//GEN-LAST:event_grigliaMouseClicked    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked    }//GEN-LAST:event_jScrollPane1MouseClicked    private void butDeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDeleActionPerformed        if (griglia.getSelectedRowCount() <= 0) {            SwingUtils.showErrorMessage(this, "Seleziona un documento prima!");            return;        }        if (griglia.getSelectedRow() < 0) {            return;        }        String sql;        int dbAnno = 0;        try {            dbAnno = Integer.parseInt(String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("Anno"))));            int numeroSelezionato = Integer.parseInt(String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("numero"))));            int numeroInDb = 0;            sql = "select numero from " + getNomeTab() + " t";            sql += " where serie = '" + griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("serie")) + "'";            sql += " and anno = " + dbAnno;            sql += " order by numero desc";            ResultSet tempNumero = Db.openResultSet(sql);            tempNumero.next();            numeroInDb = tempNumero.getInt(1);            //if (numeroInDb != numeroSelezionato) {            //  javax.swing.JOptionPane.showMessageDialog(this, "Il documento non puo' essere eliminato", "Attenzione", javax.swing.JOptionPane.INFORMATION_MESSAGE);            //  return;            //}        } catch (Exception err) {            err.printStackTrace();        }        //chiedo conferma per eliminare il documento        String msg = "Sicuro di eliminare il Documento selezionato ?";        int res = JOptionPane.showConfirmDialog(this, msg);        if (res == JOptionPane.OK_OPTION) {            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));            int[] selRows = griglia.getSelectedRows();            for (int i = 0; i < griglia.getSelectedRowCount(); i++) {                System.out.println("eliminare ordine:" + selRows[i]);                String serie = CastUtils.toString(griglia.getValueAt(selRows[i], griglia.getColumnByName("serie")));                String numero = CastUtils.toString(griglia.getValueAt(selRows[i], griglia.getColumnByName("numero")));                String anno = CastUtils.toString(griglia.getValueAt(selRows[i], griglia.getColumnByName("anno")));                String numerocompleto = serie + "/" + numero + "/" + anno;                Integer id = null;                try {                    id = CastUtils.toInteger(griglia.getValueAt(selRows[i], griglia.getColumnByName("id")));                    InvoicexUtil.storicizza("elimina ordine id:" + id + " numero:" + numerocompleto, "ordine", id);                } catch (Exception e) {                    e.printStackTrace();                }                if (id != null) {                    sql = "delete from " + getNomeTabr();                    sql += " where id_padre = " + id;                    Db.executeSql(sql);                    System.out.println("eliminare ordine 1:" + sql);                    sql = "delete from " + getNomeTab();                    sql += " where id = " + id;                    Db.executeSql(sql);                    System.out.println("eliminare ordine 2:" + sql);                } else {                    System.err.println("Errore su eliminazione ordine/prev non trovato id:" + id);                }                //this.griglia.dbDelete();            }            dbRefresh();            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));        }    }//GEN-LAST:event_butDeleActionPerformed    private void butPrinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrinActionPerformed        if (griglia.getSelectedRowCount() <= 0) {            SwingUtils.showErrorMessage(this, "Seleziona un documento prima!");            return;        }        main.loadIni();        File f1 = null;        File f2 = null;        ArrayList<String> file_list = new ArrayList<String>();        if (main.fileIni.getValueBoolean("pref", "stampaPdf", false) && main.getPersonalContain("emicad") && main.fileIni.getValueBoolean("emicad", "attiva", false) && !acquisto) {            if (main.fileIni.getValueBoolean("emicad", "richiedi", true)) {                JFileChooser fileChoose = new JFileChooser();                FileFilter filter1 = new FileFilter() {                    public boolean accept(File pathname) {                        if (pathname.getAbsolutePath().endsWith(".pdf") || pathname.isDirectory()) {                            return true;                        } else {                            return false;                        }                    }                    @Override                    public String getDescription() {                        return "File PDF (*.pdf)";                    }                };                fileChoose.setFileFilter(filter1);                int ret = fileChoose.showDialog(main.getPadreFrame(), "Imposta");                if (ret == JFileChooser.APPROVE_OPTION) {                    f1 = fileChoose.getSelectedFile();                    file_list.add(0, f1.getAbsolutePath());                } else {                    file_list.add(0, "");                }                ret = fileChoose.showDialog(main.getPadreFrame(), "Imposta");                if (ret == JFileChooser.APPROVE_OPTION) {                    f2 = fileChoose.getSelectedFile();                    file_list.add(1, f2.getAbsolutePath());                } else {                    file_list.add(1, "");                }            } else {                String path_pre = main.fileIni.getValue("emicad", "file_pre", "");                String path_post = main.fileIni.getValue("emicad", "file_post", "");                if (!path_pre.equals("")) {                    f1 = new File(path_pre);                    file_list.add(0, f1.getAbsolutePath());                } else {                    file_list.add(0, "");                }                if (!path_post.equals("")) {                    f2 = new File(path_post);                    file_list.add(1, f2.getAbsolutePath());                } else {                    file_list.add(1, "");                }            }        }        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));        final ArrayList<String> list = file_list;        if (griglia.getSelectedRowCount() > 1) {            SwingWorker work = new SwingWorker() {                @Override                public Object construct() {                    ArrayList files = new ArrayList();                    for (int i : griglia.getSelectedRows()) {                        System.out.println("stampa ordini:" + i);                        //final String tipoFattura = String.valueOf(griglia.getValueAt(i, 0));                        final String dbSerie = String.valueOf(griglia.getValueAt(i, griglia.getColumnByName("Serie")));                        final int dbNumero = Integer.parseInt(String.valueOf(griglia.getValueAt(i, griglia.getColumnByName("Numero"))));                        final int dbAnno = Integer.parseInt(String.valueOf(griglia.getValueAt(i, griglia.getColumnByName("Anno"))));                        final int id = cu.toInteger(griglia.getValueAt(i, griglia.getColumnByName("id")));                        try {                            if (!acquisto) {                                InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE, id);                            } else {                                InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO, id);                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                        Object ret = stampa("", dbSerie, dbNumero, dbAnno, true, true, false, acquisto, id);                        files.add(ret);                    }                    //concateno i pdf e li visualizzo                    String out = System.getProperty("user.home") + "/stampa.pdf";                    if (main.getPersonalContain("emicad") && main.fileIni.getValueBoolean("emicad", "attiva", false) && main.fileIni.getValueBoolean("pref", "stampaPdf", false) && !acquisto) {                        ArrayList fileDaConcatenare = new ArrayList();                        if (!list.get(0).equals("")) {                            fileDaConcatenare.add(list.get(0));                        }                        fileDaConcatenare.addAll(files);                        if (!list.get(1).equals("")) {                            fileDaConcatenare.add(list.get(1));                        }                        ItextUtil.concatenate(out, (String[]) fileDaConcatenare.toArray(new String[fileDaConcatenare.size()]));                    } else {                        ItextUtil.concatenate(out, (String[]) files.toArray(new String[files.size()]));                    }                    if (out != null) {                        Util.start(out);                    }                    return null;                }            };            work.start();        } else {            int i = griglia.getSelectedRow();            //final String tipoFattura = String.valueOf(griglia.getValueAt(i, 0));            final String dbSerie = String.valueOf(griglia.getValueAt(i, griglia.getColumnByName("Serie")));            final int dbNumero = Integer.parseInt(String.valueOf(griglia.getValueAt(i, griglia.getColumnByName("Numero"))));            final int dbAnno = Integer.parseInt(String.valueOf(griglia.getValueAt(i, griglia.getColumnByName("Anno"))));            final Integer id = cu.toInteger(griglia.getValueAt(i, griglia.getColumnByName("id")));            try {                if (!acquisto) {                    InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE, id);                } else {                    InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO, id);                }            } catch (Exception e) {                e.printStackTrace();            }            if (main.fileIni.getValueBoolean("pref", "stampaPdf", false) && main.fileIni.getValueBoolean("emicad", "attiva", false) && main.getPersonalContain("emicad") && !acquisto && (!list.get(0).equals("") || !list.get(1).equals(""))) {                String out = System.getProperty("user.home") + "/stampa.pdf";                Object ret = stampa("", dbSerie, dbNumero, dbAnno, true, true, false, acquisto, id);                System.out.println("ret: " + ret);                if (list.get(0).equals("")) {                    list.set(0, (String) ret);                } else if (list.get(1).equals("")) {                    list.set(1, (String) ret);                } else {                    list.add(list.get(1));                    list.set(1, (String) ret);                }                String[] file_da_concatenare = new String[list.size()];                list.toArray(file_da_concatenare);                ItextUtil.concatenate(out, file_da_concatenare);                Util.start(out);            } else {                stampa("", dbSerie, dbNumero, dbAnno, acquisto, id);            }        }        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));    }//GEN-LAST:event_butPrinActionPerformed    private void butModiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butModiActionPerformed        int permesso = acquisto ? Permesso.PERMESSO_ORDINI_ACQUISTO : Permesso.PERMESSO_ORDINI_VENDITA;        if (main.utente.getPermesso(permesso, Permesso.PERMESSO_TIPO_SCRITTURA)) {            if (griglia.getSelectedRowCount() <= 0) {                SwingUtils.showErrorMessage(this, "Seleziona un documento prima!");                return;            }            SwingUtils.mouse_wait(this);            SwingUtils.mouse_wait(this.griglia);            String dbSerie = String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("Serie")));            int dbNumero = Integer.parseInt(String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("Numero"))));            int dbAnno = Integer.parseInt(String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("Anno"))));            int dbIdOrdine = Integer.parseInt(String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("ID"))));            //controllo se Ã¨ giÃ  aperta andare su quella            List<JInternalFrame> frames = InvoicexUtil.getFrames(frmTestOrdine.class);            for (JInternalFrame iframe : frames) {                frmTestOrdine f = (frmTestOrdine) iframe;                if (f.id != null && f.id.equals(dbIdOrdine)) {                    System.out.println("trovata form giÃ  aperta");                    main.getPadre().getDesktopPane().getDesktopManager().activateFrame(f);                    SwingUtils.mouse_def(this);                    SwingUtils.mouse_def(this.griglia);                    return;                }            }            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));            String tipoSNJ = "";            if (main.getPersonalContain("snj")) {                tipoSNJ = String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("Tipologia")));                if (tipoSNJ.equals("")) {                    tipoSNJ = null;                }            }            try {                InvoicexUtil.storicizza("modifica ordine id:" + dbIdOrdine, "ordine", dbIdOrdine);            } catch (Exception e) {                e.printStackTrace();            }            try {                InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE, dbIdOrdine);            } catch (Exception e) {            }            //frmTestOrdine frm = new frmTestOrdine(frmTestOrdine.DB_MODIFICA, dbSerie, dbNumero, "P", dbAnno, dbOrdine.TIPO_ORDINE, dbIdOrdine, acquisto);            frmTestOrdine frm = new frmTestOrdine(frmTestOrdine.DB_MODIFICA, dbSerie, dbNumero, "P", dbAnno, dbOrdine.TIPO_ORDINE, dbIdOrdine, acquisto, tipoSNJ);            frm.from = this;            Menu m = (Menu) main.getPadre();            m.openFrame(frm, 740, InvoicexUtil.getHeightIntFrame(750));            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));            SwingUtils.mouse_def(this);            SwingUtils.mouse_def(this.griglia);        }    }//GEN-LAST:event_butModiActionPerformed    private void butNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNewActionPerformed        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));        frmTestOrdine frm = new frmTestOrdine(frmTestOrdine.DB_INSERIMENTO, "", 0, "P", 0, dbOrdine.TIPO_ORDINE, -1, acquisto);        frm.from = this;        frm.comStatoOrdine.setSelectedIndex(0);        Menu m = (Menu) main.getPadre();        m.openFrame(frm, 740, InvoicexUtil.getHeightIntFrame(750));        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));    }//GEN-LAST:event_butNewActionPerformed    public void CreaPdfPerEmail() {        this.apriDirDopoStampa = false;        this.butEmailActionPerformed(null);        this.apriDirDopoStampa = true;    }private void butEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butEmailActionPerformed    if (griglia.getSelectedRowCount() <= 0) {        SwingUtils.showErrorMessage(this, "Seleziona un documento prima!");        return;    }    Integer[] id = new Integer[griglia.getSelectedRowCount()];    for (int i = 0; i < griglia.getSelectedRowCount(); i++) {        id[i] = cu.toInteger(griglia.getValueAt(griglia.getSelectedRows()[i], griglia.getColumnByName("id")));    }    try {        InvoicexUtil.creaPdf(acquisto ? Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO : Db.TIPO_DOCUMENTO_ORDINE, id, apriDirDopoStampa, false);    } catch (Exception e) {        e.printStackTrace();        SwingUtils.showExceptionMessage(this, e);    }}//GEN-LAST:event_butEmailActionPerformedprivate void menModificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menModificaActionPerformed    butModiActionPerformed(null);}//GEN-LAST:event_menModificaActionPerformedprivate void menEliminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menEliminaActionPerformed    butDeleActionPerformed(null);}//GEN-LAST:event_menEliminaActionPerformedprivate void menStampaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menStampaActionPerformed    butPrinActionPerformed(null);}//GEN-LAST:event_menStampaActionPerformedprivate void menPdfEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menPdfEmailActionPerformed    butEmailActionPerformed(null);}//GEN-LAST:event_menPdfEmailActionPerformedprivate void menCreaDdtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menCreaDdtActionPerformed    butConvDdtActionPerformed(null);}//GEN-LAST:event_menCreaDdtActionPerformedprivate void menCreaFatturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menCreaFatturaActionPerformed    butConvFatturaActionPerformed(null);}//GEN-LAST:event_menCreaFatturaActionPerformedprivate void grigliaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grigliaMousePressed    if (evt.isPopupTrigger()) {        jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());    }}//GEN-LAST:event_grigliaMousePressedprivate void grigliaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grigliaMouseReleased    if (evt.isPopupTrigger()) {        jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());    }}//GEN-LAST:event_grigliaMouseReleasedprivate void butConvProformaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConvProformaActionPerformed    if (griglia.getSelectedRowCount() <= 0) {        SwingUtils.showErrorMessage(this, "Seleziona un documento prima!");        return;    }    Vector tempElenco = new Vector();    String tempWhere = "";    int[] righeSelezionate = this.griglia.getSelectedRows();    String cliente = "";    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));    if (this.griglia.getSelectedRowCount() < 1) {        JOptionPane.showMessageDialog(this, "Si deve selezionare almeno un Documento");    } else {        //controllo che abbia preso lo stesso cliente        String campo_cliente = acquisto ? "Fornitore" : "Cliente";        cliente = Db.nz(griglia.getValueAt(righeSelezionate[0], griglia.getColumnByName(campo_cliente)), "").toString();        for (int u = 0; u < this.griglia.getSelectedRowCount(); u++) {            if (!Db.nz(griglia.getValueAt(righeSelezionate[u], griglia.getColumnByName(campo_cliente)), "").toString().equals(cliente)) {                JOptionPane.showMessageDialog(this, "Si deve selezionare i Documenti di un solo cliente per volta");                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                return;            }        }        //controllo che abbia preso lo stesso cliente        boolean chiesto = false;        for (int u = 0; u < this.griglia.getSelectedRowCount(); u++) {            if (!chiesto && Db.nz(griglia.getValueAt(righeSelezionate[u], griglia.getColumnByName("Convertito")), "").toString().length() > 0) {                int ret = JOptionPane.showConfirmDialog(this, "Ci sono uno o piu' Documenti gia' convertiti nella selezione, continuare lo stesso ?", "Attenzione", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);                chiesto = true;                if (ret == javax.swing.JOptionPane.NO_OPTION) {                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                    return;                }            }        }        dbOrdine doc = new dbOrdine();        for (int i = 0; i < this.griglia.getSelectedRowCount(); i++) {            tempWhere = " where (";            tempWhere = tempWhere + " t.serie = " + Db.pc(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Serie")).toString(), "VARCHAR");            tempWhere = tempWhere + " and t.numero = " + Db.pc(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Numero")).toString(), "NUMBER");            tempWhere = tempWhere + " and t.anno = " + Db.pc(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Anno")).toString(), Types.VARCHAR);            tempWhere = tempWhere + " )";            //aggiungo al vettore            tempElenco.add(tempWhere);            try {                if (!acquisto) {                    Integer id = InvoicexUtil.getIdOrdine(CastUtils.toString(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Serie"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Numero"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Anno"))));                    InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE, id);                } else {                    Integer id = InvoicexUtil.getIdOrdineAcquisto(CastUtils.toString(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Serie"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Numero"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Anno"))));                    InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO, id);                }            } catch (Exception e) {                e.printStackTrace();            }        }        doc.serie = griglia.getValueAt(righeSelezionate[0], griglia.getColumnByName("Serie")).toString();        doc.elenco = tempElenco;        doc.ids = getIds();        String ret = doc.converti("fatt", true);        if (ret != null) {            JOptionPane.showMessageDialog(this, "La nuova fattura proforma e' la " + ret);        } else {            SwingUtils.showInfoMessage(this, "Conversione annullata");        }    }    //aggiorno la tabella    dbRefresh();    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));}//GEN-LAST:event_butConvProformaActionPerformedprivate void menCreaFatturaProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menCreaFatturaProActionPerformed    butConvProformaActionPerformed(null);}//GEN-LAST:event_menCreaFatturaProActionPerformedprivate void menCreaFatturaAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menCreaFatturaAccActionPerformed    butConvFatturaAccActionPerformed(null);}//GEN-LAST:event_menCreaFatturaAccActionPerformedprivate void butConvFatturaAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConvFatturaAccActionPerformed    if (griglia.getSelectedRowCount() <= 0) {        SwingUtils.showErrorMessage(this, "Seleziona un documento prima!");        return;    }    Vector tempElenco = new Vector();    String tempWhere = "";    int[] righeSelezionate = this.griglia.getSelectedRows();    String cliente = "";    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));    if (this.griglia.getSelectedRowCount() < 1) {        JOptionPane.showMessageDialog(this, "Si deve selezionare almeno un Documento");    } else {        //controllo che abbia preso lo stesso cliente        String campo_cliente = acquisto ? "Fornitore" : "Cliente";        cliente = Db.nz(griglia.getValueAt(righeSelezionate[0], griglia.getColumnByName(campo_cliente)), "").toString();        for (int u = 0; u < this.griglia.getSelectedRowCount(); u++) {            if (!Db.nz(griglia.getValueAt(righeSelezionate[u], griglia.getColumnByName(campo_cliente)), "").toString().equals(cliente)) {                JOptionPane.showMessageDialog(this, "Si deve selezionare i Documenti di un solo cliente per volta");                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                return;            }        }        //controllo che abbia preso lo stesso cliente        boolean chiesto = false;        for (int u = 0; u < this.griglia.getSelectedRowCount(); u++) {            if (!chiesto && Db.nz(griglia.getValueAt(righeSelezionate[u], griglia.getColumnByName("Convertito")), "").toString().length() > 0) {                int ret = JOptionPane.showConfirmDialog(this, "Ci sono uno o piu' Documenti gia' convertiti nella selezione, continuare lo stesso ?", "Attenzione", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);                chiesto = true;                if (ret == javax.swing.JOptionPane.NO_OPTION) {                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                    return;                }            }        }        dbOrdine doc = new dbOrdine();        for (int i = 0; i < this.griglia.getSelectedRowCount(); i++) {            tempWhere = " where (";            tempWhere = tempWhere + " t.serie = " + Db.pc(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Serie")).toString(), "VARCHAR");            tempWhere = tempWhere + " and t.numero = " + Db.pc(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Numero")).toString(), "NUMBER");            tempWhere = tempWhere + " and t.anno = " + Db.pc(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Anno")).toString(), Types.VARCHAR);            tempWhere = tempWhere + " )";            //aggiungo al vettore            tempElenco.add(tempWhere);            try {                if (!acquisto) {                    Integer id = InvoicexUtil.getIdOrdine(CastUtils.toString(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Serie"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Numero"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Anno"))));                    InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE, id);                } else {                    Integer id = InvoicexUtil.getIdOrdineAcquisto(CastUtils.toString(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Serie"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Numero"))), CastUtils.toInteger(griglia.getValueAt(righeSelezionate[i], griglia.getColumnByName("Anno"))));                    InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO, id);                }            } catch (Exception e) {                e.printStackTrace();            }        }        doc.serie = griglia.getValueAt(righeSelezionate[0], griglia.getColumnByName("Serie")).toString();        doc.elenco = tempElenco;        doc.ids = getIds();        String ret = doc.converti("fatt", false, true);        if (ret != null) {            JOptionPane.showMessageDialog(this, "La nuova fattura e' la " + ret);        } else {            SwingUtils.showInfoMessage(this, "Conversione annullata");        }    }    //aggiorno la tabella    dbRefresh();    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));}//GEN-LAST:event_butConvFatturaAccActionPerformedprivate void butDuplicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDuplicaActionPerformed    int id = -1;    if (griglia.getSelectedRowCount() <= 0) {        SwingUtils.showErrorMessage(this, "Seleziona un documento prima!");        return;    }    String sql;    String sqlC = "";    String sqlV = "";    int newAnno = java.util.Calendar.getInstance().get(Calendar.YEAR);    int newNumero;    int numDup = griglia.getSelectedRows().length;    int res;    //chiedo conferma per eliminare il documento    if (numDup > 1) {        String msg = "Sicuro di voler duplicare " + numDup + " Preventivi / Ordini ?";        res = JOptionPane.showConfirmDialog(this, msg);    } else {        res = JOptionPane.OK_OPTION;    }    if (res == JOptionPane.OK_OPTION) {        for (int sel : griglia.getSelectedRows()) {            String dbSerie = String.valueOf(griglia.getValueAt(sel, griglia.getColumnByName("Serie")));            int dbNumero = Integer.parseInt(String.valueOf(griglia.getValueAt(sel, griglia.getColumnByName("Numero"))));            int dbAnno = Integer.parseInt(String.valueOf(griglia.getValueAt(sel, griglia.getColumnByName("Anno"))));            try {                if (!acquisto) {                    Integer ido = InvoicexUtil.getIdOrdine(dbSerie, dbNumero, dbAnno);                    InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE, ido);                } else {                    Integer ido = InvoicexUtil.getIdOrdineAcquisto(dbSerie, dbNumero, dbAnno);                    InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO, ido);                }            } catch (Exception e) {                e.printStackTrace();            }            //cerco ultimo numero ordine            newNumero = 1;            sqlC = "";            sqlV = "";            sql = "SELECT MAX(numero) as maxnum FROM " + getNomeTab() + " WHERE anno = '" + newAnno + "'";            sql += " and serie = '" + dbSerie + "'";            try {                ResultSet tempUltimo = Db.openResultSet(sql);                if (tempUltimo.next() == true) {                    newNumero = tempUltimo.getInt("maxnum") + 1;                }            } catch (Exception err) {                err.printStackTrace();            }            //    SwingUtils.showInfoMessage(this, "newnumero:" + newNumero);            //inserisco nuovo ordine salvandomi i dati su hashtable            sql = "select * from " + getNomeTab();            sql += " where serie = '" + dbSerie + "'";            sql += " and numero = '" + dbNumero + "'";            sql += " and anno = '" + dbAnno + "'";            ResultSet tempPrev = Db.openResultSet(sql);            try {                ResultSetMetaData metaPrev = tempPrev.getMetaData();                List colonne_da_ignorare = new ArrayList();                colonne_da_ignorare.add("mail_inviata");                colonne_da_ignorare.add("stampato");                colonne_da_ignorare.add("doc_tipo");                colonne_da_ignorare.add("doc_serie");                colonne_da_ignorare.add("doc_numero");                colonne_da_ignorare.add("doc_anno");                colonne_da_ignorare.add("evaso");                colonne_da_ignorare.add("convertito");                colonne_da_ignorare.add("ts");                colonne_da_ignorare.add("ts_gen_totali");                if (tempPrev.next() == true) {                    for (int i = 1; i <= metaPrev.getColumnCount(); i++) {                        if (!metaPrev.getColumnName(i).equalsIgnoreCase("id")) {                            if (metaPrev.getColumnName(i).equalsIgnoreCase("numero")) {                                sqlC += "numero";                                sqlV += Db.pc(newNumero, metaPrev.getColumnType(i));                            } else if (metaPrev.getColumnName(i).equalsIgnoreCase("anno")) {                                sqlC += "anno";                                sqlV += Db.pc(java.util.Calendar.getInstance().get(Calendar.YEAR), "LONG");                            } else if (metaPrev.getColumnName(i).equalsIgnoreCase("data")) {                                DateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd");                                Calendar myCalendar = GregorianCalendar.getInstance();                                sqlC += "data";                                sqlV += Db.pc(myFormat.format(myCalendar.getTime()), metaPrev.getColumnType(i));                            } else {                                if (!colonne_da_ignorare.contains(metaPrev.getColumnName(i))) {                                    sqlC += metaPrev.getColumnName(i);                                    sqlV += Db.pc(tempPrev.getObject(i), metaPrev.getColumnType(i));                                }                            }                            if (!colonne_da_ignorare.contains(metaPrev.getColumnName(i))) {                                sqlC += ",";                                sqlV += ",";                            }                        }                    }                    sqlC = StringUtils.chop(sqlC);                    sqlV = StringUtils.chop(sqlV);                    if (sqlC.endsWith(",")) {                        sqlC = StringUtils.chop(sqlC);                    }                    if (sqlV.endsWith(",")) {                        sqlV = StringUtils.chop(sqlV);                    }                    sql = "insert into " + getNomeTab() + " ";                    sql += "(" + sqlC + ") values (" + sqlV + ")";                    Db.executeSql(sql);                }            } catch (Exception err) {                err.printStackTrace();            }            id = -1;            try {                id = CastUtils.toInteger0(DbUtils.getObject(Db.getConn(), "select LAST_INSERT_ID()")).intValue();            } catch (Exception e) {                SwingUtils.showErrorMessage(this, e.getLocalizedMessage());            }            //inserisco nuovo ordine salvandomi i dati su hashtable            sql = "select * from " + getNomeTabr();            sql += " where serie = '" + dbSerie + "'";            sql += " and numero = '" + dbNumero + "'";            sql += " and anno = '" + dbAnno + "'";            ResultSet tempPrev2 = Db.openResultSet(sql);            try {                ResultSetMetaData metaPrev2 = tempPrev2.getMetaData();                List colonne_da_ignorare = new ArrayList();                colonne_da_ignorare.add("id");                colonne_da_ignorare.add("quantita_evasa");                colonne_da_ignorare.add("in_fatt_riga");                colonne_da_ignorare.add("in_ddt_riga");                colonne_da_ignorare.add("in_fatt");                colonne_da_ignorare.add("in_ddt");                colonne_da_ignorare.add("ts");                colonne_da_ignorare.add("ts_gen_totali");                while (tempPrev2.next() == true) {                    sqlC = "";                    sqlV = "";                    for (int i = 1; i <= metaPrev2.getColumnCount(); i++) {                        if (metaPrev2.getColumnName(i).equalsIgnoreCase("numero")) {                            sqlC += "numero";                            sqlV += Db.pc(newNumero, metaPrev2.getColumnType(i));                        } else if (metaPrev2.getColumnName(i).equalsIgnoreCase("anno")) {                            sqlC += "anno";                            sqlV += Db.pc(java.util.Calendar.getInstance().get(Calendar.YEAR), "LONG");                        } else if (metaPrev2.getColumnName(i).equalsIgnoreCase("id_padre")) {                            sqlC = sqlC + "id_padre";                            sqlV = sqlV + Db.pc(id, "LONG");                        } else {                            if (colonne_da_ignorare.contains(metaPrev2.getColumnName(i))) {                                continue;                            }                            sqlC += metaPrev2.getColumnName(i);                            sqlV += Db.pc(tempPrev2.getObject(i), metaPrev2.getColumnType(i));                        }                        sqlC += ",";                        sqlV += ",";                    }                    sqlC = StringUtils.chop(sqlC);                    sqlV = StringUtils.chop(sqlV);                    if (sqlC.endsWith(",")) {                        sqlC = StringUtils.chop(sqlC);                    }                    if (sqlV.endsWith(",")) {                        sqlV = StringUtils.chop(sqlV);                    }                    sql = "insert into " + getNomeTabr() + " ";                    sql += "(" + sqlC + ") values (" + sqlV + ")";                    Db.executeSql(sql);                }            } catch (Exception err) {                err.printStackTrace();            }        }    }    dbRefresh();    //aprire il nuovo    //cerco il dbId    for (int row = 0; row < griglia.getRowCount(); row++) {        if (CastUtils.toInteger0(griglia.getValueAt(row, griglia.getColumnByName("id"))) == id) {            griglia.getSelectionModel().setSelectionInterval(row, row);            griglia.scrollToRow(row);            butModiActionPerformed(null);            break;        }    }    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));}//GEN-LAST:event_butDuplicaActionPerformedprivate void texClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texClienteKeyReleased    filtraPerCliente();}//GEN-LAST:event_texClienteKeyReleasedprivate void menExportCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menExportCSVActionPerformed    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    if (griglia.getSelectedRowCount() < 0) {        JOptionPane.showMessageDialog(this, "Seleziona almeno una riga da esportare", "Errore Selezione", JOptionPane.INFORMATION_MESSAGE);        return;    } else {        int[] ids = new int[griglia.getSelectedRowCount()];        int i = 0;        int first = griglia.getSelectedRow();        String serie = String.valueOf(griglia.getValueAt(first, griglia.getColumnByName("serie")));        String numero = String.valueOf(griglia.getValueAt(first, griglia.getColumnByName("numero")));        String nomeCliente = String.valueOf(griglia.getValueAt(first, griglia.getColumnByName(acquisto ? "Fornitore" : "Cliente")));        String nomeFile = "documento_" + Db.getDescTipoDoc(acquisto ? Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO : Db.TIPO_DOCUMENTO_ORDINE) + "_" + serie + numero + "_" + nomeCliente;        nomeFile = FileUtils.normalizeFileName(nomeFile);        String input = JOptionPane.showInputDialog(this, "Inserisci il nome con cui vuoi salvare il file: ", nomeFile);        if (input != null) {            if (!input.equals("")) {                nomeFile = FileUtils.normalizeFileNameDir(input);                for (int rigaSel : griglia.getSelectedRows()) {                    int id = Integer.parseInt(String.valueOf(griglia.getValueAt(rigaSel, griglia.getColumnByName("id"))));                    ids[i] = id;                    i++;                }            } else {                int res = JOptionPane.showConfirmDialog(this, "Non puoi inserire un nome vuoto per il file. Continuare con il nome standard?", "Errore inserimento", JOptionPane.YES_NO_OPTION);                if (res == JOptionPane.NO_OPTION) {                    this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));                    return;                }            }            InvoicexUtil.exportCSV(acquisto ? Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO : Db.TIPO_DOCUMENTO_ORDINE, ids, nomeFile);        }    }    this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}//GEN-LAST:event_menExportCSVActionPerformedprivate void menDuplicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menDuplicaActionPerformed    butDuplicaActionPerformed(null);}//GEN-LAST:event_menDuplicaActionPerformedprivate void radAcquistoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radAcquistoActionPerformed    setAcquisto(true);}//GEN-LAST:event_radAcquistoActionPerformedprivate void radVenditaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radVenditaActionPerformed    setAcquisto(false);}//GEN-LAST:event_radVenditaActionPerformedprivate void texClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texClienteActionPerformed    // TODO add your handling code here:}//GEN-LAST:event_texClienteActionPerformedprivate void butNew1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNew1ActionPerformed    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));    frmTestOrdine frm = new frmTestOrdine(frmTestOrdine.DB_INSERIMENTO, "", 0, "P", 0, dbOrdine.TIPO_ORDINE, -1, acquisto);    frm.from = this;    frm.comStatoOrdine.setSelectedIndex(4);    Menu m = (Menu) main.getPadre();    m.openFrame(frm, 740, InvoicexUtil.getHeightIntFrame(750));    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));}//GEN-LAST:event_butNew1ActionPerformedprivate void menAzzeraConvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menAzzeraConvActionPerformed    int id = CastUtils.toInteger(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("id")));    try {        DbUtils.tryExecQuery(Db.getConn(), "update " + getNomeTab() + " set doc_tipo = null, doc_serie = null, doc_numero = null, doc_anno = null, convertito = null where id = " + id);    } catch (Exception e) {        e.printStackTrace();    }    dbRefresh();}//GEN-LAST:event_menAzzeraConvActionPerformedprivate void menCalcEvasoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menCalcEvasoActionPerformed    int id = CastUtils.toInteger(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("id")));    InvoicexUtil.aggiornaStatoEvasione(acquisto ? Db.TIPO_DOCUMENTO_ORDINE_ACQUISTO : Db.TIPO_DOCUMENTO_ORDINE, id);    dbRefresh();}//GEN-LAST:event_menCalcEvasoActionPerformedprivate void menColAggRiferimentoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColAggRiferimentoClienteActionPerformed    System.out.println("ColAgg_RiferimentoCliente = " + menColAggRiferimentoCliente.isSelected());    main.fileIni.setValue("pref", "ColAgg_RiferimentoCliente", menColAggRiferimentoCliente.isSelected());    dbRefresh();}//GEN-LAST:event_menColAggRiferimentoClienteActionPerformedprivate void storicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storicoActionPerformed    int id = Integer.parseInt(String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("id"))));    InvoicexUtil.leggiDaStorico("ordine", id);}//GEN-LAST:event_storicoActionPerformedprivate void comFiltroTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comFiltroTipoActionPerformed    String prevOrd = String.valueOf(comFiltroTipo.getSelectedItem());    String tipo = prevOrd.equals("Preventivi") ? "preventivo" : prevOrd.equals("Ordini") ? "ordine" : "";    if (tipo.equals("")) {        sqlWhereTipo = "";    } else {        sqlWhereTipo = " AND t.stato_ordine like '%" + tipo + "%' ";    }    dbRefresh();}//GEN-LAST:event_comFiltroTipoActionPerformedprivate void comFiltroFatturatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comFiltroFatturatoActionPerformed    if (comFiltroFatturato.getSelectedItem().equals("Qualsiasi")) {        sqlWhereStato = "";    } else {        sqlWhereStato = " AND t.evaso = '";        if (comFiltroFatturato.getSelectedItem().equals("Si")) {            sqlWhereStato += "S' ";        }        if (comFiltroFatturato.getSelectedItem().equals("Parziale")) {            sqlWhereStato += "P' ";        }        if (comFiltroFatturato.getSelectedItem().equals("No")) {            sqlWhereStato += "' ";        }    }    dbRefresh();}//GEN-LAST:event_comFiltroFatturatoActionPerformedprivate void btnNewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewAActionPerformed    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));    frmTestOrdine frm = new frmTestOrdine(frmTestOrdine.DB_INSERIMENTO, "", 0, "P", 0, dbOrdine.TIPO_ORDINE, -1, acquisto, "A");    frm.from = this;    frm.comStatoOrdine.setSelectedItem("Ordine");    Menu m = (Menu) main.getPadre();    m.openFrame(frm, 740, InvoicexUtil.getHeightIntFrame(750));    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));}//GEN-LAST:event_btnNewAActionPerformedprivate void btnNewBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewBActionPerformed    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));    frmTestOrdine frm = new frmTestOrdine(frmTestOrdine.DB_INSERIMENTO, "", 0, "P", 0, dbOrdine.TIPO_ORDINE, -1, acquisto, "B");    frm.from = this;    frm.comStatoOrdine.setSelectedItem("Ordine");    Menu m = (Menu) main.getPadre();    m.openFrame(frm, 740, InvoicexUtil.getHeightIntFrame(750));    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));}//GEN-LAST:event_btnNewBActionPerformedprivate void butConvDdtActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConvDdtActionPerformed1    butConvDdtActionPerformed(evt);}//GEN-LAST:event_butConvDdtActionPerformed1    private Integer convertiPreventivoInOrdine(int idDocumento) {        String sql = "SELECT MAX(numero)+1 FROM " + getNomeTab() + " WHERE YEAR(data) = YEAR(CURRENT_DATE) AND serie = " + Db.pc("", Types.CHAR);        int newNumero = 1;        try {            newNumero = CastUtils.toInteger(DbUtils.getObject(Db.getConn(), sql));        } catch (Exception e) {            e.printStackTrace();            return null;        }        sql = "select serie, numero, anno from " + getNomeTab() + " where id = " + Db.pc(idDocumento, Types.INTEGER);        List<Map> doc = null;        try {            doc = DbUtils.getListMap(Db.getConn(), sql);        } catch (Exception ex) {            ex.printStackTrace();            SwingUtils.showErrorMessage(this, "Impossibile trovare il documento " + idDocumento);            return null;        }        sql = "UPDATE " + getNomeTab() + " SET ";        sql += "serie = " + Db.pc("", Types.CHAR) + ", ";        sql += "numero = " + Db.pc(newNumero, Types.INTEGER) + ", ";        sql += "anno = YEAR(CURRENT_DATE), ";        sql += "data = CURRENT_DATE, ";        sql += "stato_ordine = " + Db.pc("Ordine", Types.VARCHAR) + " ";        sql += "WHERE id = " + Db.pc(idDocumento, Types.INTEGER);        if (Db.executeSql(sql)) {            sql = "UPDATE " + getNomeTabr() + " SET ";            sql += "serie = " + Db.pc("", Types.CHAR) + ", ";            sql += "numero = " + Db.pc(newNumero, Types.INTEGER) + ", ";            sql += "anno = YEAR(CURRENT_DATE) ";            sql += "WHERE id_padre = " + Db.pc(idDocumento, Types.INTEGER);            if (Db.executeSql(sql)) {                try {                    //rinumero le scadenze se ci sono                    if (!acquisto) {                        sql = "UPDATE scadenze SET ";                        sql += " documento_serie = " + Db.pc("", Types.CHAR) + ", ";                        sql += " documento_numero = " + Db.pc(newNumero, Types.INTEGER) + ", ";                        sql += " documento_anno = YEAR(CURRENT_DATE) ";                        sql += "WHERE documento_tipo = '" + Db.TIPO_DOCUMENTO_ORDINE + "'";                        sql += " and documento_serie = " + Db.pc(doc.get(0).get("serie"), Types.CHAR);                        sql += " and documento_numero = " + Db.pc(doc.get(0).get("numero"), Types.INTEGER);                        sql += " and documento_anno = " + Db.pc(doc.get(0).get("anno"), Types.INTEGER);                        Db.executeSql(sql);                    }                } catch (Exception e) {                    e.printStackTrace();                }                return newNumero;            }        }        return null;    }    private void menConvOrdineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menConvOrdineActionPerformed        main.loadIni();        if (griglia.getSelectedRowCount() != 1) {            String messaggio = griglia.getSelectedRowCount() <= 0 ? "Seleziona un documento prima!" : "Puoi selezionare un solo documento per volta";            SwingUtils.showErrorMessage(this, messaggio);        } else {            int row = griglia.getSelectedRow();            String stato = CastUtils.toString(griglia.getValueAt(row, griglia.getColumnByName("Stato")));            if (stato.indexOf("Preventivo") < 0) {                SwingUtils.showErrorMessage(this, "Il documento Ã¨ giÃ  un ordine");            } else {                Integer esito = convertiPreventivoInOrdine(CastUtils.toInteger(griglia.getValueAt(row, griglia.getColumnByName("ID"))));                if (esito != null) {                    griglia.dbRefresh();                    SwingUtils.showInfoMessage(this, "Preventivo convertito nell'ordine " + esito);                } else {                    SwingUtils.showErrorMessage(this, "Errore durante la conversione");                }            }        }        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));    }//GEN-LAST:event_menConvOrdineActionPerformed    private void menColoraRossoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColoraRossoActionPerformed        InvoicexUtil.salvaColoreRiga("rosso", getNomeTab(), griglia);    }//GEN-LAST:event_menColoraRossoActionPerformed    private void menColoraBluActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColoraBluActionPerformed        InvoicexUtil.salvaColoreRiga("blu", getNomeTab(), griglia);    }//GEN-LAST:event_menColoraBluActionPerformed    private void menColoraGialloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColoraGialloActionPerformed        InvoicexUtil.salvaColoreRiga("giallo", getNomeTab(), griglia);    }//GEN-LAST:event_menColoraGialloActionPerformed    private void menTogliColoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menTogliColoreActionPerformed        InvoicexUtil.salvaColoreRiga("", getNomeTab(), griglia);    }//GEN-LAST:event_menTogliColoreActionPerformed    private void texSerieFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texSerieFocusLost        if (this.texSerie.getText().length() == 0) {            sqlWhereSerie = "";            dbRefresh();        } else {            sqlWhereSerie = " and serie = " + Db.pc(this.texSerie.getText(), Types.VARCHAR);            dbRefresh();        }    }//GEN-LAST:event_texSerieFocusLost    private void texSerieKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texSerieKeyPressed        if (evt.getKeyCode() == evt.VK_ENTER) {            texSerieFocusLost(null);        }    }//GEN-LAST:event_texSerieKeyPressed    // Variables declaration - do not modify//GEN-BEGIN:variables    private javax.swing.JButton btnNewA;    private javax.swing.JButton btnNewB;    private javax.swing.JButton butConvDdt;    private javax.swing.JButton butConvFattura;    private javax.swing.JButton butConvFatturaAcc;    private javax.swing.JButton butConvProforma;    private javax.swing.JButton butDele;    private javax.swing.JButton butDuplica;    private javax.swing.JButton butEmail;    private javax.swing.JButton butModi;    private javax.swing.JButton butNew;    private javax.swing.JButton butNew1;    private javax.swing.JButton butPrin;    private javax.swing.JButton butRefresh;    private javax.swing.ButtonGroup buttonGroup1;    public tnxbeans.tnxComboField comCliente;    private javax.swing.JComboBox comFiltroFatturato;    private javax.swing.JComboBox comFiltroTipo;    public tnxbeans.tnxDbGrid griglia;    private javax.swing.JLabel jLabel1;    private javax.swing.JLabel jLabel10;    private javax.swing.JLabel jLabel11;    private javax.swing.JLabel jLabel12;    private javax.swing.JLabel jLabel2;    private javax.swing.JLabel jLabel3;    private javax.swing.JLabel jLabel4;    private javax.swing.JLabel jLabel5;    private javax.swing.JLabel jLabel6;    private javax.swing.JLabel jLabel7;    private javax.swing.JLabel jLabel8;    private javax.swing.JLabel jLabel9;    private javax.swing.JPanel jPanel1;    private javax.swing.JPanel jPanel2;    private javax.swing.JPanel jPanel3;    private javax.swing.JPanel jPanel4;    private javax.swing.JPanel jPanel5;    public javax.swing.JPanel jPanel6;    private javax.swing.JPanel jPanel7;    private javax.swing.JPanel jPanel8;    public javax.swing.JPopupMenu jPopupMenu1;    private javax.swing.JScrollPane jScrollPane1;    private javax.swing.JLabel labTotale;    private javax.swing.JMenuItem menAzzeraConv;    private javax.swing.JMenuItem menCalcEvaso;    private javax.swing.JMenu menColAgg;    private javax.swing.JCheckBoxMenuItem menColAggRiferimentoCliente;    private javax.swing.JMenuItem menColoraBlu;    private javax.swing.JMenuItem menColoraGiallo;    private javax.swing.JMenu menColoraRiga;    private javax.swing.JMenuItem menColoraRosso;    private javax.swing.JMenuItem menConvOrdine;    private javax.swing.JMenuItem menCreaDdt;    private javax.swing.JMenuItem menCreaFattura;    private javax.swing.JMenuItem menCreaFatturaAcc;    private javax.swing.JMenuItem menCreaFatturaPro;    private javax.swing.JMenuItem menDuplica;    private javax.swing.JMenuItem menElimina;    private javax.swing.JMenuItem menExportCSV;    private javax.swing.JMenuItem menModifica;    private javax.swing.JMenuItem menPdfEmail;    private javax.swing.JMenuItem menStampa;    private javax.swing.JMenuItem menTogliColore;    private javax.swing.JPanel panDati;    private javax.swing.JRadioButton radAcquisto;    private javax.swing.JRadioButton radVendita;    private javax.swing.JPopupMenu.Separator sep1;    private javax.swing.JMenuItem storico;    private javax.swing.JTextField texAl;    public javax.swing.JTextField texCliente;    private javax.swing.JTextField texDal;    private javax.swing.JTextField texLimit;    private javax.swing.JTextField texSerie;    private javax.swing.JToolBar tooMenu;    // End of variables declaration//GEN-END:variables    public void dbRefresh() {        java.util.Hashtable colsWidthPerc = new java.util.Hashtable();        colsWidthPerc.put("Serie", new Double(5));        colsWidthPerc.put("Numero", new Double(5));        colsWidthPerc.put("Anno", new Double(0));        colsWidthPerc.put("Convertito", new Double(8));        colsWidthPerc.put("convertito2", new Double(0));        colsWidthPerc.put("Stato", new Double(10));        colsWidthPerc.put("Data", new Double(12));        colsWidthPerc.put("Consegna", new Double(10));        colsWidthPerc.put("ID", new Double(0));        if (acquisto) {            colsWidthPerc.put("Fornitore", new Double(25));        } else {            colsWidthPerc.put("Cliente", new Double(25));        }        colsWidthPerc.put("riferimento", new Double(10));        colsWidthPerc.put("Totale Imponibile", new Double(15));        colsWidthPerc.put("evaso", new Double(5));        if (main.fileIni.getValueBoolean("pref", "ColAgg_RiferimentoCliente", false)) {            colsWidthPerc.put("Riferimento Cliente", new Double(15));        }        if (main.pluginEmail) {            colsWidthPerc.put("Mail Inviata", new Double(10));        }        colsWidthPerc.put("color", new Double(0));        this.griglia.columnsSizePerc = colsWidthPerc;        int oldsel = griglia.getSelectedRow();        int oldselid = -1;        try {            if (oldsel >= 0) {                oldselid = CastUtils.toInteger(griglia.getValueAt(oldsel, griglia.getColumnByName("id")));            }        } catch (Exception e) {        }        String sql;        sql = "select ";        sql += " t.serie AS Serie, ";        sql += " t.numero AS Numero, ";        sql += " t.anno AS Anno, ";        sql += " t.doc_numero AS Convertito, ";        sql += " t.convertito AS convertito2, ";        sql += " t.stato_ordine AS Stato, ";        sql += " t.data AS Data ,";        sql += " t.data_consegna AS Consegna ,";        sql += " t.id AS ID ,";        if (acquisto) {            sql += " clie_forn.ragione_sociale As Fornitore, ";        } else {            sql += " clie_forn.ragione_sociale As Cliente, ";        }        if (main.getPersonalContain("snj") && !acquisto) {            sql += " tipo_snj as 'Tipologia', ";        }        sql += " riferimento, ";        sql += " t.totale_imponibile AS 'Totale Imponibile'";        sql += " , t.evaso ";        if (main.fileIni.getValueBoolean("pref", "ColAgg_RiferimentoCliente", false)) {            sql += " , clie_forn.persona_riferimento as 'Riferimento Cliente'";        }        if (main.pluginEmail) {            sql += " , t.mail_inviata as 'Mail Inviata'";        }        sql += " , color ";        sql += " from " + getNomeTab() + " t left join clie_forn on";        if (acquisto) {            sql += " t.fornitore = clie_forn.codice";        } else {            sql += " t.cliente = clie_forn.codice";        }        //sql += " where t.stato <> 'O'";        sql += " where 1 = 1 ";        sql += sqlWhereDaData;        sql += sqlWhereAData;        sql += sqlWhereCliente;        sql += sqlWhereTipo;        sql += sqlWhereStato;        sql += sqlWhereSerie;        sql += " order by t.data desc,t.numero desc";        sql += sqlWhereLimit;        int selrow = griglia.getSelectedRow();        this.griglia.dbOpen(Db.getConn(), sql, Db.INSTANCE);        if (main.pluginEmail) {            try {                griglia.getColumn("Mail Inviata").setCellRenderer(new EmailCellRenderer());            } catch (Exception e) {                e.printStackTrace();            }        }        griglia.getSelectionModel().setSelectionInterval(selrow, selrow);        griglia.getColumn("Convertito").setCellRenderer(flagRender);        griglia.getColumn("evaso").setCellRenderer(evasoRender);        griglia.getTableHeader().setReorderingAllowed(false);        //calcolo il totale        if (this.visualizzaTotali == true) {            double totale = 0;            int totaleDocumenti = 0;            int contaDocumenti = 0;            ResultSet somma = Db.openResultSet(sql);            ResultSet rtota = Db.openResultSet("select count(*) from " + getNomeTab());            try {                while (somma.next()) {                    totale += somma.getDouble("totale imponibile");                    contaDocumenti++;                }                if (rtota.next()) {                    totaleDocumenti = rtota.getInt(1);                }                this.labTotale.setText("documenti visualizzati " + contaDocumenti + " di " + totaleDocumenti + " / totale documenti visualizzati \u20ac " + it.tnx.Util.formatValutaEuro(totale) + " ");            } catch (Exception err) {                err.printStackTrace();                this.labTotale.setText("");            }        } else {            this.labTotale.setText("");        }        try {            if (oldsel != -1) {                //riseleziono                int colid = griglia.getColumnByName("id");                for (int i = 0; i < griglia.getRowCount(); i++) {                    if (CastUtils.toInteger(griglia.getValueAt(i, colid)) == oldselid) {                        griglia.getSelectionModel().setSelectionInterval(i, i);                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    private static boolean controllaScontoPresente(String dbSerie, int dbNumero, int dbAnno, boolean acquistoStampa) throws SQLException {        String tabella = "righ_ordi";        if (acquistoStampa) {            tabella = "righ_ordi_acquisto";        }        String sql = "";        sql = sql + "select count(*) from " + tabella + " where serie = " + Db.pc(dbSerie, 12);        sql = sql + " and numero = " + dbNumero;        sql = sql + " and anno = " + dbAnno;        sql = sql + " and ((sconto1 is not null and sconto1 != 0)";        sql = sql + " or (sconto2 is not null and sconto2 != 0))";        ResultSet r = Db.openResultSet(sql);        return ((r.next()) && (r.getInt(1) > 0));    }    static public void stampa(final String tipoFattura, final String dbSerie, final int dbNumero, final int dbAnno, final boolean acquisto, final Integer id) {        stampa(tipoFattura, dbSerie, dbNumero, dbAnno, false, false, false, acquisto, id);    }    static public Object stampa(final String tipoFattura, final String dbSerie, final int dbNumero, final int dbAnno, final boolean generazionePdfDaJasper, final boolean attendi, final boolean booleanPerEmail, final boolean f_acquisto, final Integer id) {        return stampa(tipoFattura, dbSerie, dbNumero, dbAnno, generazionePdfDaJasper, attendi, booleanPerEmail, f_acquisto, null, id);    }    static public Object stampa(final String tipoFattura, final String dbSerie, final int dbNumero, final int dbAnno, final boolean generazionePdfDaJasper, final boolean attendi, final boolean booleanPerEmail, final boolean f_acquisto, final ArrayList<String> concat, final Integer id) {        Object ret = null;        //tipoFattura        String paramTipoStampa = "tipoStampaOrdine";        String tempts = "";        if (!StringUtils.isBlank(main.fileIni.getValue("stampe", paramTipoStampa))) {            tempts = main.fileIni.getValue("stampe", paramTipoStampa);        } else {            tempts = main.fileIni.getValue("pref", paramTipoStampa, "");        }        final String prefTipoStampa = tempts;//        //salvo img logo in db percÃ¨ le stampe la caricono da db invece che da file per integrazione con client manager//        InvoicexUtil.salvaLogoInDb(main.fileIni.getValue("varie", "percorso_logo_stampe"));        //nuovo tipo di stampa        if (prefTipoStampa.endsWith(".jrxml")) {            SwingWorker work = new SwingWorker() {                public Object construct() {                    final JDialog dialog = new JDialogCompilazioneReport();                    Object ret = null;                    try {                        dialog.setLocationRelativeTo(null);                        dialog.setVisible(true);                        File freport = new File(main.wd + Reports.DIR_REPORTS + Reports.DIR_FATTURE + prefTipoStampa);                                                JasperReport rep = Reports.getReport(freport);                        //controllo modifiche al report                        //controllo modifiche al report                        String suffisso = "";                        boolean stampaSconti = true;                        try {                            if (main.getPersonalContain("emicad")) {                                if (!controllaScontoPresente(dbSerie, dbNumero, dbAnno, f_acquisto)) {                                    stampaSconti = false;                                }                            }                        } catch (Exception e) {                        }                        //logo                        if (InvoicexUtil.controllaPosizioneLogoSuffisso().length() > 0) {                            suffisso += InvoicexUtil.controllaPosizioneLogoSuffisso();                        }                        if (suffisso.length() == 0) {                            //no elaborazioni                            suffisso += ".jasper";                        } else {                            suffisso += "_gen_invoicex.jasper";                        }                        //controllo se giÃ  presente                        String newFile = freport.getAbsolutePath() + suffisso;                        File newFileFile = new File(newFile);                        boolean ricompilare = true;                        if (newFileFile.exists() && newFileFile.lastModified() >= freport.lastModified()) {                            ricompilare = false;                            //rep = JasperManager.loadReport(newFile);                            rep = (JasperReport) JRLoader.loadObject(newFile);                        }                        JasperDesign repdes = JRXmlLoader.load(freport);                        if (ricompilare) {                            try {                                repdes = InvoicexUtil.controllaLogo(freport, rep, repdes);                            } catch (Exception e) {                                e.printStackTrace();                            }                            JasperCompileManager.compileReportToFile(repdes, newFile);//                            rep = JasperManager.loadReport(newFile);                            rep = (JasperReport) JRLoader.loadObject(newFile);                        }                        //eventuali personalizzazioni                        try {                            HashMap params = new HashMap();                            params.put("source", this);                            params.put("freport", freport);                            params.put("rep", rep);                            params.put("repdes", repdes);                            InvoicexEvent event = new InvoicexEvent(params);                            event.type = InvoicexEvent.TYPE_PREPARA_JASPER;                            HashMap reth = (HashMap) main.events.fireInvoicexEventWResult(event);                            if (reth != null) {                                rep = (JasperReport) reth.get("rep");                            }                        } catch (Exception err) {                            err.printStackTrace();                        }                        java.util.Map params = new java.util.HashMap();                        reports.JRDSOrdine jrInvoice = new reports.JRDSOrdine(Db.getConn(), dbSerie, dbNumero, dbAnno, booleanPerEmail, f_acquisto, id);                        boolean italian = false;                        if (main.fileIni.getValueBoolean("pref", "soloItaliano", true)) {                            italian = true;                        } else {                            if (jrInvoice.codiceCliente != null) {                                Cliente cliente = new Cliente(jrInvoice.codiceCliente);                                italian = cliente.isItalian();                            }                        }                        ResourceBundle rb = null;                        if (italian) {                            rb = ResourceBundle.getBundle("gestioneFatture/print/labels");                            params.put("lang", "it");                        } else {                            rb = ResourceBundle.getBundle("gestioneFatture/print/labels", java.util.Locale.UK);                            params.put("lang", "en");                        }                        for (Enumeration e = rb.getKeys(); e.hasMoreElements();) {                            String k = (String) e.nextElement();                            params.put("e_" + k, rb.getString(k));                        }                        //pogledas kako dajo noter v params kolono quantita in naredis isto za posizione magazzino://                        tipo:                        //parmas.put("<chiave_ki je usta kot v jasper>","valore_isti_kot_jeV_jasper_String")                                                                        params.put("myds", jrInvoice);                        params.put("scadenze", main.fileIni.getValueBoolean("pref", "scadenzeOrdini", false));                        if (stampaSconti) {                            params.put("stampa_sconti", "SI");                        } else {                            params.put("stampa_sconti", "NO");                        }                        params.put("stampaPivaSotto", main.fileIni.getValueBoolean("pref", "stampaPivaSotto", false));                        String timbrofirma = "";                        try {                            List<Map> dati_azienda = DbUtils.getListMap(Db.getConn(), "select testo_timbro_firma, stampare_timbro_firma from dati_azienda limit 1");                            if (dati_azienda.size() > 0) {                                String stamparetf = CastUtils.toString(dati_azienda.get(0).get("stampare_timbro_firma"));                                boolean stampare = false;                                //Non stampare mai, Stampa su Preventivi/Ordini/Conferme d'ordine, Stampa su Ordini/Conferme d'ordine                                if (stamparetf.equalsIgnoreCase("Non stampare mai")) {                                    stampare = false;                                } else if (stamparetf.equalsIgnoreCase("Stampa su Preventivi/Ordini/Conferme d'ordine")) {                                    stampare = true;                                } else if (stamparetf.equalsIgnoreCase("Stampa su Ordini/Conferme d'ordine")) {                                    String tab = "test_ordi";                                    if (f_acquisto) {                                        tab += "_acquisto";                                    }                                    String stato = CastUtils.toString(DbUtils.getObject(Db.getConn(), "select stato_ordine from " + tab + " where serie = " + Db.pc(dbSerie, Types.VARCHAR) + " and numero = " + dbNumero + " and anno = " + dbAnno));                                    if (stato.toLowerCase().indexOf("preventiv") >= 0) {                                        stampare = false;                                    } else {                                        stampare = true;                                    }                                }                                if (stampare) {                                    timbrofirma = CastUtils.toString(dati_azienda.get(0).get("testo_timbro_firma"));                                    timbrofirma = StringUtils.replace(timbrofirma, " ", "&nbsp;");                                }                            }                        } catch (Exception e) {                            e.printStackTrace();                        }                        params.put("timbro_e_firma", timbrofirma);//                        JasperPrint print = JasperManager.fillReport(rep, params, jrInvoice);                        JasperPrint print = JasperFillManager.fillReport(rep, params, jrInvoice);                        java.util.prefs.Preferences preferences = java.util.prefs.Preferences.userNodeForPackage(main.class);                        if (generazionePdfDaJasper) {                            //File fd = new File("tempEmail/documento_" + tipoFattura + "_" + dbSerie + String.valueOf(dbNumero) + "_" + jrInvoice.nomeClienteFile + ".pdf");                            String nomeFile = "documento_" + dbSerie + String.valueOf(dbNumero) + "_" + jrInvoice.nomeClienteFile + ".pdf";                            nomeFile = "tempEmail/" + FileUtils.normalizeFileName(nomeFile);                            File fd = new File(main.wd + nomeFile);                            String nomeFilePdf = fd.getAbsolutePath();//                            JasperExportManager.exportReportToPdfFile(print, nomeFilePdf);                            JasperExportManager.exportReportToPdfFile(print, nomeFilePdf);                            ret = nomeFilePdf;                        } else {//                            if (preferences.getBoolean("stampaPdf", false)) {                            if (main.fileIni.getValueBoolean("pref", "stampaPdf", false)) {                                String nomeFilePdf = main.wd + "tempPrnOrdine.pdf";                                JasperExportManager.exportReportToPdfFile(print, nomeFilePdf);                                //SwingUtils.open(new File(nomeFilePdf));                                Util.start2(nomeFilePdf);                            } else {                                final JasperPrint printer = print;                                Thread t = new Thread(new Runnable() {                                    public void run() {                                        JDialogJasperViewer viewr = new JDialogJasperViewer(main.getPadre(), true, printer);                                        viewr.setTitle("Anteprima di stampa");                                        viewr.setLocationRelativeTo(null);                                        viewr.setVisible(true);                                    }                                });                                t.start();                            }                        }                    } catch (JRException jrerr) {                        jrerr.printStackTrace();                        JOptionPane.showMessageDialog(Menu.getCurrenWindow(), jrerr.toString(), "Errore", JOptionPane.ERROR_MESSAGE);                    } finally {                        dialog.setVisible(false);                    }//                    main.getPadre().toFront();                    if (main.getPersonalContain("emicad") && main.fileIni.getValueBoolean("emicad", "attiva", false) && !f_acquisto && concat != null) {                        if ((!concat.get(0).equals("") || !concat.get(1).equals(""))) {                            String nomeFilePdf = (String) ret;                            nomeFilePdf = nomeFilePdf.replace(".pdf", "_temp.pdf");                            File pdf = new File((String) ret);                            File tmp = new File(nomeFilePdf);                            if (concat.get(0).equals("")) {                                concat.set(0, pdf.getAbsolutePath());                            } else if (concat.get(1).equals("")) {                                concat.set(1, pdf.getAbsolutePath());                            } else {                                concat.add(2, concat.get(1));                                concat.set(1, pdf.getAbsolutePath());                            }                            String[] string_concat = new String[concat.size()];                            concat.toArray(string_concat);                            ItextUtil.concatenate(tmp.getAbsolutePath(), string_concat);                            if (pdf.delete()) {                                tmp.renameTo(pdf);                            }                        }                    }                    return ret;                }            };            work.start();            if (attendi) {                ret = work.get();                System.out.println("get " + work + " : " + ret);            }        } else {//            prnDdt_tnx temp = new prnDdt_tnx(dbSerie, dbNumero, dbAnno);            System.err.println("rimmosso veccia stampa");        }        return ret;    }    private void setAcquisto(boolean acquisto) {        this.acquisto = acquisto;        // Modifiche per SNJ        if (main.getPersonalContain("snj") && !acquisto) {            // Nascondo pulsante per nuovo ordine se attiva personalizzazione            this.butNew1.setVisible(false);            this.btnNewA.setVisible(true);            this.btnNewB.setVisible(true);        } else {            // Nascondo i due personalizzati se non attiva personalizzazione            this.butNew1.setVisible(true);            this.btnNewA.setVisible(false);            this.btnNewB.setVisible(false);        }        if (acquisto) {            radAcquisto.setSelected(true);            setTitle("Gestione Preventivi / Ordini di Acquisto");            jLabel8.setText("fornitore");            butConvFattura.setVisible(true);            butConvProforma.setVisible(false);            butConvFatturaAcc.setVisible(false);//            butConvDdt.setVisible(false);//            jMenuItem1.setVisible(false);//            menCreaFattura.setVisible(false);            menCreaFatturaAcc.setVisible(false);            menCreaFatturaPro.setVisible(false);            this.griglia.dbNomeTabella = "test_ordi_acquisto";        } else {            radVendita.setSelected(true);            setTitle("Gestione Preventivi / Ordini di Vendita");            jLabel8.setText("cliente");            butConvFattura.setVisible(true);            butConvProforma.setVisible(true);            butConvFatturaAcc.setVisible(true);//            butConvDdt.setVisible(true);//            jMenuItem1.setVisible(true);            menCreaFattura.setVisible(true);            menCreaFatturaAcc.setVisible(true);            menCreaFatturaPro.setVisible(true);            this.griglia.dbNomeTabella = "test_ordi";        }        this.griglia.flagUsaThread = false;        java.util.Hashtable colsAlign = new java.util.Hashtable();        colsAlign.put("Totale Imponibile", "RIGHT_CURRENCY");        this.griglia.columnsAlign = colsAlign;        Vector chiave = new Vector();        chiave.add("Serie");        chiave.add("Numero");        chiave.add("Anno");        this.griglia.dbChiave = chiave;        //carico le prefereences utente        try {            visualizzaTotali = main.fileIni.getValueBoolean("pref", "visualizzaTotali", true);            String limit = main.fileIni.getValue("pref", "limit", "50");            this.texLimit.setText(limit);            if (main.fileIni.getValueBoolean("pref", "visualizzaAnnoInCorso", false)) {                texDal.setText(DateUtils.getDateStartYear());                texDalFocusLost(null);            } else {                texLimitFocusLost(null);            }        } catch (Exception err) {            err.printStackTrace();        }        try {            InvoicexEvent event = new InvoicexEvent(this);            event.type = InvoicexEvent.TYPE_FRMELENORDINI_SETACQUISTO;            main.events.fireInvoicexEvent(event);        } catch (Exception err) {            err.printStackTrace();        }        int permessoOrdine = acquisto ? Permesso.PERMESSO_ORDINI_ACQUISTO : Permesso.PERMESSO_ORDINI_VENDITA;        int permessoDdt = acquisto ? Permesso.PERMESSO_DDT_ACQUISTO : Permesso.PERMESSO_DDT_VENDITA;        int permessoFatture = acquisto ? Permesso.PERMESSO_FATTURE_ACQUISTO : Permesso.PERMESSO_FATTURE_VENDITA;        if (!main.utente.getPermesso(permessoOrdine, Permesso.PERMESSO_TIPO_SCRITTURA)) {            this.butNew.setEnabled(false);            this.butNew1.setEnabled(false);            this.btnNewA.setEnabled(false);            this.btnNewB.setEnabled(false);            this.butDuplica.setEnabled(false);            this.menDuplica.setEnabled(false);            this.menAzzeraConv.setEnabled(false);            this.menCalcEvaso.setEnabled(false);            this.butModi.setEnabled(false);            this.menModifica.setEnabled(false);        }        if (!main.utente.getPermesso(permessoOrdine, Permesso.PERMESSO_TIPO_CANCELLA)) {            this.butDele.setEnabled(false);            this.menElimina.setEnabled(false);        }        if (!main.utente.getPermesso(permessoFatture, Permesso.PERMESSO_TIPO_SCRITTURA)) {            this.butConvFattura.setEnabled(false);            this.butConvFatturaAcc.setEnabled(false);            this.butConvProforma.setEnabled(false);            this.menCreaFattura.setEnabled(false);            this.menCreaFatturaAcc.setEnabled(false);            this.menCreaFatturaPro.setEnabled(false);        }        if (!main.utente.getPermesso(permessoDdt, Permesso.PERMESSO_TIPO_SCRITTURA)) {            this.butConvDdt.setEnabled(false);            this.menCreaDdt.setEnabled(false);        }    }    private String getNomeTab() {        if (acquisto) {            return "test_ordi_acquisto";        } else {            return "test_ordi";        }    }    private String getNomeTabr() {        if (acquisto) {            return "righ_ordi_acquisto";        } else {            return "righ_ordi";        }    }}