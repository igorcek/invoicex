/**
 * Invoicex
 * Copyright (c) 2005,2006,2007 Marco Ceccarelli, Tnx snc
 *
 * Questo software Ã¨ soggetto, e deve essere distribuito con la licenza  
 * GNU General Public License, Version 2. La licenza accompagna il software
 * o potete trovarne una copia alla Free Software Foundation http://www.fsf.org .
 *
 * This software is subject to, and may be distributed under, the
 * GNU General Public License, Version 2. The license should have
 * accompanied the software or you may obtain a copy of the license
 * from the Free Software Foundation at http://www.fsf.org .
 * 
 * --
 * Marco Ceccarelli (m.ceccarelli@tnx.it)
 * Tnx snc (http://www.tnx.it)
 *
 */
package gestioneFatture;

import it.tnx.Db;
import it.tnx.commons.CastUtils;
import it.tnx.commons.FormatUtils;
import it.tnx.commons.KeyValuePair;
import it.tnx.commons.SwingUtils;
import it.tnx.commons.cu;
import it.tnx.invoicex.InvoicexUtil;
import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Hashtable;
import java.util.Vector;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import tnxbeans.DbEvent;
import tnxbeans.DbListener;
import tnxbeans.tnxDbPanel;

public class frmListini
        extends javax.swing.JInternalFrame {

    tnxbeans.tnxComboField comboToRefresh;
    frmImportArtiExcel padre = null;
    String codice_vecchio = null;

    /** Creates new form frmDati_blank */
    public frmListini(frmImportArtiExcel padre) {
        this();
        this.padre = padre;
    }

    public frmListini() {
        initComponents();
        visRicarico(ricarico_flag.isSelected());

        //associo il panel ai dati
        this.dati.dbNomeTabella = "tipi_listino";

        Vector chiave = new Vector();
        chiave.add("codice");
        this.dati.dbChiave = chiave;
        this.dati.butSave = this.butSave;
        this.dati.butUndo = this.butUndo;
        this.dati.butFind = this.butFind;
        this.dati.butDele = this.butDele;
        this.dati.butNew = this.butNew;
        this.dati.tipo_permesso = it.tnx.accessoUtenti.Permesso.PERMESSO_ANAGRAFICA_ARTICOLI;

        this.dati.dbOpen(Db.getConn(), "select * from tipi_listino order by codice");
        this.dati.dbRefresh();

        //apro la griglia
        //this.griglia.dbEditabile = true;
        this.griglia.dbChiave = chiave;
        this.griglia.flagUsaThread = false;

        Hashtable colsWidthPerc = new Hashtable();
        colsWidthPerc.put("codice", new Double(10));
        colsWidthPerc.put("descrizione", new Double(50));
        colsWidthPerc.put("tipo", new Double(20));
        this.griglia.columnsSizePerc = colsWidthPerc;
        this.griglia.dbOpen(Db.getConn(), "select codice, descrizione, tipo from tipi_listino order by codice");
        this.griglia.dbPanel = this.dati;

        dati.addDbListener(new DbListener() {

            public void statusFired(DbEvent event) {
                if (event.getStatus() == tnxDbPanel.STATUS_REFRESHING) {
                    //ricarico la lista dei listini
                    ricarica_combo_listini();
                    codice_vecchio = texCodice.getText();
                }
            }
        });
        this.dati.dbRefresh();

    }

    private void ricarica_combo_listini() {
        String sql = "select codice, concat(descrizione, ' - ', codice) as descrizio from tipi_listino where codice <> " + Db.pc(texCodice.getText(), Types.VARCHAR) + " and IFNULL(ricarico_flag, 'N') != 'S' order by descrizione";
        System.out.println("sql ricarico combo listini: " + sql);
        SwingUtils.initJComboFromDb(ricarico_listino, Db.getConn(), sql, "codice", "descrizio", new KeyValuePair(null, ""));
        ricarico_listino.setSelectedIndex(0);
        try {
            String temp = (String) dati.dbGetField("ricarico_listino");
            SwingUtils.findJComboKV(ricarico_listino, temp);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void addNew() {
        butNewActionPerformed(null);
        this.tabCent.setSelectedIndex(0);
    }

    public void addNew(tnxbeans.tnxComboField combo) {
        addNew();
        this.comboToRefresh = combo;
    }

    /** This method is called from within the constructor to


     * initialize the form.


     * WARNING: Do NOT modify this code. The content of this method is


     * always regenerated by the Form Editor.


     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panAlto = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        butNew = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        butDele = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        butFind = new javax.swing.JButton();
        jLabel131 = new javax.swing.JLabel();
        butFirs = new javax.swing.JButton();
        butPrev = new javax.swing.JButton();
        butNext = new javax.swing.JButton();
        butLast = new javax.swing.JButton();
        butStampaElenco = new javax.swing.JButton();
        tabCent = new javax.swing.JTabbedPane();
        panDati = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dati = new tnxDbPanel() {
            public Hashtable getCampiAggiuntivi() {
                Hashtable campi = new Hashtable();
                String val = "";
                if (ricarico_listino.getSelectedItem() == null || ricarico_listino.getSelectedIndex() == 0) {
                    val = "null";
                } else {
                    val = Db.pc(((KeyValuePair)ricarico_listino.getSelectedItem()).key.toString(), Types.VARCHAR);
                }
                campi.put("ricarico_listino", val);
                return campi;
            }
        };
        texDescrizione = new tnxbeans.tnxTextField();
        jLabel2111 = new javax.swing.JLabel();
        jLabel2211 = new javax.swing.JLabel();
        texCodice = new tnxbeans.tnxTextField();
        tipo = new tnxbeans.tnxComboField();
        jLabel2213 = new javax.swing.JLabel();
        ricarico_flag = new tnxbeans.tnxCheckBox();
        ricarico_listino = new javax.swing.JComboBox();
        lab_ricarico_listino = new javax.swing.JLabel();
        lab_ricarico_listino1 = new javax.swing.JLabel();
        ricarico_percentuale = new tnxbeans.tnxTextField();
        lab_ricarico_listino2 = new javax.swing.JLabel();
        jLabel2212 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tnxCheckBox1 = new tnxbeans.tnxCheckBox();
        panElen = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        griglia = new tnxbeans.tnxDbGrid();
        jPanel2 = new javax.swing.JPanel();
        butUndo = new javax.swing.JButton();
        butSave = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Anagrafica Listini");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panAlto.setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        butNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-new.png"))); // NOI18N
        butNew.setText("Nuovo");
        butNew.setBorderPainted(false);
        butNew.setMargin(new java.awt.Insets(2, 2, 2, 2));
        butNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNewActionPerformed(evt);
            }
        });
        jToolBar1.add(butNew);

        jLabel1.setText(" ");
        jToolBar1.add(jLabel1);

        butDele.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/places/user-trash.png"))); // NOI18N
        butDele.setText("Elimina");
        butDele.setBorderPainted(false);
        butDele.setMargin(new java.awt.Insets(2, 2, 2, 2));
        butDele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDeleActionPerformed(evt);
            }
        });
        jToolBar1.add(butDele);

        jLabel11.setText(" ");
        jToolBar1.add(jLabel11);

        jLabel12.setText(" ");
        jToolBar1.add(jLabel12);

        jLabel13.setText(" ");
        jToolBar1.add(jLabel13);

        butFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-find.png"))); // NOI18N
        butFind.setText("Trova");
        butFind.setBorderPainted(false);
        butFind.setMargin(new java.awt.Insets(2, 2, 2, 2));
        butFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFindActionPerformed(evt);
            }
        });
        jToolBar1.add(butFind);

        jLabel131.setText(" ");
        jToolBar1.add(jLabel131);

        butFirs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-first.png"))); // NOI18N
        butFirs.setBorderPainted(false);
        butFirs.setMargin(new java.awt.Insets(2, 2, 2, 2));
        butFirs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFirsActionPerformed(evt);
            }
        });
        jToolBar1.add(butFirs);

        butPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-previous.png"))); // NOI18N
        butPrev.setBorderPainted(false);
        butPrev.setMargin(new java.awt.Insets(2, 2, 2, 2));
        butPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrevActionPerformed(evt);
            }
        });
        jToolBar1.add(butPrev);

        butNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-next.png"))); // NOI18N
        butNext.setBorderPainted(false);
        butNext.setMargin(new java.awt.Insets(2, 2, 2, 2));
        butNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNextActionPerformed(evt);
            }
        });
        jToolBar1.add(butNext);

        butLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-last.png"))); // NOI18N
        butLast.setBorderPainted(false);
        butLast.setMargin(new java.awt.Insets(2, 2, 2, 2));
        butLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLastActionPerformed(evt);
            }
        });
        jToolBar1.add(butLast);

        butStampaElenco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-print.png"))); // NOI18N
        butStampaElenco.setText("Stampa elenco");
        butStampaElenco.setBorderPainted(false);
        butStampaElenco.setMargin(new java.awt.Insets(2, 2, 2, 2));
        butStampaElenco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butStampaElencoActionPerformed(evt);
            }
        });
        jToolBar1.add(butStampaElenco);

        panAlto.add(jToolBar1, java.awt.BorderLayout.CENTER);

        getContentPane().add(panAlto, java.awt.BorderLayout.NORTH);

        tabCent.setName("dati"); // NOI18N

        panDati.setName("dati"); // NOI18N
        panDati.setLayout(new java.awt.BorderLayout());

        texDescrizione.setColumns(50);
        texDescrizione.setText("descrizione");
        texDescrizione.setDbDescCampo("");
        texDescrizione.setDbNomeCampo("descrizione");
        texDescrizione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texDescrizioneActionPerformed(evt);
            }
        });

        jLabel2111.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2111.setText("codice");

        jLabel2211.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2211.setText("descrizione");

        texCodice.setColumns(15);
        texCodice.setText("codice");
        texCodice.setDbDescCampo("");
        texCodice.setDbNomeCampo("codice");
        texCodice.setDbTipoCampo("");

        tipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Vendita", "Acquisto", "Generico" }));
        tipo.setDbNomeCampo("tipo");
        tipo.setDbRiempireForceText(true);
        tipo.setDbSalvaKey(false);
        tipo.setDbTipoCampo("");
        tipo.setName("tipo"); // NOI18N

        jLabel2213.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2213.setText("tipo");

        ricarico_flag.setText("Listino a percentuale di ricarico ?");
        ricarico_flag.setDbDescCampo("");
        ricarico_flag.setDbNomeCampo("ricarico_flag");
        ricarico_flag.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        ricarico_flag.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ricarico_flagItemStateChanged(evt);
            }
        });

        ricarico_listino.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ricarico_listinoItemStateChanged(evt);
            }
        });

        lab_ricarico_listino.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lab_ricarico_listino.setText("indica su quale listino");

        lab_ricarico_listino1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lab_ricarico_listino1.setText("indica la percentuale");

        ricarico_percentuale.setColumns(5);
        ricarico_percentuale.setDbDescCampo("");
        ricarico_percentuale.setDbNomeCampo("ricarico_perc");

        lab_ricarico_listino2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lab_ricarico_listino2.setText("%");

        jLabel2212.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2212.setText("IVA");

        jLabel2.setText("<html>\n<i><b>Nota bene</b></i>, selezionando questa casella, quando andrai a compilare<br> un documento per un cliente il quale ha questo listino impostato, <br>il documento verrÃ  calcolato utilizzando i prezzi ivati<br> e facendo lo scorporo dell' iva a fine documento.\n</html>");

        tnxCheckBox1.setText("Prezzi IVA inclusa");
        tnxCheckBox1.setToolTipText("<html> Selezionando questa opzione verrÃ  effettuato lo scorporo IVA soltanto a fine documento e non riga per riga, inoltre<br> verranno presentati in stampa gli importi di riga giÃ  ivati invece che gli imponibili.<br> <br> L'esempio piÃ¹ lampante Ã¨ questo:<br> <br> Articolo di prezzo <b>10,00</b> â¬ (iva inclusa del 21%)<br> - Senza la scelta 'Prezzi IVA inclusa' il totale fattura verrÃ  <b>9,99</b> â¬ perchÃ¨:<br> lo scorporo di 10,00 â¬ genera un imponibile di 8,26 il quale applicando l'iva 21% (1,73 â¬) genererÃ  un totale di 9,99 â¬<br> - Con la scelta 'Prezzi IVA inclusa' il totale fattura verrÃ  direttamente <b>10,00</b> â¬ e verrÃ  calcolato l'imponibile facendo la<br> sottrazione tra il totale e l'iva derivante dallo scorporo del totale giÃ  ivato.<br> </html>");
        tnxCheckBox1.setDbNomeCampo("prezzi_ivati");

        org.jdesktop.layout.GroupLayout datiLayout = new org.jdesktop.layout.GroupLayout(dati);
        dati.setLayout(datiLayout);
        datiLayout.setHorizontalGroup(
            datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(datiLayout.createSequentialGroup()
                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(datiLayout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, datiLayout.createSequentialGroup()
                                .add(jLabel2211)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(texDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 444, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, datiLayout.createSequentialGroup()
                                .add(jLabel2111)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(texCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(datiLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel2212)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(tnxCheckBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(14, 14, 14)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(datiLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel2213)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(datiLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(ricarico_flag, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(datiLayout.createSequentialGroup()
                                .add(lab_ricarico_listino)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(ricarico_listino, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(datiLayout.createSequentialGroup()
                                .add(lab_ricarico_listino1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(ricarico_percentuale, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(1, 1, 1)
                                .add(lab_ricarico_listino2)))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        datiLayout.linkSize(new java.awt.Component[] {jLabel2111, jLabel2211, jLabel2212, jLabel2213}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        datiLayout.linkSize(new java.awt.Component[] {lab_ricarico_listino, lab_ricarico_listino1}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        datiLayout.setVerticalGroup(
            datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(datiLayout.createSequentialGroup()
                .addContainerGap()
                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2111)
                    .add(texCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(5, 5, 5)
                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(texDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2211))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2212)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(tnxCheckBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2213)
                    .add(tipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(38, 38, 38)
                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ricarico_flag, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lab_ricarico_listino1)
                    .add(ricarico_percentuale, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lab_ricarico_listino2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(datiLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lab_ricarico_listino)
                    .add(ricarico_listino, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(dati);

        panDati.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        tabCent.addTab("dati", panDati);

        panElen.setName("elenco"); // NOI18N
        panElen.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(griglia);

        panElen.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        tabCent.addTab("elenco", panElen);

        getContentPane().add(tabCent, java.awt.BorderLayout.CENTER);

        butUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/edit-undo.png"))); // NOI18N
        butUndo.setText("Annulla");
        butUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUndoActionPerformed(evt);
            }
        });
        jPanel2.add(butUndo);

        butSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/devices/media-floppy.png"))); // NOI18N
        butSave.setText("Salva");
        butSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSaveActionPerformed(evt);
            }
        });
        jPanel2.add(butSave);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butStampaElencoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStampaElencoActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        int[] headerWidth = {10, 70, 10};
        String nomeFilePdf = this.griglia.stampaTabella("Elenco LISTINI", headerWidth);
        Util.start(nomeFilePdf);
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_butStampaElencoActionPerformed

    private void butLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLastActionPerformed
        this.griglia.dbGoLast();
    }//GEN-LAST:event_butLastActionPerformed

    private void butNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNextActionPerformed
        this.griglia.dbGoNext();
    }//GEN-LAST:event_butNextActionPerformed

    private void butPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrevActionPerformed
        this.griglia.dbGoPrevious();
    }//GEN-LAST:event_butPrevActionPerformed

    private void butFirsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFirsActionPerformed
        this.griglia.dbGoFirst();
    }//GEN-LAST:event_butFirsActionPerformed

    private void texDescrizioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texDescrizioneActionPerformed
    }//GEN-LAST:event_texDescrizioneActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        main.getPadre().closeFrame(this);
    }//GEN-LAST:event_formInternalFrameClosing

    private void butDeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDeleActionPerformed

        int ret = JOptionPane.showConfirmDialog(this, "Sicuro di eliminare ?", "Attenzione", JOptionPane.YES_NO_OPTION);

        if (ret == JOptionPane.YES_OPTION) {

            String codiceListino = (String) dati.dbGetField("codice");
            this.dati.dbDelete();
            this.griglia.dbRefresh();
            this.griglia.dbSelezionaRiga();

            String sql = "delete from articoli_prezzi where listino = " + Db.pc(codiceListino, java.sql.Types.VARCHAR);
            Db.executeSql(sql);

            if (this.padre != null) {
                padre.comListino.dbRefreshItems();
            }
        }
    }//GEN-LAST:event_butDeleActionPerformed

    private void butFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFindActionPerformed

        boolean ret = this.griglia.dbFindNext();

        if (ret == false) {

            int ret2 = JOptionPane.showConfirmDialog(this, "Posizione non trovata\nVuoi riprovare dall'inizio ?", "Attenzione", JOptionPane.YES_NO_OPTION);

            if (ret2 == JOptionPane.OK_OPTION) {

                boolean ret3 = this.griglia.dbFindFirst();
            }
        }
    }//GEN-LAST:event_butFindActionPerformed

    private void butUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUndoActionPerformed
        dati.dbUndo();
    }//GEN-LAST:event_butUndoActionPerformed

    private void butSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSaveActionPerformed

        SwingUtils.mouse_wait(this);

        //controllo che se Ã¨ di acquisto non ce ne sia giÃ  un altro ...
        Object item = tipo.getSelectedItem();
        if (item != null && item.toString().equalsIgnoreCase("Acquisto")) {
            try {
                ResultSet r = Db.openResultSet("select * from tipi_listino where tipo = 'Acquisto'");
                if (r.next()) {
                    SwingUtils.showWarningMessage(this, "Stai salvando un listino di Acquisto ma ne Ã¨ giÃ  presente uno!");
                }
            } catch (SQLException ex) {
                Logger.getLogger(frmListini.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        //controllo listini bloccati toys4you
        if (main.pluginAttivi.contains("pluginToysforyou")) {            
            String codice_nuovo = texCodice.getText();
            System.out.println("codice_vecchio = " + codice_vecchio);
            if (codice_vecchio.equals("ACQUISTO") 
                    || codice_vecchio.equals("VENDITA")
                    || codice_vecchio.equals("RIVENDITA")
                    ) {
                if (!codice_vecchio.equals(codice_nuovo)) {
                    SwingUtils.mouse_def(this);
                    SwingUtils.showInfoMessage(this, "Non puoi cambiare codice a questi listini (ACQUISTO,VENDITA,RIVENDITA)");
                    return;
                }
            }
        }
        
        this.dati.dbSave();
        InvoicexUtil.aggiornaListini();        
        this.griglia.dbRefresh();

        if (this.comboToRefresh != null) {
            this.comboToRefresh.dbRefreshItems();
            this.dispose();
        }

        if (this.padre != null) {
            padre.comListino.dbRefreshItems();
        }

        String listinoNuovo = this.texCodice.getText();
        if (this.ricarico_flag.isSelected()) {
            String listinoRicarico = String.valueOf(this.ricarico_listino.getSelectedItem());
            listinoRicarico = listinoRicarico.substring(listinoRicarico.lastIndexOf("-")+1).trim();
            Double percRicarico = Double.parseDouble(this.ricarico_percentuale.getText());
            aggiornaPrezziListinoRicarico(listinoNuovo, listinoRicarico, percRicarico);
        }

        SwingUtils.mouse_def(this);
    }//GEN-LAST:event_butSaveActionPerformed

    private void aggiornaPrezziListinoRicarico(String listino, String listinoRicarico, Double perc) {
        System.out.println("LISTINO INSERITO O MODIFICATO: " + listino);
        System.out.println("LISTINO DI RICARICO: " + listinoRicarico);
        System.out.println("PERCENTUALE DI RICARICO: " + perc);

        Db.executeSql("DELETE FROM articoli_prezzi WHERE listino = '" + listino + "'");

        ResultSet rs = Db.openResultSet("SELECT art.codice as codice, ifNull(pre.prezzo, 0.00) as prezzo_base FROM articoli art LEFT JOIN articoli_prezzi pre ON pre.articolo = art.codice AND pre.listino = '" + listinoRicarico + "'");
        try {
            while (rs.next()) {
                String codiceArticolo = rs.getString("codice");
                Double prezzo_base = rs.getDouble("prezzo_base");
                Double prezzo = prezzo_base + (prezzo_base * (perc/100));
                prezzo = FormatUtils.round(prezzo, 5);
                
                Db.executeSql("INSERT INTO articoli_prezzi SET articolo = '" + codiceArticolo + "', listino = '" + listino + "', prezzo = '" + prezzo + "'");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void butNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNewActionPerformed
        this.dati.dbNew();
        ricarica_combo_listini();
        codice_vecchio = "";
    }//GEN-LAST:event_butNewActionPerformed

    private void ricarico_flagItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ricarico_flagItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            visRicarico(true);
        } else {
            visRicarico(false);
        }
}//GEN-LAST:event_ricarico_flagItemStateChanged

    private void ricarico_listinoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ricarico_listinoItemStateChanged
        if (dati != null && !dati.isRefreshing) {
//            dati.dbCambiaStato(tnxDbPanel.DB_MODIFICA);   //faceva andare in modifica quando era in inserimento !!!
            dati.dbForzaModificati();
        }
    }//GEN-LAST:event_ricarico_listinoItemStateChanged

    void visRicarico(boolean come) {
        ricarico_listino.setEnabled(come);
        ricarico_percentuale.setEnabled(come);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butDele;
    private javax.swing.JButton butFind;
    private javax.swing.JButton butFirs;
    private javax.swing.JButton butLast;
    private javax.swing.JButton butNew;
    private javax.swing.JButton butNext;
    private javax.swing.JButton butPrev;
    private javax.swing.JButton butSave;
    private javax.swing.JButton butStampaElenco;
    private javax.swing.JButton butUndo;
    private tnxbeans.tnxDbPanel dati;
    private tnxbeans.tnxDbGrid griglia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel2111;
    private javax.swing.JLabel jLabel2211;
    private javax.swing.JLabel jLabel2212;
    private javax.swing.JLabel jLabel2213;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lab_ricarico_listino;
    private javax.swing.JLabel lab_ricarico_listino1;
    private javax.swing.JLabel lab_ricarico_listino2;
    private javax.swing.JPanel panAlto;
    private javax.swing.JPanel panDati;
    private javax.swing.JPanel panElen;
    private tnxbeans.tnxCheckBox ricarico_flag;
    private javax.swing.JComboBox ricarico_listino;
    private tnxbeans.tnxTextField ricarico_percentuale;
    private javax.swing.JTabbedPane tabCent;
    private tnxbeans.tnxTextField texCodice;
    private tnxbeans.tnxTextField texDescrizione;
    private tnxbeans.tnxComboField tipo;
    private tnxbeans.tnxCheckBox tnxCheckBox1;
    // End of variables declaration//GEN-END:variables
}
