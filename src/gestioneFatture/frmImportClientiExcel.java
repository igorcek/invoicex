/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmImportClientiExcel2.java
 *
 * Created on 11-feb-2010, 11.21.18
 */

package gestioneFatture;

import it.tnx.Db;
import it.tnx.SwingWorker;
import it.tnx.commons.DbUtils;
import it.tnx.commons.cu;
import it.tnx.invoicex.gui.JInternalFrameClientiFornitori;
import java.awt.Cursor;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

/**
 *
 * @author mceccarelli
 */
public class frmImportClientiExcel extends javax.swing.JInternalFrame {

    JInternalFrame padre;

    /** Creates new form frmImportArtiExcel */
    public frmImportClientiExcel(JInternalFrame padre) {
        initComponents();
        this.padre = padre;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        nonazzerare = new javax.swing.JCheckBox();

        setClosable(true);
        setResizable(true);
        setTitle("Import Clienti da file Excel");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/go-jump.png"))); // NOI18N
        jButton1.setText("Scegli il file da importare");
        jButton1.setPreferredSize(new java.awt.Dimension(90, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane2.setBorder(null);

        jTextArea1.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Selezionare un file Excel con le seguenti colonne in ordine:\nA-Ragione sociale\nB-Indirizzo\nC-Cap\nD-Città\nE-Provincia\nF-Cod.Fiscale\nG-Partita Iva\nH-Num. Telefonico\nI-Fax\nJ-Cellulare\nK-Codice Agente\nL-Email\nM-Sito web\nN-Persona di riferimento\nO-Tel. persona di rif.\nP-Note\nQ-Tipo pagamento\nR-Codice Listino\nS-Codice Iva Standard\nT-ABI\nU-CAB\nV-C/C\nW-IBAN\nX-Sconto testata 1\nY-Sconto testata 2\nZ-Sconto testata 3\nAA-Sconto righe 1\nAB-Sconto righe 2\nAC-Tipo (C per Cliente, F per Fornitore, E per Entrambi, P per Provvisorio)\n\nSe la partita iva o il codice fiscale o la ragione sociale sono già presenti i dati verranno sovrascritti con quelli dal file\n\nSe alcuni dati non sono disponibili inserite comunque le colonne vuote nel file di Excel\n\nNon sono supportate celle con formule ma soltanto valori");
        jScrollPane2.setViewportView(jTextArea1);

        nonazzerare.setSelected(true);
        nonazzerare.setText("se il campo in Excel è vuoto non azzerare su Invoicex");
        nonazzerare.setToolTipText("Con questa opzione abilitata non rischi di azzerare informazioni su Invoicex nel caso il tuo file di Excel non contenga tutte le informazioni richieste sopra");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(nonazzerare)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 144, Short.MAX_VALUE)
                        .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 195, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(nonazzerare))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String last_dir = main.fileIni.getValue("prefs", "ultima_dir_import_clienti", null);
        final NumberFormat nf1 = new DecimalFormat("0");
        final NumberFormat nf2 = new DecimalFormat("0.00");

        JFileChooser fileChoose = null;
        if (last_dir != null) {
            fileChoose = new JFileChooser(last_dir);
        } else {
            fileChoose = new JFileChooser();
        }
        FileFilter filter1 = new FileFilter() {
            public boolean accept(File pathname) {
                if (pathname.getAbsolutePath().endsWith(".xls")) {
                    return true;
                } else if (pathname.isDirectory()) {
                    return true;
                } else {
                    return false;
                }
            }
            @Override
            public String getDescription() {
                return "File XLS (*.xls)";
            }
        };

        fileChoose.addChoosableFileFilter(filter1);
        fileChoose.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int ret = fileChoose.showOpenDialog(this);

        if (ret == javax.swing.JFileChooser.APPROVE_OPTION) {
            main.fileIni.setValue("prefs", "ultima_dir_import_clienti", fileChoose.getSelectedFile().getParent());
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                //apro il file
                File f = fileChoose.getSelectedFile();

                final InputStream inp = new FileInputStream(f);
                //InputStream inp = new FileInputStream("workbook.xlsx");

                HSSFWorkbook wb = new HSSFWorkbook(inp);
                final HSSFSheet sheet = wb.getSheetAt(0);
                final frmImportClientiExcel form = this;
                final JDialogInsert dialog = new JDialogInsert(main.getPadre(), false, "", sheet.getLastRowNum() - 1);
                dialog.setLocationRelativeTo(null);
                dialog.setVisible(true);

                SwingWorker sw = new SwingWorker() {

                    @Override
                    public Object construct() {
                        form.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                        int contaok = 0;
                        int contako = 0;
                        int contaconcodice = 0;
                        try {
                            ResultSet resu = null;
//                            String[] colonne = new String[] {"ragione_sociale", "indirizzo", "cap", "localita", "provincia", "cfiscale", "piva_cfiscale", "telefono", "fax", "agente"};
//                            String[] colonne = new String[] {"ragione_sociale", "indirizzo", "cap", "localita", "provincia", "cfiscale", "piva_cfiscale", "telefono", "fax"};
                            String[] colonne = new String[] {"ragione_sociale", "indirizzo", "cap", "localita", "provincia", "cfiscale", "piva_cfiscale", "telefono", "fax", "cellulare", "agente", "email", "web", "persona_riferimento", "telefono_riferimento", "note", "pagamento", "codice_listino", "iva_standard", "banca_abi", "banca_cab", "banca_cc", "banca_cc_iban", "sconto1t", "sconto2t", "sconto3t", "sconto1r", "sconto2r","tipo"};
                            for (int i = 0; i <= sheet.getLastRowNum(); i++) {
                                HSSFRow row = sheet.getRow(i);

                                try {
                                    HashMap recxls = getMap(row, colonne);

                                    String sql = "";
                                    String codice = null;
                                    String cfiscale = cu.toString(recxls.get("cfiscale"));
                                    String piva = cu.toString(recxls.get("piva_cfiscale"));
                                    String rs = cu.toString(recxls.get("ragione_sociale"));
                                    String agente = cu.toString(recxls.get("agente"));
                                    if (!StringUtils.isEmpty(cfiscale)) {
                                        sql = "select codice from clie_forn where cfiscale = '" + Db.aa(cfiscale) + "'";
                                        codice = DbUtils.getString(Db.getConn(), sql);
                                        if (codice != null) System.out.println("TROVATO codice1:" + codice + " sql:" + sql);
                                    }
                                    if (codice == null && !StringUtils.isEmpty(piva)) {
                                        sql = "select codice from clie_forn where piva_cfiscale = '" + Db.aa(piva) + "'";
                                        codice = DbUtils.getString(Db.getConn(), sql);
                                        if (codice != null) System.out.println("TROVATO codice2:" + codice + " sql:" + sql);
                                    }
                                    if (codice == null && !StringUtils.isEmpty(rs)) {
                                        sql = "select codice from clie_forn where ragione_sociale = '" + Db.aa(rs) + "'";
                                        codice = DbUtils.getString(Db.getConn(), sql);
                                        if (codice != null) System.out.println("TROVATO codice3:" + codice + " sql:" + sql);
                                    }
                                    sql = "insert into clie_forn set ";
                                    sql += DbUtils.prepareSqlFromMap(recxls);
                                    if (codice != null) {
                                        contaconcodice++;
                                        System.out.println("TROVATO codice:" + codice);
                                    } else {
                                        resu = DbUtils.tryOpenResultSet(Db.getConn(), "select codice from clie_forn order by codice desc limit 1");
                                        if (resu.next() == true) {
                                            codice = String.valueOf(resu.getInt(1) + 1);
                                        } else {
                                            codice = "1";
                                        }
                                    }
                                    sql += ", codice = '" + Db.aa(codice) + "'";
                                    if (!recxls.containsKey("tipo")) {
                                        sql += ", tipo = 'C'";
                                    }                                    

                                    System.out.println("sql:" + sql);
                                    try {
                                        DbUtils.tryExecQuery(Db.getConn(), sql);
                                        contaok ++;
                                    } catch (Exception e) {
                                        if (e.getMessage().indexOf("Duplicate entry") >= 0) {
                                            sql = "update clie_forn set ";
                                            sql += DbUtils.prepareSqlFromMap(recxls);
                                            if (!recxls.containsKey("tipo")) {
                                                sql += ", tipo = 'C'";
                                            }
                                            sql += " where codice = '" + Db.aa(codice) + "'";
                                            System.out.println("sql:" + sql);
                                            try {
                                                DbUtils.tryExecQuery(Db.getConn(), sql);
                                                contaok ++;
                                            } catch (Exception e2) {
                                                e2.printStackTrace();
                                                contako++;
                                            }
                                        } else {
                                            e.printStackTrace();
                                            contako++;
                                        }                                        
                                    }                                                                        
                                } catch (Exception e) {
                                    System.out.println("errore sulla " + e.getMessage() + " alla riga " + i);
                                    e.printStackTrace();
                                    contako++;
                                }
                                dialog.updateValue();
                            }
                            inp.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        try {
                            ((frmClie)padre).dati.dbRefresh();
                            ((frmClie)padre).griglia.dbRefresh();                            
                        } catch (Throwable t) {
                            try {
                                ((JInternalFrameClientiFornitori)padre).dati.dbRefresh();
                                ((JInternalFrameClientiFornitori)padre).griglia.dbRefresh();                            
                            } catch (Throwable t2) {
                                t2.printStackTrace();
                            }
                        }
                        System.out.println("conta ok : " + contaok + " conta ko:" + contako + " conta con codice:" + contaconcodice);
                        JOptionPane.showMessageDialog(main.getPadre(), "Import completato (righe importate: " + contaok + ", righe con problemi:" + contako + ")", "Esecuzione Terminata", JOptionPane.INFORMATION_MESSAGE);
                        dialog.dispose();
                        form.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                        dispose();
                        return null;
                    }

                    private HashMap getMap(HSSFRow row, String[] colonne) {
                        int i = 0;
                        HashMap m = new HashMap();
                        for (String colonna : colonne) {
                            if (colonna.equals("sconto1t") || colonna.equals("sconto2t")) {
                                System.out.println("debug");
                            }
                            try {
                                String temp = row.getCell((short)i).getStringCellValue().trim();
                                if (temp != null) {
                                    temp = temp.trim();
                                }
                                if (nonazzerare.isSelected()) {
                                    if (temp != null && temp.length() > 0) {
                                        m.put(colonne[i], temp);
                                    } else {
                                        //non metto
                                    }
                                } else {
                                    m.put(colonne[i], temp);
                                }
                            } catch (Exception e) {                                
                                try {
                                    Double d = row.getCell((short)i).getNumericCellValue();
                                    //se non ci sono decimali passo come stringa altrimenti come double
                                    if (d.intValue() == d.doubleValue()) {
                                        m.put(colonne[i], nf1.format(row.getCell((short)i).getNumericCellValue()));
                                    } else {
                                        m.put(colonne[i], row.getCell((short)i).getNumericCellValue());
                                    }
                                } catch (Exception e2) {
                                    System.out.println("col:" + colonna + " e2:" + e2.getMessage());
                                    if (!nonazzerare.isSelected()) {
                                        m.put(colonne[i], "");
                                    }
                                }
                            }
                            i++;
                        }
                        return m;
                    }
                };

                sw.start();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Errore durante l'import", "Esecuzione Terminata", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
}//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton1;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JSeparator jSeparator1;
    public javax.swing.JTextArea jTextArea1;
    public javax.swing.JCheckBox nonazzerare;
    // End of variables declaration//GEN-END:variables

}
