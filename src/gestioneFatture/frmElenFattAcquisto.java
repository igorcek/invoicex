/** * Invoicex * Copyright (c) 2005,2006,2007 Marco Ceccarelli, Tnx snc * * Questo software è soggetto, e deve essere distribuito con la licenza   * GNU General Public License, Version 2. La licenza accompagna il software * o potete trovarne una copia alla Free Software Foundation http://www.fsf.org . * * This software is subject to, and may be distributed under, the * GNU General Public License, Version 2. The license should have * accompanied the software or you may obtain a copy of the license * from the Free Software Foundation at http://www.fsf.org . *  * -- * Marco Ceccarelli (m.ceccarelli@tnx.it) * Tnx snc (http://www.tnx.it) * */package gestioneFatture;import it.tnx.Db;import java.awt.Cursor;import java.io.*;import java.sql.*;import java.util.Vector;import javax.swing.JInternalFrame;import javax.swing.JOptionPane;import it.tnx.SwingWorker;import it.tnx.accessoUtenti.Permesso;import it.tnx.commons.CastUtils;import it.tnx.commons.DateUtils;import it.tnx.commons.DbUtils;import it.tnx.commons.FileUtils;import it.tnx.commons.SwingUtils;import it.tnx.commons.cu;import it.tnx.commons.swing.DelayedExecutor;import it.tnx.invoicex.InvoicexUtil;import it.tnx.invoicex.ItextUtil;import it.tnx.invoicex.Magazzino;import it.tnx.invoicex.gui.JDialogExc;import it.tnx.invoicex.gui.JDialogJasperViewer;import java.awt.Color;import java.awt.Component;import java.util.ArrayList;import java.util.List;import java.util.Map;import javax.swing.JDialog;import javax.swing.SwingUtilities;import javax.swing.table.TableCellRenderer;import net.sf.jasperreports.engine.JRException;import net.sf.jasperreports.engine.JasperExportManager;import net.sf.jasperreports.engine.JasperManager;import net.sf.jasperreports.engine.JasperPrint;import net.sf.jasperreports.engine.JasperReport;import tnxbeans.tnxDbGrid;public class frmElenFattAcquisto        extends javax.swing.JInternalFrame {    public String sqlWhereLimit = "";    public String sqlWhereDaData = "";    public String sqlWhereAData = "";    public String sqlWhereSerie = "";    /*DAVID*/    public int colDef = 9;    /*DAVID*/    public String sqlWhereCliente = "";    private boolean visualizzaTotali = true;    public boolean pluginEmail = false;    DelayedExecutor delay_cliente = new DelayedExecutor(new Runnable() {        public void run() {            SwingUtilities.invokeLater(new Runnable() {                public void run() {                    SwingUtils.mouse_wait();                    System.out.println("*** dbrefresh");                                                                /* DAVID */                                                if (texLimit1.getText().length() > 0) {                            System.out.println("Filtro serie attivo");                            sqlWhereSerie = " and test_fatt_acquisto.serie like '%" + texLimit1.getText() + "%'";                        } else {                            sqlWhereSerie = "";                        }                        /* DAVID */                                        if (texCliente.getText().trim().length() == 0) {                        sqlWhereCliente = "";                    } else {                        //sqlWhereCliente = " and cliente = " + Db.pc(this.comCliente.getSelectedKey(), Types.INTEGER);                        sqlWhereCliente = " and clie_forn.ragione_sociale like '%" + Db.aa(texCliente.getText()) + "%'";                                                                        if (main.fileIni.getValueBoolean("pref", "ColAgg_RiferimentoCliente", false)) {                            sqlWhereCliente = " and (clie_forn.ragione_sociale like '%" + Db.aa(texCliente.getText()) + "%'";                            sqlWhereCliente += " or clie_forn.persona_riferimento like '%" + Db.aa(texCliente.getText()) + "%'";                            sqlWhereCliente += ")";                        }                    }                    dbRefresh();                    SwingUtils.mouse_def();                }            });        }    }, 250);    /** Creates new form frmElenPrev */    public frmElenFattAcquisto() {        initComponents();                 // DAVID: sovrascrivo la creazione della griglia per modificare la colonna definitiva, visto che dove è precedentemente definita non mi lascia modificare!!       griglia = new tnxDbGrid() {            Color color_hover = new Color(200,200,220);            Color color_sel = new Color(155,155,175);            Color color_fatt = new Color(255,255,255);            Color color_red = InvoicexUtil.getColorePerMarcatura("rosso");            Color color_blu = InvoicexUtil.getColorePerMarcatura("blu");            Color color_yel = InvoicexUtil.getColorePerMarcatura("giallo");            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {                Component c = super.prepareRenderer(renderer, row, column);                Color back = colorForRow(row, c);                c.setForeground(Color.BLACK);                if (isRowSelected(row)) {                    c.setBackground(SwingUtils.mixColours(back, color_sel));                } else if (row == rollOverRowIndex) {                    c.setBackground(SwingUtils.mixColours(back, color_hover));                } else {                    c.setBackground(back);                }                //DAVID                if (column == colDef && getValueAt(row, colDef).toString().equals("true")) {                    //c.setForeground(new Color(0,128,0));                                        javax.swing.JCheckBox c1 = new javax.swing.JCheckBox();                    if (isRowSelected(row)) {                        c1.setBackground(SwingUtils.mixColours(back, color_sel));                    } else if (row == rollOverRowIndex) {                        c1.setBackground(SwingUtils.mixColours(back, color_hover));                    } else {                        c1.setBackground(back);                    }                    c1.setSelected(true);                    return c1;                }                if (column == colDef && getValueAt(row, colDef).toString().equals("false")) {                    //c.setForeground(new Color(128,0,0));                                        javax.swing.JCheckBox c1 = new javax.swing.JCheckBox();                    if (isRowSelected(row)) {                        c1.setBackground(SwingUtils.mixColours(back, color_sel));                    } else if (row == rollOverRowIndex) {                        c1.setBackground(SwingUtils.mixColours(back, color_hover));                    } else {                        c1.setBackground(back);                    }                    c1.setSelected(false);                    return c1;                }                //DAVID                return c;            }            protected Color colorForRow(int row, Component c) {                try {                    if(getValueAt(row, getColumnByName("color")).equals("rosso")){                        return color_red;                    } else if(getValueAt(row, getColumnByName("color")).equals("blu")){                        return color_blu;                    } else if(getValueAt(row, getColumnByName("color")).equals("giallo")){                        return color_yel;                    } else {                        return color_fatt;                    }                } catch (Exception e) {                }                return c.getBackground();            }        };       griglia.setModel(new javax.swing.table.DefaultTableModel(            new Object [][] {                {null, null, null, null},                {null, null, null, null},                {null, null, null, null},                {null, null, null, null}            },            new String [] {                "Title 1", "Title 2", "Title 3", "Title 4"            }        ));        griglia.setFont(griglia.getFont().deriveFont(griglia.getFont().getSize()+1f));        griglia.setRowHeight(20);        griglia.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseReleased(java.awt.event.MouseEvent evt) {                grigliaMouseReleased(evt);            }            public void mouseClicked(java.awt.event.MouseEvent evt) {                grigliaMouseClicked(evt);            }            public void mousePressed(java.awt.event.MouseEvent evt) {                grigliaMousePressed(evt);            }        });        griglia.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                grigliaKeyPressed(evt);            }        });        jScrollPane1.setViewportView(griglia);               //DAVID        //TODO        butNotaCredito.setVisible(false);        if (main.fileIni.getValueBoolean("pref", "ColAgg_RiferimentoCliente", false)) {            menColAggRiferimentoCliente.setSelected(true);        }        griglia.setNoTnxResize(true);        //apro la griglia        this.griglia.dbNomeTabella = "test_fatt_acquisto";        this.griglia.flagUsaThread = false;        java.util.Hashtable colsWidthPerc = new java.util.Hashtable();        if (pluginEmail) {            colsWidthPerc.put("Serie", new Double(5));            colsWidthPerc.put("Numero", new Double(5));            colsWidthPerc.put("Anno", new Double(0));            colsWidthPerc.put("Data reg", new Double(10));            colsWidthPerc.put("Numero doc", new Double(5));            colsWidthPerc.put("Serie doc", new Double(5));            colsWidthPerc.put("Data doc", new Double(10));            colsWidthPerc.put("id", new Double(0));            colsWidthPerc.put("Fornitore", new Double(50));            colsWidthPerc.put("Note", new Double(12));            colsWidthPerc.put("Totale", new Double(15));            colsWidthPerc.put("Riferimento Fornitore", new Double(20));            colsWidthPerc.put("Email Inviata", new Double(10));        } else {            colsWidthPerc.put("Serie", new Double(5));            colsWidthPerc.put("Numero", new Double(5));            colsWidthPerc.put("Anno", new Double(0));            colsWidthPerc.put("Data reg", new Double(10));            colsWidthPerc.put("Numero doc", new Double(5));            colsWidthPerc.put("Serie doc", new Double(5));            colsWidthPerc.put("Data doc", new Double(10));            colsWidthPerc.put("id", new Double(0));            colsWidthPerc.put("Fornitore", new Double(55));            colsWidthPerc.put("Note", new Double(18));            colsWidthPerc.put("Totale", new Double(15));            colsWidthPerc.put("Riferimento Fornitore", new Double(20));        }        colsWidthPerc.put("imponibile", new Double(0));        colsWidthPerc.put("iva", new Double(0));        colsWidthPerc.put("color", new Double(0));        this.griglia.columnsSizePerc = colsWidthPerc;        java.util.Hashtable colsAlign = new java.util.Hashtable();        colsAlign.put("Totale", "RIGHT_CURRENCY");        this.griglia.columnsAlign = colsAlign;        Vector chiave = new Vector();        chiave.add("Serie");        chiave.add("Numero");        chiave.add("Anno");        this.griglia.dbChiave = chiave;        comCliente.setVisible(false);        //carico le prefereences utente        try {//            java.util.prefs.Preferences preferences = java.util.prefs.Preferences.userNodeForPackage(main.class);//            this.visualizzaTotali = preferences.getBoolean("visualizzaTotali", true);            visualizzaTotali = main.fileIni.getValueBoolean("pref", "visualizzaTotali", true);//            String limit = preferences.get("limit", "50");            String limit = main.fileIni.getValue("pref", "limit", "50");            this.texLimit.setText(limit);            if (main.fileIni.getValueBoolean("pref", "visualizzaAnnoInCorso", false)) {                texDal.setText(DateUtils.getDateStartYear());                texDalFocusLost(null);            } else {                texLimitFocusLost(null);            }            //dbRefresh();        } catch (Exception err) {            err.printStackTrace();        }        this.comCliente.dbAddElement("<tutti i fornitori>", "*");        this.comCliente.dbOpenList(Db.getConn(), "select ragione_sociale, codice from clie_forn where tipo = 'F' or tipo = 'E' order by ragione_sociale", "*", false);        if (!main.utente.getPermesso(Permesso.PERMESSO_FATTURE_ACQUISTO, Permesso.PERMESSO_TIPO_SCRITTURA)) {            this.butModi.setEnabled(false);            this.butNew.setEnabled(false);            this.menModifica.setEnabled(false);        }        if (!main.utente.getPermesso(Permesso.PERMESSO_FATTURE_ACQUISTO, Permesso.PERMESSO_TIPO_CANCELLA)) {            this.butDele.setEnabled(false);            this.menElimina.setEnabled(false);        }    }    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents    private void initComponents() {        jPopupMenu1 = new javax.swing.JPopupMenu();        menModifica = new javax.swing.JMenuItem();        menElimina = new javax.swing.JMenuItem();        menExportCSV = new javax.swing.JMenuItem();        menColAgg = new javax.swing.JMenu();        menColAggRiferimentoCliente = new javax.swing.JCheckBoxMenuItem();        menColoraRiga = new javax.swing.JMenu();        menColoraRosso = new javax.swing.JMenuItem();        menColoraBlu = new javax.swing.JMenuItem();        menColoraGiallo = new javax.swing.JMenuItem();        menTogliColore = new javax.swing.JMenuItem();        panDati = new javax.swing.JPanel();        jScrollPane1 = new javax.swing.JScrollPane();        griglia = new tnxDbGrid() {            Color color_hover = new Color(200,200,220);            Color color_sel = new Color(155,155,175);            Color color_fatt = new Color(255,255,255);            Color color_red = InvoicexUtil.getColorePerMarcatura("rosso");            Color color_blu = InvoicexUtil.getColorePerMarcatura("blu");            Color color_yel = InvoicexUtil.getColorePerMarcatura("giallo");            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {                Component c = super.prepareRenderer(renderer, row, column);                Color back = colorForRow(row, c);                c.setForeground(Color.BLACK);                if (isRowSelected(row)) {                    c.setBackground(SwingUtils.mixColours(back, color_sel));                } else if (row == rollOverRowIndex) {                    c.setBackground(SwingUtils.mixColours(back, color_hover));                } else {                    c.setBackground(back);                }                return c;            }            protected Color colorForRow(int row, Component c) {                try {                    if(getValueAt(row, getColumnByName("color")).equals("rosso")){                        return color_red;                    } else if(getValueAt(row, getColumnByName("color")).equals("blu")){                        return color_blu;                    } else if(getValueAt(row, getColumnByName("color")).equals("giallo")){                        return color_yel;                    } else {                        return color_fatt;                    }                } catch (Exception e) {                }                return c.getBackground();            }        };        jPanel2 = new javax.swing.JPanel();        jPanel3 = new javax.swing.JPanel();        jPanel7 = new javax.swing.JPanel();        butNew = new javax.swing.JButton();        butNotaCredito = new javax.swing.JButton();        butModi = new javax.swing.JButton();        butDele = new javax.swing.JButton();        butPrin = new javax.swing.JButton();        butEmail = new javax.swing.JButton();        jPanel6 = new javax.swing.JPanel();        jPanel4 = new javax.swing.JPanel();        jLabel8 = new javax.swing.JLabel();        texLimit1 = new javax.swing.JTextField();        jLabel10 = new javax.swing.JLabel();        jLabel1 = new javax.swing.JLabel();        texLimit = new javax.swing.JTextField();        jLabel2 = new javax.swing.JLabel();        jLabel3 = new javax.swing.JLabel();        jLabel4 = new javax.swing.JLabel();        texDal = new javax.swing.JTextField();        jLabel5 = new javax.swing.JLabel();        texAl = new javax.swing.JTextField();        jLabel6 = new javax.swing.JLabel();        jLabel7 = new javax.swing.JLabel();        comCliente = new tnxbeans.tnxComboField();        texCliente = new javax.swing.JTextField();        jLabel9 = new javax.swing.JLabel();        butRefresh = new javax.swing.JButton();        jPanel5 = new javax.swing.JPanel();        labTotale = new javax.swing.JLabel();        menModifica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/apps/accessories-text-editor.png"))); // NOI18N        menModifica.setText("Modifica");        menModifica.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menModificaActionPerformed(evt);            }        });        jPopupMenu1.add(menModifica);        menElimina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/places/user-trash.png"))); // NOI18N        menElimina.setText("Elimina");        menElimina.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menEliminaActionPerformed(evt);            }        });        jPopupMenu1.add(menElimina);        menExportCSV.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/media-seek-forward.png"))); // NOI18N        menExportCSV.setText("Export righe in CSV");        menExportCSV.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menExportCSVActionPerformed(evt);            }        });        jPopupMenu1.add(menExportCSV);        menColAgg.setText("Colonne Aggiuntive");        menColAggRiferimentoCliente.setText("Riferimento Fornitore");        menColAggRiferimentoCliente.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColAggRiferimentoClienteActionPerformed(evt);            }        });        menColAgg.add(menColAggRiferimentoCliente);        jPopupMenu1.add(menColAgg);        menColoraRiga.setText("Marca Fattura");        menColoraRosso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/status/color-red.png"))); // NOI18N        menColoraRosso.setText("Rosso");        menColoraRosso.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColoraRossoActionPerformed(evt);            }        });        menColoraRiga.add(menColoraRosso);        menColoraBlu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/status/color-blu.png"))); // NOI18N        menColoraBlu.setText("Blu");        menColoraBlu.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColoraBluActionPerformed(evt);            }        });        menColoraRiga.add(menColoraBlu);        menColoraGiallo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/status/color-yellow.png"))); // NOI18N        menColoraGiallo.setText("Giallo");        menColoraGiallo.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menColoraGialloActionPerformed(evt);            }        });        menColoraRiga.add(menColoraGiallo);        menTogliColore.setText("Togli Colore");        menTogliColore.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                menTogliColoreActionPerformed(evt);            }        });        menColoraRiga.add(menTogliColore);        jPopupMenu1.add(menColoraRiga);        setClosable(true);        setIconifiable(true);        setMaximizable(true);        setResizable(true);        setTitle("Gestione Fatture di Acquisto");        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {                formInternalFrameClosed(evt);            }            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {            }            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {                formInternalFrameOpened(evt);            }        });        addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                formKeyPressed(evt);            }        });        panDati.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));        panDati.setLayout(new java.awt.BorderLayout());        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseClicked(java.awt.event.MouseEvent evt) {                jScrollPane1MouseClicked(evt);            }        });        griglia.setModel(new javax.swing.table.DefaultTableModel(            new Object [][] {                {null, null, null, null},                {null, null, null, null},                {null, null, null, null},                {null, null, null, null}            },            new String [] {                "Title 1", "Title 2", "Title 3", "Title 4"            }        ));        griglia.setFont(griglia.getFont().deriveFont(griglia.getFont().getSize()+1f));        griglia.setRowHeight(20);        griglia.addMouseListener(new java.awt.event.MouseAdapter() {            public void mouseReleased(java.awt.event.MouseEvent evt) {                grigliaMouseReleased(evt);            }            public void mouseClicked(java.awt.event.MouseEvent evt) {                grigliaMouseClicked(evt);            }            public void mousePressed(java.awt.event.MouseEvent evt) {                grigliaMousePressed(evt);            }        });        griglia.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                grigliaKeyPressed(evt);            }        });        jScrollPane1.setViewportView(griglia);        panDati.add(jScrollPane1, java.awt.BorderLayout.CENTER);        getContentPane().add(panDati, java.awt.BorderLayout.CENTER);        jPanel2.setLayout(new java.awt.BorderLayout());        jPanel3.setLayout(new java.awt.BorderLayout());        butNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-new.png"))); // NOI18N        butNew.setText("Nuova Fattura");        butNew.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butNewActionPerformed(evt);            }        });        jPanel7.add(butNew);        butNotaCredito.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-new.png"))); // NOI18N        butNotaCredito.setText("Nota di Credito");        butNotaCredito.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butNotaCreditoActionPerformed(evt);            }        });        jPanel7.add(butNotaCredito);        butModi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/apps/accessories-text-editor.png"))); // NOI18N        butModi.setText("Modifica");        butModi.setPreferredSize(null);        butModi.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butModiActionPerformed(evt);            }        });        jPanel7.add(butModi);        butDele.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/places/user-trash.png"))); // NOI18N        butDele.setText("Elimina");        butDele.setToolTipText("Elimina");        butDele.setPreferredSize(null);        butDele.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butDeleActionPerformed(evt);            }        });        jPanel7.add(butDele);        butPrin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/document-print.png"))); // NOI18N        butPrin.setText("Stampa");        butPrin.setToolTipText("");        butPrin.setPreferredSize(null);        butPrin.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butPrinActionPerformed(evt);            }        });        jPanel7.add(butPrin);        butEmail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/pdf-icon-16.png"))); // NOI18N        butEmail.setText("Crea PDF");        butEmail.setToolTipText("");        butEmail.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butEmailActionPerformed(evt);            }        });        jPanel7.add(butEmail);        jPanel3.add(jPanel7, java.awt.BorderLayout.NORTH);        jPanel3.add(jPanel6, java.awt.BorderLayout.SOUTH);        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);        jLabel8.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        jLabel8.setText("serie");        jPanel4.add(jLabel8);        texLimit1.setColumns(3);        texLimit1.setFont(new java.awt.Font("Dialog", 0, 10));        texLimit1.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                texLimit1ActionPerformed(evt);            }        });        texLimit1.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texLimit1FocusLost(evt);            }        });        texLimit1.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                texLimit1KeyPressed(evt);            }        });        jPanel4.add(texLimit1);        jLabel10.setText("|");        jPanel4.add(jLabel10);        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        jLabel1.setText("vis.");        jPanel4.add(jLabel1);        texLimit.setColumns(3);        texLimit.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        texLimit.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                texLimitActionPerformed(evt);            }        });        texLimit.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texLimitFocusLost(evt);            }        });        texLimit.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                texLimitKeyPressed(evt);            }        });        jPanel4.add(texLimit);        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        jLabel2.setText("doc.");        jPanel4.add(jLabel2);        jLabel3.setText("|");        jPanel4.add(jLabel3);        jLabel4.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        jLabel4.setText("da data");        jPanel4.add(jLabel4);        texDal.setColumns(8);        texDal.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        texDal.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texDalFocusLost(evt);            }        });        texDal.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                texDalKeyPressed(evt);            }        });        jPanel4.add(texDal);        jLabel5.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        jLabel5.setText("a data");        jPanel4.add(jLabel5);        texAl.setColumns(8);        texAl.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        texAl.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                texAlFocusLost(evt);            }        });        texAl.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyPressed(java.awt.event.KeyEvent evt) {                texAlKeyPressed(evt);            }        });        jPanel4.add(texAl);        jLabel6.setText("|");        jPanel4.add(jLabel6);        jLabel7.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        jLabel7.setText("Forn.");        jPanel4.add(jLabel7);        comCliente.setDbDescCampo("");        comCliente.setDbNomeCampo("");        comCliente.setDbTipoCampo("");        comCliente.setDbTrovaMentreScrive(true);        comCliente.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        comCliente.setPreferredSize(new java.awt.Dimension(137, 18));        comCliente.addItemListener(new java.awt.event.ItemListener() {            public void itemStateChanged(java.awt.event.ItemEvent evt) {                comClienteItemStateChanged(evt);            }        });        comCliente.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                comClienteActionPerformed(evt);            }        });        comCliente.addFocusListener(new java.awt.event.FocusAdapter() {            public void focusLost(java.awt.event.FocusEvent evt) {                comClienteFocusLost(evt);            }        });        jPanel4.add(comCliente);        texCliente.setColumns(10);        texCliente.addKeyListener(new java.awt.event.KeyAdapter() {            public void keyReleased(java.awt.event.KeyEvent evt) {                texClienteKeyReleased(evt);            }        });        jPanel4.add(texCliente);        jLabel9.setText("|");        jLabel9.setIconTextGap(2);        jPanel4.add(jLabel9);        butRefresh.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N        butRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icons/tango-icon-theme-080/16x16/actions/view-refresh.png"))); // NOI18N        butRefresh.setToolTipText("Aggiorna l'elenco dei documenti");        butRefresh.setIconTextGap(2);        butRefresh.setMargin(new java.awt.Insets(2, 2, 2, 2));        butRefresh.addActionListener(new java.awt.event.ActionListener() {            public void actionPerformed(java.awt.event.ActionEvent evt) {                butRefreshActionPerformed(evt);            }        });        jPanel4.add(butRefresh);        jPanel2.add(jPanel4, java.awt.BorderLayout.SOUTH);        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);        jPanel5.setLayout(new java.awt.BorderLayout(2, 2));        labTotale.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);        labTotale.setText("totale documenti visualizzati ");        labTotale.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));        jPanel5.add(labTotale, java.awt.BorderLayout.CENTER);        getContentPane().add(jPanel5, java.awt.BorderLayout.SOUTH);        pack();    }// </editor-fold>//GEN-END:initComponents    private void texAlKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texAlKeyPressed        if (evt.getKeyCode() == evt.VK_ENTER) {            texAlFocusLost(null);        }    }//GEN-LAST:event_texAlKeyPressed    private void texDalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texDalKeyPressed        if (evt.getKeyCode() == evt.VK_ENTER) {            texDalFocusLost(null);        }    }//GEN-LAST:event_texDalKeyPressed    private void texLimitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texLimitKeyPressed        if (evt.getKeyCode() == evt.VK_ENTER) {            texLimitFocusLost(null);        }    }//GEN-LAST:event_texLimitKeyPressed    private void butRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRefreshActionPerformed        dbRefresh();    }//GEN-LAST:event_butRefreshActionPerformed    private void comClienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comClienteItemStateChanged        if (evt.getStateChange() == evt.SELECTED) {            comClienteFocusLost(null);        }    }//GEN-LAST:event_comClienteItemStateChanged    private void comClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_comClienteFocusLost        if (this.comCliente.getSelectedKey().toString().equals("*")) {            sqlWhereCliente = "";        } else {            sqlWhereCliente = " and fornitore = " + Db.pc(this.comCliente.getSelectedKey(), Types.INTEGER);        }        dbRefresh();    }//GEN-LAST:event_comClienteFocusLost    private void texAlFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texAlFocusLost        if (this.texAl.getText().length() == 0) {            sqlWhereAData = "";            dbRefresh();        } else {            if (it.tnx.Checks.isDate(this.texAl.getText())) {                sqlWhereAData = " and data <= " + Db.pc2(this.texAl.getText(), Types.DATE);                dbRefresh();            } else {                javax.swing.JOptionPane.showMessageDialog(this, "Il parametro richiesto deve essere una data in formato (gg/mm/aaaa)", "Attenzione", javax.swing.JOptionPane.INFORMATION_MESSAGE);            }        }    }//GEN-LAST:event_texAlFocusLost    private void texDalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texDalFocusLost        if (this.texDal.getText().length() == 0) {            sqlWhereDaData = "";            dbRefresh();        } else {            if (it.tnx.Checks.isDate(this.texDal.getText())) {                sqlWhereDaData = " and data >= " + Db.pc2(this.texDal.getText(), Types.DATE);                dbRefresh();            } else {                javax.swing.JOptionPane.showMessageDialog(this, "Il parametro richiesto deve essere una data in formato (gg/mm/aaaa)", "Attenzione", javax.swing.JOptionPane.INFORMATION_MESSAGE);            }        }    }//GEN-LAST:event_texDalFocusLost    private void texLimitFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texLimitFocusLost        if (this.texLimit.getText().length() == 0) {            sqlWhereLimit = "";            dbRefresh();        } else {            if (it.tnx.Checks.isInteger(this.texLimit.getText())) {                sqlWhereLimit = " limit " + this.texLimit.getText();                dbRefresh();            } else {                javax.swing.JOptionPane.showMessageDialog(this, "Il parametro richiesto deve essere numerico", "Attenzione", javax.swing.JOptionPane.INFORMATION_MESSAGE);            }        }    }//GEN-LAST:event_texLimitFocusLost    private void grigliaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_grigliaKeyPressed            }//GEN-LAST:event_grigliaKeyPressed    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed            }//GEN-LAST:event_formKeyPressed    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened        // Add your handling code here:        this.griglia.resizeColumnsPerc(true);    }//GEN-LAST:event_formInternalFrameOpened    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed        // Add your handling code here:        main.getPadre().closeFrame(this);    }//GEN-LAST:event_formInternalFrameClosed    private void grigliaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grigliaMouseClicked        try {            if (evt.getClickCount() == 2) {                butModiActionPerformed(null);            } else {                //tasto destro                //if (e.getModifiers()==InputEvent.BUTTON3_MASK) popGrig.show(tabNomi,e.getX(),e.getY());            }        } catch (Exception err) {            err.printStackTrace();        }    }//GEN-LAST:event_grigliaMouseClicked    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked            }//GEN-LAST:event_jScrollPane1MouseClicked    private void butDeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDeleActionPerformed        if (griglia.getSelectedRowCount() <= 0) {            SwingUtils.showErrorMessage(this, "Seleziona un documento prima!");            return;        }        final Object inizio_mysql = Db.getCurrentTimestamp();                String grigliaSerie = String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("serie")));        int numSel = Integer.parseInt(String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("numero"))));        String grigliaAnno = String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("anno")));        String check = "";        if (!grigliaSerie.equals("")) {            check += grigliaSerie + "/" + numSel;        } else {            check += "" + numSel;        }        int dbIdFattura = Integer.parseInt(String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("id"))));        // Controllo provenienza da Ordine        String sql = "select da_ordi from righ_fatt_acquisto where IFNULL(da_ordi, 0) != 0 and id_padre = " + dbIdFattura + " group by da_ordi";        boolean fromOtherDocOrdi = false;        List<Map> da_ordi = null;        try {            da_ordi = DbUtils.getListMap(Db.getConn(), sql);            if (da_ordi.size() > 0) {                if (!SwingUtils.showYesNoMessage(this, "Questo documento proviene da un Ordine.\nContinuare con la cancellazione ?")) {                    return;                } else {                    fromOtherDocOrdi = true;                }            } else {                //no da ordi            }        } catch (Exception e) {        }        // Controllo provenienza da DDT        sql = "select da_ddt from righ_fatt_acquisto where IFNULL(da_ddt, 0) != 0 and id_padre = " + dbIdFattura + " group by da_ddt";        boolean fromOtherDocDdt = false;        List<Map> da_ddt = null;        try {            da_ddt = DbUtils.getListMap(Db.getConn(), sql);            if (da_ddt.size() > 0) {                if (!SwingUtils.showYesNoMessage(this, "Questo documento proviene da un DDT.\nContinuare con la cancellazione ?")) {                    return;                } else {                    fromOtherDocDdt = true;                }            } else {                //no da ddt            }        } catch (Exception e) {        }                int dbAnno = 0;        //chiedo conferma per eliminare il documento        String msg = "Sicuro di eliminare la fattura ?";        dbAnno = Integer.parseInt(String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), 2)));        int res = JOptionPane.showConfirmDialog(this, msg);        if (res == JOptionPane.OK_OPTION) {            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));            // Ripristino situazione ordini            if (fromOtherDocOrdi) {                try {                    for (Map rec : da_ordi) {                        sql = "select id, convertito from test_ordi_acquisto where id = " + rec.get("da_ordi");                        List<Map> ordi = DbUtils.getListMap(Db.getConn(), sql);                        if (ordi.size() > 0) {                            Map recordi = ordi.get(0);                            String convertito = CastUtils.toString(recordi.get("convertito"));                            convertito = convertito.replaceAll("Fatt. " + check + "\n", "");                            convertito = convertito.replaceAll("\nFatt. " + check + "$", "");                            convertito = convertito.replaceAll("Fatt. " + check + "$", "");                            sql = "UPDATE test_ordi_acquisto SET ";                            if (convertito.equals("")) {                                sql += "convertito = NULL";                                sql += ", evaso = '', doc_tipo = NULL, doc_serie = NULL, doc_numero = NULL, doc_anno = NULL";                            } else {                                sql += "convertito = '" + convertito + "'";                                sql += ", evaso = 'P', doc_numero = '" + convertito.substring(convertito.lastIndexOf(" ")) + "'";                            }                            sql += " WHERE id = '" + CastUtils.toString(recordi.get("id")) + "' ";                            // TOLGO I RIFERIMENTI DALL'ORDINE                            Db.executeSql(sql);                            sql = "UPDATE righ_ordi_acquisto rord LEFT JOIN righ_fatt_acquisto rfat ON rfat.da_ordi_riga = rord.id ";                            sql += "SET rord.quantita_evasa = rord.quantita_evasa - rfat.quantita ";                            sql += "WHERE rfat.da_ordi = " + Db.pc(CastUtils.toString(recordi.get("id")), Types.INTEGER);                            sql += " AND rfat.id_padre = '" + griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("id")) + "'";                            // TOLGO I RIFERIMENTI DALLE RIGHE DELL'ORDINE                            Db.executeSql(sql);                        }                    }                } catch (SQLException ex) {                    JDialogExc dialog = new JDialogExc(main.getPadreFrame(), true, ex);                    dialog.setLocationRelativeTo(null);                    dialog.setVisible(true);                    return;                } catch (Exception ex2) {                    ex2.printStackTrace();                }            }            // Riprsitno situazione DDT            if (fromOtherDocDdt) {                try {                    for (Map rec : da_ddt) {                        sql = "select id, convertito from test_ddt_acquisto where id = " + rec.get("da_ddt");                        List<Map> ddt = DbUtils.getListMap(Db.getConn(), sql);                        if (ddt.size() > 0) {                            Map recddt = ddt.get(0);                            String convertito = CastUtils.toString(recddt.get("convertito"));                            convertito = convertito.replaceAll(" " + check + "\n", "");                            convertito = convertito.replaceAll("\n " + check + "$", "");                            convertito = convertito.replaceAll(" " + check + "$", "");                            sql = "UPDATE test_ddt_acquisto SET ";                            if (convertito.equals("")) {                                sql += "convertito = NULL";                                sql += ", evaso = '', fattura_serie = NULL, fattura_numero = NULL, fattura_anno = NULL";                            } else {                                sql += "convertito = '" + convertito + "'";                                sql += ", evaso = 'P'";                            }                            sql += " WHERE id = '" + CastUtils.toString(recddt.get("id")) + "' ";                            // TOLGO I RIFERIMENTI DALL'ORDINE                            Db.executeSql(sql);                            sql = "UPDATE righ_fatt_acquisto rfat LEFT JOIN righ_ddt_acquisto rddt ON rfat.da_ddt_riga = rddt.id ";                            sql += "SET rddt.quantita_evasa = rddt.quantita_evasa - rfat.quantita ";                            sql += "WHERE rfat.da_ddt = " + Db.pc(CastUtils.toString(recddt.get("id")), Types.INTEGER);                            sql += " AND rfat.id_padre = '" + griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("id")) + "'";                            // TOLGO I RIFERIMENTI DALLE RIGHE DELL'ORDINE                            Db.executeSql(sql);                        }                    }                } catch (SQLException ex) {                    JDialogExc dialog = new JDialogExc(main.getPadreWindow(), true, ex);                    dialog.setLocationRelativeTo(null);                    dialog.setVisible(true);                    return;                } catch (Exception ex2) {                    ex2.printStackTrace();                }            }            sql = "delete from test_fatt_acquisto";            sql += " where serie = '" + griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("serie")) + "'";            sql += " and numero = '" + griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("numero")) + "'";            sql += " and anno = " + dbAnno;            Db.executeSql(sql);            sql = "delete from righ_fatt_acquisto";            sql += " where serie = '" + griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("serie")) + "'";            sql += " and numero = '" + griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("numero")) + "'";            sql += " and anno = " + dbAnno;            Db.executeSql(sql);            sql = "delete from righ_fatt_acquisto_matricole";            sql += " where serie = '" + griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("serie")) + "'";            sql += " and numero = '" + griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("numero")) + "'";            sql += " and anno = " + dbAnno;            Db.executeSql(sql);            //elimino eventuali movimenti precedenti derivanti dallo stesso documento            sql = " where da_tabella = 'test_fatt_acquisto'";            sql += " and da_serie = '" + griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("serie")) + "'";            sql += " and da_numero = '" + griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("numero")) + "'";            sql += " and da_anno = " + Db.pc(dbAnno, "INTEGER");            Magazzino.preDelete(sql);            sql = "delete from movimenti_magazzino" + sql;            Db.executeSql(sql);            main.events.fireInvoicexEventMagazzino(this, inizio_mysql);                        try {                InvoicexEvent event = new InvoicexEvent(frmElenFattAcquisto.this);                event.type = InvoicexEvent.TYPE_FRMELENFATT_ACQUISTO_POST_DELETE;                main.events.fireInvoicexEvent(event);            } catch (Exception err) {                err.printStackTrace();            }                                    this.griglia.dbDelete();                        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));        }    }//GEN-LAST:event_butDeleActionPerformed    private void butModiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butModiActionPerformed        if (main.utente.getPermesso(Permesso.PERMESSO_FATTURE_ACQUISTO, Permesso.PERMESSO_TIPO_SCRITTURA)) {            InvoicexUtil.attendiCaricamentoPluginRitenute(new Runnable() {                public void run() {                    if (griglia.getSelectedRowCount() <= 0) {                        SwingUtils.showErrorMessage(frmElenFattAcquisto.this, "Seleziona un documento prima!");                        return;                    }                    String dbSerie = String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), 0));                    int dbNumero = Integer.parseInt(String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), 1)));                    int dbAnno = Integer.parseInt(String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), 2)));                    int dbIdFatt = Integer.parseInt(String.valueOf(griglia.getValueAt(griglia.getSelectedRow(), griglia.getColumnByName("ID"))));                    //controllo se è già aperta andare su quella                    List<JInternalFrame> frames = InvoicexUtil.getFrames(frmTestFattAcquisto.class);                    for (JInternalFrame iframe : frames) {                        frmTestFattAcquisto f = (frmTestFattAcquisto) iframe;                        if (f.id != null && f.id.equals(dbIdFatt)) {                            System.out.println("trovata form già aperta");                            main.getPadre().getDesktopPane().getDesktopManager().activateFrame(f);                            return;                        }                    }                    frmElenFattAcquisto.this.setCursor(new Cursor(Cursor.WAIT_CURSOR));                    try {                        InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA, dbIdFatt);                    } catch (Exception e) {                        e.printStackTrace();                    }                    //todo parametrizzare                    //frmFatturaRicevuta frmTemp = new frmFatturaRicevuta(frmFatturaRicevuta.DB_MODIFICA, dbSerie, dbNumero, dbAnno);                    frmTestFattAcquisto frmTemp = new frmTestFattAcquisto(frmTestFatt.DB_MODIFICA, dbSerie, dbNumero, "P", dbAnno, dbFattura.TIPO_FATTURA_ACQUISTO, dbIdFatt);                    frmTemp.from = frmElenFattAcquisto.this;                    Menu m = (Menu) main.getPadre();                    m.openFrame(frmTemp, 740, InvoicexUtil.getHeightIntFrame(750));                    frmElenFattAcquisto.this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));                }            });        }    }//GEN-LAST:event_butModiActionPerformed    private void butNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNewActionPerformed        InvoicexUtil.attendiCaricamentoPluginRitenute(new Runnable() {            public void run() {                frmElenFattAcquisto.this.setCursor(new Cursor(Cursor.WAIT_CURSOR));                frmTestFattAcquisto frmTemp = new frmTestFattAcquisto(frmTestFatt.DB_INSERIMENTO, "", 0, "P", 0, dbFattura.TIPO_FATTURA_ACQUISTO, -1);                frmTemp.from = frmElenFattAcquisto.this;                JInternalFrame frm = (JInternalFrame) frmTemp;                main.getPadre().openFrame(frm, 740, InvoicexUtil.getHeightIntFrame(750));                frmElenFattAcquisto.this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));            }        });    }//GEN-LAST:event_butNewActionPerformedprivate void menModificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menModificaActionPerformed    butModiActionPerformed(null);}//GEN-LAST:event_menModificaActionPerformedprivate void menEliminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menEliminaActionPerformed    butDeleActionPerformed(null);}//GEN-LAST:event_menEliminaActionPerformedprivate void grigliaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grigliaMouseReleased    if (evt.isPopupTrigger()) {        jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());    }}//GEN-LAST:event_grigliaMouseReleasedprivate void grigliaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grigliaMousePressed    if (evt.isPopupTrigger()) {        jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());    }}//GEN-LAST:event_grigliaMousePressedprivate void butPrinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrinActionPerformed    if (griglia.getSelectedRowCount() <= 0) {        SwingUtils.showErrorMessage(this, "Seleziona un documento prima!");        return;    }    main.loadIni();    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));    if (griglia.getSelectedRowCount() > 1) {        SwingWorker work = new SwingWorker() {            @Override            public Object construct() {                ArrayList files = new ArrayList();                for (int i : griglia.getSelectedRows()) {                    System.out.println("stampa:" + i);                    //final String tipoFattura = String.valueOf(griglia.getValueAt(i, 0));                    final String tipoFattura = "FI";                    final String dbSerie = String.valueOf(griglia.getValueAt(i, 0));                    final int dbNumero = Integer.parseInt(String.valueOf(griglia.getValueAt(i, 1)));                    final int dbAnno = Integer.parseInt(String.valueOf(griglia.getValueAt(i, 2)));                    final Integer id = cu.toInteger(griglia.getValueAt(i, griglia.getColumnByName("id")));                    try {                        Integer dbIdFatt = InvoicexUtil.getIdFatturaAcquisto(dbSerie, dbNumero, dbAnno);                        InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA, dbIdFatt);                    } catch (Exception e) {                        e.printStackTrace();                    }                    Object ret = stampa(tipoFattura, dbSerie, dbNumero, dbAnno, true, true, false, id);                    files.add(ret);                }                //concateno i pdf e li visualizzo                String out = System.getProperty("user.home") + "/stampa.pdf";                ItextUtil.concatenate(out, (String[]) files.toArray(new String[files.size()]));                Util.start(out);                return null;            }        };        work.start();    } else {        int i = griglia.getSelectedRow();        //final String tipoFattura = String.valueOf(griglia.getValueAt(i, 0));        final String tipoFattura = "FI";        final String dbSerie = String.valueOf(griglia.getValueAt(i, 0));        final int dbNumero = Integer.parseInt(String.valueOf(griglia.getValueAt(i, 1)));        final int dbAnno = Integer.parseInt(String.valueOf(griglia.getValueAt(i, 2)));        final Integer id = cu.toInteger(griglia.getValueAt(i, griglia.getColumnByName("id")));        try {            InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA, id);        } catch (Exception e) {            e.printStackTrace();        }        stampa(tipoFattura, dbSerie, dbNumero, dbAnno, id);    }    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));}//GEN-LAST:event_butPrinActionPerformedprivate void butEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butEmailActionPerformed    if (griglia.getSelectedRowCount() <= 0) {        SwingUtils.showErrorMessage(this, "Seleziona un documento prima!");        return;    }    main.loadIni();    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));    //creo la cartella, se non esistesse!    File fdDir = new File(main.wd + "tempEmail");    fdDir.mkdir();    //elimino i precedenti files    File d = new File(main.wd + "tempEmail");    Util.deleteFilesFromDir(d);    int[] selRows = this.griglia.getSelectedRows();    for (int i = 0; i < selRows.length; i++) {        int selRow = selRows[i];        //final String tipoFattura = String.valueOf(griglia.getValueAt(selRow, 0));        final String tipoFattura = "FI";        final String dbSerie = String.valueOf(griglia.getValueAt(selRow, 0));        final int dbNumero = Integer.parseInt(String.valueOf(griglia.getValueAt(selRow, 1)));        final int dbAnno = Integer.parseInt(String.valueOf(griglia.getValueAt(selRow, 2)));        final Integer id = cu.toInteger(griglia.getValueAt(i, griglia.getColumnByName("id")));        try {            InvoicexUtil.aggiornaTotaliRighe(Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA, id);        } catch (Exception e) {            e.printStackTrace();        }        stampa(tipoFattura, dbSerie, dbNumero, dbAnno, true, false, true, id);    }    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));    try {        Util.start(fdDir.getAbsolutePath());    } catch (Exception err) {        err.printStackTrace();    }    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));}//GEN-LAST:event_butEmailActionPerformedprivate void menExportCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menExportCSVActionPerformed    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    if (griglia.getSelectedRowCount() < 0) {        JOptionPane.showMessageDialog(this, "Seleziona almeno una riga da esportare", "Errore Selezione", JOptionPane.INFORMATION_MESSAGE);        return;    } else {        int[] ids = new int[griglia.getSelectedRowCount()];        int i = 0;        int first = griglia.getSelectedRow();        String serie = String.valueOf(griglia.getValueAt(first, griglia.getColumnByName("serie")));        String numero = String.valueOf(griglia.getValueAt(first, griglia.getColumnByName("numero")));        String nomeCliente = String.valueOf(griglia.getValueAt(first, griglia.getColumnByName("Fornitore")));        String nomeFile = "documento_" + Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA + "_" + serie + numero + "_" + nomeCliente;        nomeFile = FileUtils.normalizeFileName(nomeFile);        String input = JOptionPane.showInputDialog(this, "Inserisci il nome con cui vuoi salvare il file: ", nomeFile);        if (input != null) {            if (!input.equals("")) {                nomeFile = FileUtils.normalizeFileNameDir(input);                for (int rigaSel : griglia.getSelectedRows()) {                    int id = Integer.parseInt(String.valueOf(griglia.getValueAt(rigaSel, griglia.getColumnByName("id"))));                    ids[i] = id;                    i++;                }            } else {                int res = JOptionPane.showConfirmDialog(this, "Non puoi inserire un nome vuoto per il file. Continuare con il nome standard?", "Errore inserimento", JOptionPane.YES_NO_OPTION);                if (res == JOptionPane.NO_OPTION) {                    this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));                    return;                }            }            InvoicexUtil.exportCSV(Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA, ids, nomeFile);        }    }    this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}//GEN-LAST:event_menExportCSVActionPerformedprivate void menColAggRiferimentoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColAggRiferimentoClienteActionPerformed    System.out.println("ColAgg_RiferimentoCliente = " + menColAggRiferimentoCliente.isSelected());    main.fileIni.setValue("pref", "ColAgg_RiferimentoCliente", menColAggRiferimentoCliente.isSelected());    dbRefresh();}//GEN-LAST:event_menColAggRiferimentoClienteActionPerformedprivate void texClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texClienteKeyReleased    filtraPerCliente();}//GEN-LAST:event_texClienteKeyReleasedprivate void butNotaCreditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNotaCreditoActionPerformed    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));    frmTestFattAcquisto frmTemp = new frmTestFattAcquisto(frmTestFatt.DB_INSERIMENTO, "", 0, "P", 0, dbFattura.TIPO_FATTURA_NOTA_DI_CREDITO_ACQUISTO, -1);    frmTemp.from = this;    JInternalFrame frm = (JInternalFrame) frmTemp;    main.getPadre().openFrame(frm, 740, InvoicexUtil.getHeightIntFrame(750));    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));}//GEN-LAST:event_butNotaCreditoActionPerformed    private void menColoraRossoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColoraRossoActionPerformed        InvoicexUtil.salvaColoreRiga("rosso", "test_fatt_acquisto", griglia);    }//GEN-LAST:event_menColoraRossoActionPerformed    private void menColoraBluActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColoraBluActionPerformed        InvoicexUtil.salvaColoreRiga("blu", "test_fatt_acquisto", griglia);    }//GEN-LAST:event_menColoraBluActionPerformed    private void menColoraGialloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menColoraGialloActionPerformed        InvoicexUtil.salvaColoreRiga("giallo", "test_fatt_acquisto", griglia);    }//GEN-LAST:event_menColoraGialloActionPerformed    private void menTogliColoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menTogliColoreActionPerformed        InvoicexUtil.salvaColoreRiga("", "test_fatt_acquisto", griglia);    }//GEN-LAST:event_menTogliColoreActionPerformed    private void texLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texLimitActionPerformed        // TODO add your handling code here:    }//GEN-LAST:event_texLimitActionPerformed    private void comClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comClienteActionPerformed        // TODO add your handling code here:    }//GEN-LAST:event_comClienteActionPerformed    private void texLimit1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texLimit1KeyPressed        /* DAVID */        if (evt.getKeyCode() == evt.VK_ENTER) {            texLimit1FocusLost(null);        }        filtraPerSerie();        /* DAVID */    }//GEN-LAST:event_texLimit1KeyPressed    private void texLimit1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_texLimit1FocusLost        /* DAVID */        filtraPerSerie();        /* DAVID */    }//GEN-LAST:event_texLimit1FocusLost    private void texLimit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texLimit1ActionPerformed        // TODO add your handling code here:    }//GEN-LAST:event_texLimit1ActionPerformed    public void filtraPerCliente() {        delay_cliente.update();    }    /* DAVID */    public void filtraPerSerie() {        delay_cliente.update();    }    /* DAVID */        // Variables declaration - do not modify//GEN-BEGIN:variables    private javax.swing.JButton butDele;    private javax.swing.JButton butEmail;    private javax.swing.JButton butModi;    private javax.swing.JButton butNew;    private javax.swing.JButton butNotaCredito;    private javax.swing.JButton butPrin;    private javax.swing.JButton butRefresh;    private tnxbeans.tnxComboField comCliente;    public tnxbeans.tnxDbGrid griglia;    private javax.swing.JLabel jLabel1;    private javax.swing.JLabel jLabel10;    private javax.swing.JLabel jLabel2;    private javax.swing.JLabel jLabel3;    private javax.swing.JLabel jLabel4;    private javax.swing.JLabel jLabel5;    private javax.swing.JLabel jLabel6;    private javax.swing.JLabel jLabel7;    private javax.swing.JLabel jLabel8;    private javax.swing.JLabel jLabel9;    private javax.swing.JPanel jPanel2;    private javax.swing.JPanel jPanel3;    private javax.swing.JPanel jPanel4;    private javax.swing.JPanel jPanel5;    private javax.swing.JPanel jPanel6;    private javax.swing.JPanel jPanel7;    private javax.swing.JPopupMenu jPopupMenu1;    private javax.swing.JScrollPane jScrollPane1;    private javax.swing.JLabel labTotale;    private javax.swing.JMenu menColAgg;    private javax.swing.JCheckBoxMenuItem menColAggRiferimentoCliente;    private javax.swing.JMenuItem menColoraBlu;    private javax.swing.JMenuItem menColoraGiallo;    private javax.swing.JMenu menColoraRiga;    private javax.swing.JMenuItem menColoraRosso;    private javax.swing.JMenuItem menElimina;    private javax.swing.JMenuItem menExportCSV;    private javax.swing.JMenuItem menModifica;    private javax.swing.JMenuItem menTogliColore;    private javax.swing.JPanel panDati;    private javax.swing.JTextField texAl;    public javax.swing.JTextField texCliente;    private javax.swing.JTextField texDal;    private javax.swing.JTextField texLimit;    private javax.swing.JTextField texLimit1;    // End of variables declaration//GEN-END:variables    public void dbRefresh() {        int oldsel = griglia.getSelectedRow();        int oldselid = -1;        if (oldsel >= 0) {            try {                oldselid = CastUtils.toInteger(griglia.getValueAt(oldsel, griglia.getColumnByName("id")));            } catch (Exception e) {            }        }        String sql;        sql = "select ";        sql += " test_fatt_acquisto.serie AS Serie, ";        sql += " test_fatt_acquisto.numero AS Numero, ";        sql += " test_fatt_acquisto.anno AS Anno, ";        sql += " test_fatt_acquisto.data AS `Data reg`, ";        sql += " test_fatt_acquisto.serie_doc AS `Serie doc`, ";        sql += " test_fatt_acquisto.numero_doc AS `Numero doc`, ";        sql += " test_fatt_acquisto.data_doc AS `Data doc`, ";        sql += " clie_forn.ragione_sociale As Fornitore, ";        sql += " test_fatt_acquisto.descrizione AS Note, ";        /* DAVID */        sql += " test_fatt_acquisto.definitivo AS Definitiva, ";        /* DAVID */        //sql += " test_fatt_acquisto.importo AS Totale ";        if (main.pluginRitenute && main.fileIni.getValueBoolean("pluginRitenute", "totale_fatture_in_elenco", false)) {            sql += " test_fatt_acquisto.totale_da_pagare AS Totale ";        } else {            sql += " test_fatt_acquisto.importo AS Totale ";        }        sql += " , test_fatt_acquisto.imponibile ";        sql += " , test_fatt_acquisto.iva ";        sql += " , test_fatt_acquisto.id";        if (main.fileIni.getValueBoolean("pref", "ColAgg_RiferimentoCliente", false)) {            sql += " , clie_forn.persona_riferimento as 'Riferimento Fornitore'";        }        if (pluginEmail) {            sql += " , test_fatt_acquisto.mail_inviata as 'Mail Inviata'";        }        sql += ", color ";        sql += " from test_fatt_acquisto left join clie_forn on";        sql += " test_fatt_acquisto.fornitore = clie_forn.codice";        sql += " where 1 = 1\n";        sql += sqlWhereDaData;        sql += sqlWhereAData;        sql += sqlWhereCliente;        /* DAVID */        sql += sqlWhereSerie;        /* DAVID */        sql += "\n order by test_fatt_acquisto.data desc,test_fatt_acquisto.numero desc";        sql += sqlWhereLimit;        System.out.println("sql:" + sql);        this.griglia.dbOpen(Db.getConn(), sql, Db.INSTANCE);        //calcolo il totale        if (this.visualizzaTotali == true) {            double totale = 0;            double totaleIva = 0;            double totaleImp = 0;            int totaleDocumenti = 0;            int contaDocumenti = 0;            ResultSet somma = Db.openResultSet(sql);            ResultSet rtota = Db.openResultSet("select count(*) from test_fatt_acquisto");            try {                while (somma.next()) {//                    if (Db.nz(somma.getString("Tipo"), "").equals("NC")) {//                        totale -= Math.abs(somma.getDouble("Totale"));//                        totaleImp -= Math.abs(somma.getDouble("totale_imponibile"));//                        totaleIva -= Math.abs(somma.getDouble("totale_iva"));//                    } else {                    totale += somma.getDouble("Totale");                    totaleImp += somma.getDouble("imponibile");                    totaleIva += somma.getDouble("iva");//                    }                    contaDocumenti++;                }                if (rtota.next()) {                    totaleDocumenti = rtota.getInt(1);                }//                this.labTotale.setText("documenti visualizzati " + contaDocumenti + " di " + totaleDocumenti + " / totale documenti visualizzati \u20ac " + it.tnx.Util.formatValutaEuro(totale) + " ");                this.labTotale.setText("documenti visualizzati " + contaDocumenti + " di " + totaleDocumenti + " / totale documenti visualizzati Imponib.: \u20ac " + it.tnx.Util.formatValutaEuro(totaleImp) + " " + " IVA: \u20ac " + it.tnx.Util.formatValutaEuro(totaleIva) + " " + "Totale: \u20ac " + it.tnx.Util.formatValutaEuro(totale));            } catch (Exception err) {                err.printStackTrace();                this.labTotale.setText("");            }        } else {            this.labTotale.setText("");        }        try {            if (oldsel != -1) {                //riseleziono                int colid = griglia.getColumnByName("id");                for (int i = 0; i < griglia.getRowCount(); i++) {                    if (CastUtils.toInteger(griglia.getValueAt(i, colid)) == oldselid) {                        griglia.getSelectionModel().setSelectionInterval(i, i);                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    static public void stampa(final String tipoFattura, final String dbSerie, final int dbNumero, final int dbAnno, final Integer id) {        stampa(tipoFattura, dbSerie, dbNumero, dbAnno, false, false, false, id);    }    static public Object stampa(final String tipoFattura, final String dbSerie, final int dbNumero, final int dbAnno, final boolean generazionePdfDaJasper, final boolean attendi, final boolean booleanPerEmail, final Integer id) {        Object ret = null;        //final String prefTipoStampa = main.prefs.get(paramTipoStampa, "");        final String prefTipoStampa = "fattura_acquisto_default.jrxml";//        final String prefTipoStampa = "fattura_acquisto_mod2_default.jrxml";        //salvo img logo in db percè le stampe la caricono da db invece che da file per integrazione con client manager        //JDialogImpostazioni.salvaLogoInDb(main.fileIni.getValue("varie", "percorso_logo_stampe"));        //nuovo tipo di stampa        if (prefTipoStampa.endsWith(".jrxml")) {            SwingWorker work = new SwingWorker() {                public Object construct() {                    final JDialog dialog = new JDialogCompilazioneReport();                    Object ret = null;                    try {                        dialog.setLocationRelativeTo(null);                        dialog.setVisible(true);                        File freport = new File(Reports.DIR_REPORTS + Reports.DIR_FATTURE + prefTipoStampa);                                                JasperReport rep = Reports.getReport(freport);                        java.util.Map params = new java.util.HashMap();                        reports.JRDSInvoiceAcquisto jrInvoice = new reports.JRDSInvoiceAcquisto(Db.getConn(), dbSerie, dbNumero, dbAnno, booleanPerEmail, id);                        params.put("myds", jrInvoice);                        if (tipoFattura.equalsIgnoreCase("NC")) {                            params.put("FATTURA_NOTA", "Nota di Credito");                        }                        JasperPrint print = JasperManager.fillReport(rep, params, jrInvoice);                        java.util.prefs.Preferences preferences = java.util.prefs.Preferences.userNodeForPackage(main.class);                        if (generazionePdfDaJasper) {                            //File fd = new File("tempEmail/documento_" + tipoFattura + "_" + dbSerie + String.valueOf(dbNumero) + "_" + jrInvoice.nomeClienteFile + ".pdf");                            String nomeFile = "documento_" + tipoFattura + "_" + dbSerie + String.valueOf(dbNumero) + "_" + jrInvoice.nomeClienteFile + ".pdf";                            nomeFile = "tempEmail/" + FileUtils.normalizeFileName(nomeFile);                            File fd = new File(main.wd + nomeFile);                            String nomeFilePdf = fd.getAbsolutePath();                            JasperExportManager.exportReportToPdfFile(print, nomeFilePdf);                            ret = nomeFilePdf;                        } else {//                            if (preferences.getBoolean("stampaPdf", false)) {                            if (main.fileIni.getValueBoolean("pref", "stampaPdf", false)) {                                String nomeFilePdf = "tempPrnFatt.pdf";                                JasperExportManager.exportReportToPdfFile(print, nomeFilePdf);                                //SwingUtils.open(new File(nomeFilePdf));                                Util.start2(nomeFilePdf);                            } else {                                final JasperPrint printer = print;                                Thread t = new Thread(new Runnable() {                                    public void run() {                                        JDialogJasperViewer viewr = new JDialogJasperViewer(main.getPadre(), true, printer);                                        viewr.setTitle("Anteprima di stampa");                                        viewr.setLocationRelativeTo(null);                                        viewr.setVisible(true);                                    }                                });                                t.start();                            }                        }                    } catch (JRException jrerr) {                        JOptionPane.showMessageDialog(Menu.getCurrenWindow(), jrerr.toString(), "Errore", JOptionPane.ERROR_MESSAGE);                    } finally {                        dialog.setVisible(false);                    }//                    main.getPadre().toFront();                    return ret;                }            };            work.start();            if (attendi) {                ret = work.get();                System.out.println("get " + work + " : " + ret);            }        }        return ret;    }}