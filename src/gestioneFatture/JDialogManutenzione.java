package gestioneFatture;

import it.tnx.Db;
import it.tnx.PrintUtilities;
import it.tnx.commons.CastUtils;
import it.tnx.commons.DateUtils;
import it.tnx.commons.DbUtils;
import it.tnx.commons.DebugFastUtils;
import it.tnx.commons.MicroBench;
import it.tnx.commons.SwingUtils;
import it.tnx.invoicex.InvoicexUtil;
import java.awt.Color;
import java.awt.Component;
import java.sql.ResultSet;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.apache.commons.lang.StringUtils;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JDialogManutenzione.java
 *
 * Created on 8-giu-2010, 11.07.31
 */
/**
 *
 * @author mceccarelli
 */
public class JDialogManutenzione extends javax.swing.JDialog {

    String sql3 = "select m.id, m.data,m.causale, m.articolo, m.quantita, m.da_tabella, m.da_numero, m.da_anno, m.da_id from righ_ddt_acquisto r  "
            + " join movimenti_magazzino m on r.in_fatt = m.da_id and da_tabella = 'test_fatt_acquisto' "
            + " where in_fatt is not null";

    /**
     * Creates new form JDialogManutenzione
     */
    public JDialogManutenzione(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        try {
            InvoicexEvent event = new InvoicexEvent(this);
            event.type = InvoicexEvent.TYPE_GENERIC_PostInitComps;
            main.events.fireInvoicexEvent(event);
        } catch (Exception err) {
            err.printStackTrace();
        }
        
        tab.getColumnModel().getColumn(2).setCellRenderer(new TableCellRenderer() {
            JLabel lab = new JLabel();

            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                lab.setOpaque(true);
                if (value != null) {
                    lab.setText(value.toString());
                    lab.setBackground(Color.GREEN);
                } else {
                    lab.setText("");
                    lab.setBackground(Color.RED);
                }
                return lab;
            }
        });
        tipoActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabpadre = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        butRif = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        textAreaRif = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaNum = new javax.swing.JTextArea();
        stampaNum = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tipo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        anno = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tab = new javax.swing.JTable();
        controlla = new javax.swing.JButton();
        elimina = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        check_area = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ta3 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manutenzione");

        tabpadre.setName("tabpadre"); // NOI18N

        butRif.setText("Aggiorna i riferimenti");
        butRif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRifActionPerformed(evt);
            }
        });

        textAreaRif.setColumns(20);
        textAreaRif.setRows(5);
        jScrollPane5.setViewportView(textAreaRif);

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 576, Short.MAX_VALUE)
            .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jScrollPane5)
                        .add(jPanel5Layout.createSequentialGroup()
                            .add(butRif)
                            .add(425, 425, 425)))
                    .addContainerGap()))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 386, Short.MAX_VALUE)
            .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(butRif)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        tabpadre.addTab("Aggiorna numeri di riferimento dei documenti", jPanel5);

        jButton4.setText("Esegui il controllo");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        textAreaNum.setColumns(20);
        textAreaNum.setRows(5);
        jScrollPane4.setViewportView(textAreaNum);

        stampaNum.setText("Stampa");
        stampaNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stampaNumActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jButton4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 372, Short.MAX_VALUE)
                        .add(stampaNum)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton4)
                    .add(stampaNum))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Controllo numerazione Fatture e DDT di vendita", jPanel4);

        jLabel2.setText("Tipo Doc.");

        tipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DDT", "Fatture" }));
        tipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoActionPerformed(evt);
            }
        });

        jLabel1.setText("Anno");

        anno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id movimento", "id documento", "documento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tab);
        tab.getColumnModel().getColumn(0).setPreferredWidth(150);
        tab.getColumnModel().getColumn(1).setPreferredWidth(50);

        controlla.setText("controlla");
        controlla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controllaActionPerformed(evt);
            }
        });

        elimina.setText("elimina i movimenti senza documento");
        elimina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminaActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(anno, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(controlla)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(elimina)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(tipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1)
                    .add(anno, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(controlla)
                    .add(elimina))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Controllo movimenti", jPanel1);

        jButton1.setText("Check");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        check_area.setColumns(20);
        check_area.setEditable(false);
        check_area.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        check_area.setRows(5);
        jScrollPane2.setViewportView(check_area);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                    .add(jButton1))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jButton1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Controllo Database", jPanel2);

        jButton2.setText("controllo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        ta3.setColumns(20);
        ta3.setRows(5);
        jScrollPane3.setViewportView(ta3);

        jButton3.setText("pulisci");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jButton2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton3)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton2)
                    .add(jButton3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabpadre.addTab("Controllo movimenti fatture di acquisto", jPanel3);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tabpadre)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(tabpadre)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoActionPerformed
        SwingUtils.initJComboFromDb(anno, Db.getConn(), "select anno from " + teste() + " group by anno order by anno desc", "anno", "anno");
}//GEN-LAST:event_tipoActionPerformed

    private void controllaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controllaActionPerformed
        SwingUtils.mouse_wait(this);
        tabm().setRowCount(0);

//        String sql = "select cast(concat('Doc. ',d.serie, d.numero,' del ',DATE_FORMAT(d.data, '%d/%m/%y')) as CHAR) as doc, IF(min(m.id) is null, true, false) as mov from " + teste() + " d left join movimenti_magazzino m";
//        sql += " on d.id = m.da_id and m.da_tabella = '" + teste() + "'";
//        sql += " where year(d.data) = " + anno.getSelectedItem().toString();
//        sql += " group by d.id";
//        sql += " order by d.id desc";

        String sql = "select m.id, m.da_id, cast(concat('Doc. ',d.serie, d.numero,' del ',DATE_FORMAT(d.data, '%d/%m/%y')) as CHAR) as doc "
                + " from movimenti_magazzino m  left join  test_fatt d "
                + " on  m.da_id = d.id and m.da_tabella = '" + teste() + "' "
                + " where m.da_tabella = '" + teste() + "' and year(m.data) = " + anno.getSelectedItem().toString() + " and m.da_id > 0 order by m.da_id desc";
        System.out.println("sql: " + sql);
        List<Object[]> list;
        try {
            list = DbUtils.getListArray(Db.getConn(), sql);
            for (Object[] row : list) {
                tabm().addRow(row);
            }
        } catch (Exception ex) {
            Logger.getLogger(JDialogManutenzione.class.getName()).log(Level.SEVERE, null, ex);
        }
        SwingUtils.mouse_def(this);
    }//GEN-LAST:event_controllaActionPerformed

    private void eliminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminaActionPerformed
        for (int i = 0; i < tab.getRowCount(); i++) {
            if (tab.getValueAt(i, 2) == null) {
                System.out.println("elimino movimento id: " + tab.getValueAt(i, 0));
                try {
                    DbUtils.tryExecQuery(Db.getConn(), "delete from movimenti_magazzino where id = " + tab.getValueAt(i, 0));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        controllaActionPerformed(null);
    }//GEN-LAST:event_eliminaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ResultSet r = null;
        try {
            r = DbUtils.tryOpenResultSet(Db.getConn(), "show tables");
            while (r.next()) {
                check_area.append(r.getString(1));
                ResultSet rc = DbUtils.tryOpenResultSet(Db.getConn(), "check table " + r.getString(1));
                try {
                    rc.next();
                    System.out.println(rc.getString(4));
                    System.out.println(r.getString(1) + " : checked");
                    check_area.append(" ..." + rc.getString(4) + "\n");
                    check_area.setCaretPosition(check_area.getText().length());
                } finally {
                    rc.getStatement().close();
                    rc.close();
                }
            }
        } catch (Exception err) {
            try {
                r.getStatement().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                r.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ta3.append("sql:\n" + sql3);
        List<Map> list;
        try {
            list = DbUtils.getListMap(Db.getConn(), sql3);
            for (Map m : list) {
                ta3.append("\nrec: " + DebugFastUtils.dumpAsString(m));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            SwingUtils.showErrorMessage(main.getPadreWindow(), ex.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ta3.append("\npulizia:\n");
        ta3.append("sql:\n" + sql3);
        List<Map> list;
        try {
            list = DbUtils.getListMap(Db.getConn(), sql3);
            for (Map m : list) {
                ta3.append("\nrec: " + DebugFastUtils.dumpAsString(m));
                String sql = "delete from movimenti_magazzino where id = " + CastUtils.toString(m.get("id"));
                ta3.append("\nsql: " + DebugFastUtils.dumpAsString(m));
                int recs = DbUtils.tryExecQueryWithResult(Db.getConn(), sql);
                ta3.append("\nrecs affected: " + recs);
                ta3.append("\n");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            SwingUtils.showErrorMessage(main.getPadreWindow(), ex.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String msg = "";
        MicroBench mb = new MicroBench();
        mb.start();
        String msgf = main.controlloNumeri("test_fatt");
        String msgd = main.controlloNumeri("test_ddt");
        System.out.println("fine controllo numerazione tempo:" + mb.getDiff(""));
        if (StringUtils.isNotBlank(msgf) || StringUtils.isNotBlank(msgd)) {
         
            msg = "Attenzione, problemi nella numerazione dei documenti:\n";
            if (StringUtils.isNotBlank(msgf)) {
                msg += "\nFatture di vendita:\n" + msgf;
            }
            if (StringUtils.isNotBlank(msgd)) {
                msg += "\nDDT di vendita:\n" + msgd;
            }
            textAreaNum.setText(msg);
        } else {
            textAreaNum.setText("Numerazione corretta");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void stampaNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stampaNumActionPerformed
        PrintUtilities p = new PrintUtilities(textAreaNum);
        p.scala = 1;
        p.print();
    }//GEN-LAST:event_stampaNumActionPerformed

    private void butRifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRifActionPerformed
        String msg = "";
        MicroBench mb = new MicroBench();
        mb.start();
        
        SwingUtils.mouse_wait(this);
        
        aggiornaRif(false);
        aggiornaRif(true);
        
        SwingUtils.mouse_def(this);

        mb.out("fine rif");
    }//GEN-LAST:event_butRifActionPerformed

    public void aggiornaRif(boolean acquisto) {
        String sql = null;
        String suffisso = acquisto ? "_acquisto" : "";
        try {
            //ordi
            sql = "select id as da_ordi from test_ordi" + suffisso + " where year(data) >= " + (DateUtils.getCurrentYear() - 1) + " order by id";
            System.out.println("sql = " + sql);
            List<Map> list1 = DbUtils.getListMap(Db.getConn(), sql);
            for (Map m1 : list1) {
                if (DbUtils.containRows(Db.getConn(), "select id from test_ordi" + suffisso + " where id = " + m1.get("da_ordi"))) {
                    System.out.println("devo aggiornare l'ordine id:" + m1.get("da_ordi"));
                    String convertito = "";
                    sql = "select anno, numero, serie, id, id_padre, da_ordi from righ_fatt" + suffisso + " where da_ordi = " + m1.get("da_ordi") + " group by id_padre";
                    System.out.println("sql = " + sql);
                    List<Map> list2 = DbUtils.getListMap(Db.getConn(), sql);
                    for (Map m2 : list2) {
                        System.out.println("l'ordine id:" + m1.get("da_ordi") + " è in questa fattura:" + m2.get("anno") + "/" + m2.get("numero") + "/" + m2.get("serie") + " id:" + m2.get("id_padre"));
                        convertito += (convertito.length() > 0 ? "\n" : "") + InvoicexUtil.getNumeroDaId(acquisto ? Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA : Db.TIPO_DOCUMENTO_FATTURA, CastUtils.toInteger(m2.get("id_padre")), true);
                    }
                    sql = "select anno, numero, serie, id, id_padre, da_ordi from righ_ddt" + suffisso + " where da_ordi = " + m1.get("da_ordi") + " group by id_padre";
                    list2 = DbUtils.getListMap(Db.getConn(), sql);
                    System.out.println("sql = " + sql);
                    for (Map m2 : list2) {
                        System.out.println("l'ordine id:" + m1.get("da_ordi") + " è in questo ddt:" + m2.get("anno") + "/" + m2.get("numero") + "/" + m2.get("serie") + " id:" + m2.get("id_padre"));
                        convertito += (convertito.length() > 0 ? "\n" : "") + InvoicexUtil.getNumeroDaId(acquisto ? Db.TIPO_DOCUMENTO_DDT_ACQUISTO : Db.TIPO_DOCUMENTO_DDT, CastUtils.toInteger(m2.get("id_padre")), true);
                    }

                    String convertito_old = "";
                    try {
                        convertito_old = CastUtils.toString(DbUtils.getObject(Db.getConn(), "select convertito from test_ordi" + suffisso + " where id = " + m1.get("da_ordi")));
                    } catch (Exception e) {
                    }

                    if (convertito != null && !convertito.equals(convertito_old)) {
                        //aggiorno
                        sql = "update test_ordi" + suffisso + " t";
                        sql += " set convertito = " + Db.pc(convertito, "VARCHAR");
                        sql += " where id = " + m1.get("da_ordi");
                        System.out.println("sql = " + sql);
                        DbUtils.tryExecQuery(Db.getConn(), sql);
                        textAreaRif.append("ordine id:" + m1.get("da_ordi") + " cambiato da:\n" + convertito_old + " \nin:\n" + convertito + "\n\n");
                    }
                } else {
                    System.out.println("devo aggiornare l'ordine id:" + m1.get("da_ordi") + " ma non esiste...");
                }
            }
            
            
            //ddt
            sql = "select id as da_ddt from test_ddt" + suffisso + " where year(data) >= " + (DateUtils.getCurrentYear() - 1) + " order by id";
            System.out.println("sql = " + sql);
            list1 = DbUtils.getListMap(Db.getConn(), sql);
            for (Map m1 : list1) {
                if (DbUtils.containRows(Db.getConn(), "select id from test_ddt" + suffisso + " where id = " + m1.get("da_ddt"))) {
                    System.out.println("devo aggiornare il ddt id:" + m1.get("da_ddt"));
                    String convertito = "";
                    sql = "select anno, numero, serie, id, id_padre, da_ddt from righ_fatt" + suffisso + " where da_ddt = " + m1.get("da_ddt") + " group by id_padre";
                    System.out.println("sql = " + sql);
                    List<Map> list2 = DbUtils.getListMap(Db.getConn(), sql);
                    for (Map m2 : list2) {
                        System.out.println("il ddt id:" + m1.get("da_ddt") + " è in questa fattura:" + m2.get("anno") + "/" + m2.get("numero") + "/" + m2.get("serie") + " id:" + m2.get("id_padre"));
                        convertito += (convertito.length() > 0 ? "\n" : "") + InvoicexUtil.getNumeroDaId(acquisto ? Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA : Db.TIPO_DOCUMENTO_FATTURA, CastUtils.toInteger(m2.get("id_padre")), false);
                    }

                    String convertito_old = "";
                    try {
                        convertito_old = CastUtils.toString(DbUtils.getObject(Db.getConn(), "select convertito from test_ddt" + suffisso + " where id = " + m1.get("da_ddt")));
                    } catch (Exception e) {
                    }

                    if (convertito != null && !convertito.equals(convertito_old)) {
                        //aggiorno
                        sql = "update test_ddt" + suffisso + " t";
                        sql += " set convertito = " + Db.pc(convertito, "VARCHAR");
                        sql += " where id = " + m1.get("da_ddt");
                        System.out.println("sql = " + sql);
                        DbUtils.tryExecQuery(Db.getConn(), sql);
                        textAreaRif.append("ddt id:" + m1.get("da_ddt") + " cambiato da:\n" + convertito_old + " \nin:\n" + convertito + "\n\n");
                    }
                } else {
                    System.out.println("devo aggiornare il ddt id:" + m1.get("da_ddt") + " ma non esiste...");
                }
            }
            
            //ddt - fatt (in_fatt su righ_ddt)
            if (main.getPersonalContain("aggrif2")) {
                sql = "select id as da_ddt from test_ddt" + suffisso + " where year(data) >= " + (DateUtils.getCurrentYear() - 1) + " order by id";
                System.out.println("sql = " + sql);
                list1 = DbUtils.getListMap(Db.getConn(), sql);
                for (Map m1 : list1) {
                    if (DbUtils.containRows(Db.getConn(), "select id from test_ddt" + suffisso + " where id = " + m1.get("da_ddt"))) {
                        System.out.println("devo aggiornare il ddt id:" + m1.get("da_ddt"));
                        String convertito = "";
                        sql = "select tf.anno, tf.numero, tf.serie, tf.id, id_padre, in_fatt from righ_ddt" + suffisso + " rd join test_fatt" + suffisso + " tf on rd.in_fatt = tf.id  where rd.id_padre = " + m1.get("da_ddt") + "  group by in_fatt";
                        System.out.println("sql = " + sql);
                        List<Map> list2 = DbUtils.getListMap(Db.getConn(), sql);
                        for (Map m2 : list2) {
                            System.out.println("il ddt id:" + m1.get("da_ddt") + " è in questa fattura:" + m2.get("anno") + "/" + m2.get("numero") + "/" + m2.get("serie") + " id:" + m2.get("in_fatt"));
                            convertito += (convertito.length() > 0 ? "\n" : "") + InvoicexUtil.getNumeroDaId(acquisto ? Db.TIPO_DOCUMENTO_FATTURA_RICEVUTA : Db.TIPO_DOCUMENTO_FATTURA, CastUtils.toInteger(m2.get("in_fatt")), false);
                        }
                        System.out.println("nuovo convertito  = " + convertito );

                        String convertito_old = "";
                        try {
                            convertito_old = CastUtils.toString(DbUtils.getObject(Db.getConn(), "select convertito from test_ddt" + suffisso + " where id = " + m1.get("da_ddt")));
                        } catch (Exception e) {
                        }

                        if (convertito != null && !convertito.equals(convertito_old)) {
                            //aggiorno
                            sql = "update test_ddt" + suffisso + " t";
                            sql += " set convertito = " + Db.pc(convertito, "VARCHAR");
                            sql += " where id = " + m1.get("da_ddt");
                            System.out.println("sql = " + sql);
                            DbUtils.tryExecQuery(Db.getConn(), sql);
                            textAreaRif.append("ddt id:" + m1.get("da_ddt") + " cambiato da:\n" + convertito_old + " \nin:\n" + convertito + "\n\n");
                        }
                    } else {
                        System.out.println("devo aggiornare il ddt id:" + m1.get("da_ddt") + " ma non esiste...");
                    }
                }
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogManutenzione dialog = new JDialogManutenzione(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox anno;
    private javax.swing.JButton butRif;
    private javax.swing.JTextArea check_area;
    private javax.swing.JButton controlla;
    private javax.swing.JButton elimina;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton stampaNum;
    private javax.swing.JTextArea ta3;
    private javax.swing.JTable tab;
    private javax.swing.JTabbedPane tabpadre;
    private javax.swing.JTextArea textAreaNum;
    private javax.swing.JTextArea textAreaRif;
    private javax.swing.JComboBox tipo;
    // End of variables declaration//GEN-END:variables

    private String teste() {
        if (tipo.getSelectedItem().toString().equals("DDT")) {
            return "test_ddt";
        } else {
            return "test_fatt";
        }
    }

    private DefaultTableModel tabm() {
        return (DefaultTableModel) tab.getModel();
    }
}
